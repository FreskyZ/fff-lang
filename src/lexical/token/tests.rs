///! --------------------------------------------------------------------------------
///! This code is auto generated by a tool
///! Changes may cause incorrect behavior and will be lost if the code is regenerated
///! --------------------------------------------------------------------------------

use super::*;

#[test]
fn separator_basic() {

    assert_eq!(Separator::Div.display(), "/");
    assert_eq!(Separator::AndAnd.display(), "&&");
    assert_eq!(Separator::DivEq.display(), "/=");
    assert_eq!(Separator::OrOr.display(), "||");
    assert_eq!(Separator::SemiColon.display(), ";");
    assert!(Separator::Caret.kind(SeparatorKind::BitXor));
    assert!(!Separator::Caret.kind(SeparatorKind::Unary));
    assert!(Separator::LBracket.kind(SeparatorKind::Separator));
    assert!(!Separator::LBracket.kind(SeparatorKind::Multiplicative));
    assert!(Separator::Mul.kind(SeparatorKind::Multiplicative));
    assert!(!Separator::Mul.kind(SeparatorKind::Shift));
    assert!(Separator::Tilde.kind(SeparatorKind::Unary));
    assert!(!Separator::Tilde.kind(SeparatorKind::Assign));
    assert!(Separator::SemiColon.kind(SeparatorKind::Separator));
    assert!(!Separator::SemiColon.kind(SeparatorKind::LogicalOr));
}

#[test]
fn separator_parse() {

    assert_eq!(Separator::parse(['<', '<', '=']), Some((Separator::LtLtEq, 3)));
    assert_eq!(Separator::parse(['>', '>', '=']), Some((Separator::GtGtEq, 3)));
    assert_eq!(Separator::parse(['+', ' ', '1']), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse(['!', '[', '(']), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse(['{', ' ', 'a']), Some((Separator::LBrace, 1)));
    assert_eq!(Separator::parse(['&', '&', ' ']), Some((Separator::AndAnd, 2)));
    assert_eq!(Separator::parse(['Х', '9', ' ']), None);
    assert_eq!(Separator::parse(['(', '/', '/']), Some((Separator::LParen, 1)));
    assert_eq!(Separator::parse(['.', '{', ']']), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse([':', '=', '&']), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse([')', '[', '/']), Some((Separator::RParen, 1)));
    assert_eq!(Separator::parse(['<', ':', '*']), Some((Separator::Lt, 1)));
    assert_eq!(Separator::parse(['}', ':', '>']), Some((Separator::RBrace, 1)));
    assert_eq!(Separator::parse(['-', ';', ')']), Some((Separator::Sub, 1)));
    assert_eq!(Separator::parse(['~', '[', '<']), Some((Separator::Tilde, 1)));
    assert_eq!(Separator::parse(['{', '&', '+']), Some((Separator::LBrace, 1)));
    assert_eq!(Separator::parse(['|', ']', '&']), Some((Separator::Or, 1)));
    assert_eq!(Separator::parse(['~', '(', '^']), Some((Separator::Tilde, 1)));
    assert_eq!(Separator::parse([';', '^', '[']), Some((Separator::SemiColon, 1)));
    assert_eq!(Separator::parse(['^', '=', ';']), Some((Separator::CaretEq, 2)));
    assert_eq!(Separator::parse([',', '*', ';']), Some((Separator::Comma, 1)));
    assert_eq!(Separator::parse(['{', '%', '*']), Some((Separator::LBrace, 1)));
    assert_eq!(Separator::parse([',', ':', '%']), Some((Separator::Comma, 1)));
    assert_eq!(Separator::parse(['%', '=', ']']), Some((Separator::RemEq, 2)));
    assert_eq!(Separator::parse(['~', '%', '%']), Some((Separator::Tilde, 1)));
    assert_eq!(Separator::parse([':', '=', '{']), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse(['-', '[', '^']), Some((Separator::Sub, 1)));
    assert_eq!(Separator::parse(['_', 's', 't']), None);
    assert_eq!(Separator::parse(['4', '0', '6']), None);
    assert_eq!(Separator::parse(['d', 'e', '1']), None);
    assert_eq!(Separator::parse(['\'', ')', ',']), None);
    assert_eq!(Separator::parse(['e', 'f', '(']), None);
    assert_eq!(Separator::parse(['e', '"', ',']), None);
    assert_eq!(Separator::parse(['_', 'h', 'a']), None);
    assert_eq!(Separator::parse(['n', '_', 'e']), None);
    assert_eq!(Separator::parse(['h', '(', 's']), None);
    assert_eq!(Separator::parse(['2', '9', ',']), None);
    assert_eq!(Separator::parse(['(', '2', ')']), Some((Separator::LParen, 1)));
    assert_eq!(Separator::parse(['k', '_', 's']), None);
    assert_eq!(Separator::parse(['_', 'n', 'u']), None);
    assert_eq!(Separator::parse(['e', 'l', ':']), None);
    assert_eq!(Separator::parse(['v', '_', 't']), None);
    assert_eq!(Separator::parse(['5', ')', ',']), None);
    assert_eq!(Separator::parse(['n', '(', '"']), None);
    assert_eq!(Separator::parse(['.', 't', 'r']), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse(['0', '0', '0']), None);
}

#[test]
fn keyword_basic() {

    assert_eq!(Keyword::Module.display(), "module");
    assert_eq!(Keyword::Null.display(), "null");
    assert_eq!(Keyword::Throw.display(), "throw");
    assert_eq!(Keyword::Break.display(), "break");
    assert_eq!(Keyword::Finally.display(), "finally");
    assert!(Keyword::Interface.kind(KeywordKind::Reserved));
    assert!(Keyword::Interface.kind(KeywordKind::Reserved));
    assert!(Keyword::Class.kind(KeywordKind::Normal));
    assert!(!Keyword::Class.kind(KeywordKind::MaybeIdentifier));
    assert!(Keyword::False.kind(KeywordKind::MaybeIdentifier));
    assert!(!Keyword::False.kind(KeywordKind::Normal));
    assert!(Keyword::F64.kind(KeywordKind::Primitive));
    assert!(!Keyword::F64.kind(KeywordKind::MaybeIdentifier));
    assert!(Keyword::U32.kind(KeywordKind::Primitive));
    assert!(Keyword::U32.kind(KeywordKind::Primitive));
}

#[test]
fn keyword_parse() {

    assert_eq!(Keyword::parse("fn"), Some(Keyword::Fn));
    assert_eq!(Keyword::parse("await"), Some(Keyword::Await));
    assert_eq!(Keyword::parse("一个chinese变量"), None);
    assert_eq!(Keyword::parse("a_中文_var"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("oubleColo"), None);
    assert_eq!(Keyword::parse("sel"), None);
    assert_eq!(Keyword::parse("ex"), None);
    assert_eq!(Keyword::parse("binar"), None);
    assert_eq!(Keyword::parse("rm"), None);
    assert_eq!(Keyword::parse("har"), None);
    assert_eq!(Keyword::parse("wne"), None);
    assert_eq!(Keyword::parse("de"), None);
    assert_eq!(Keyword::parse("se"), None);
    assert_eq!(Keyword::parse("IfStat"), None);
    assert_eq!(Keyword::parse("ig"), None);
    assert_eq!(Keyword::parse("have"), None);
    assert_eq!(Keyword::parse("va"), None);
    assert_eq!(Keyword::parse("sser"), None);
    assert_eq!(Keyword::parse("return"), Some(Keyword::Return));
}
