///! --------------------------------------------------------------------------------
///! This code is auto generated by a tool
///! Changes may cause incorrect behavior and will be lost if the code is regenerated
///! --------------------------------------------------------------------------------

use super::*;

#[test]
fn separator_basic() {

    assert_eq!(Separator::Or.display(), "|");
    assert_eq!(Separator::LtEq.display(), "<=");
    assert_eq!(Separator::Gt.display(), ">");
    assert_eq!(Separator::DotDot.display(), "..");
    assert_eq!(Separator::Mul.display(), "*");
    assert!(Separator::AndAnd.kind(SeparatorKind::LogicalAnd));
    assert!(!Separator::AndAnd.kind(SeparatorKind::Assign));
    assert!(Separator::Arrow.kind(SeparatorKind::Separator));
    assert!(!Separator::Arrow.kind(SeparatorKind::LogicalAnd));
    assert!(Separator::Not.kind(SeparatorKind::Unary));
    assert!(!Separator::Not.kind(SeparatorKind::Shift));
    assert!(Separator::Caret.kind(SeparatorKind::BitXor));
    assert!(!Separator::Caret.kind(SeparatorKind::Shift));
    assert!(Separator::RemEq.kind(SeparatorKind::Assign));
    assert!(!Separator::RemEq.kind(SeparatorKind::Additive));
}

#[test]
fn separator_parse() {

    assert_eq!(Separator::parse3('<', '<', '='), Some((Separator::LtLtEq, 3)));
    assert_eq!(Separator::parse3('>', '>', '='), Some((Separator::GtGtEq, 3)));
    assert_eq!(Separator::parse3('+', ' ', '1'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse3('!', '[', '('), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse3('{', ' ', 'a'), Some((Separator::LeftBrace, 1)));
    assert_eq!(Separator::parse3('&', '&', ' '), Some((Separator::AndAnd, 2)));
    assert_eq!(Separator::parse3('Х', '9', ' '), None);
    assert_eq!(Separator::parse3('|', '>', '('), Some((Separator::Or, 1)));
    assert_eq!(Separator::parse3(')', '*', '~'), Some((Separator::RightParen, 1)));
    assert_eq!(Separator::parse3('<', '=', '^'), Some((Separator::LtEq, 2)));
    assert_eq!(Separator::parse3('(', '=', '%'), Some((Separator::LeftParen, 1)));
    assert_eq!(Separator::parse3('}', '.', '^'), Some((Separator::RightBrace, 1)));
    assert_eq!(Separator::parse3(')', '>', '<'), Some((Separator::RightParen, 1)));
    assert_eq!(Separator::parse3('=', '-', ':'), Some((Separator::Eq, 1)));
    assert_eq!(Separator::parse3('/', '=', '>'), Some((Separator::DivEq, 2)));
    assert_eq!(Separator::parse3('*', '[', '.'), Some((Separator::Mul, 1)));
    assert_eq!(Separator::parse3('=', '&', '&'), Some((Separator::Eq, 1)));
    assert_eq!(Separator::parse3(';', '>', '%'), Some((Separator::SemiColon, 1)));
    assert_eq!(Separator::parse3(',', '=', '>'), Some((Separator::Comma, 1)));
    assert_eq!(Separator::parse3('}', '%', ';'), Some((Separator::RightBrace, 1)));
    assert_eq!(Separator::parse3(')', '=', '/'), Some((Separator::RightParen, 1)));
    assert_eq!(Separator::parse3('%', '=', '/'), Some((Separator::RemEq, 2)));
    assert_eq!(Separator::parse3('+', '|', '('), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse3('*', '=', '|'), Some((Separator::MulEq, 2)));
    assert_eq!(Separator::parse3(';', '=', '^'), Some((Separator::SemiColon, 1)));
    assert_eq!(Separator::parse3('=', '.', '*'), Some((Separator::Eq, 1)));
    assert_eq!(Separator::parse3(']', ')', '<'), Some((Separator::RightBracket, 1)));
    assert_eq!(Separator::parse1('y'), None);
    assert_eq!(Separator::parse1('x'), None);
    assert_eq!(Separator::parse1(','), Some(Separator::Comma));
    assert_eq!(Separator::parse1('r'), None);
    assert_eq!(Separator::parse1('e'), None);
    assert_eq!(Separator::parse3('.', 'a', 't'), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse3('s', ':', ':'), None);
    assert_eq!(Separator::parse3('3', '5', '5'), None);
    assert_eq!(Separator::parse3(':', 'n', 'e'), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse1('t'), None);
    assert_eq!(Separator::parse1('I'), None);
    assert_eq!(Separator::parse3('m', '<', '$'), None);
    assert_eq!(Separator::parse1('s'), None);
    assert_eq!(Separator::parse1('e'), None);
    assert_eq!(Separator::parse1('l'), None);
    assert_eq!(Separator::parse3('3', '0', '1'), None);
    assert_eq!(Separator::parse1('c'), None);
    assert_eq!(Separator::parse1('u'), None);
    assert_eq!(Separator::parse3('\'', '^', '\''), None);
    assert_eq!(Separator::parse1('2'), None);
    assert_eq!(Separator::parse1('d'), None);
    assert_eq!(Separator::parse3('&', 's', 'e'), Some((Separator::And, 1)));
    assert_eq!(Separator::parse3('v', 'e', '('), None);
    assert_eq!(Separator::parse1(','), Some(Separator::Comma));
    assert_eq!(Separator::parse3('_', 's', 'e'), None);
    assert_eq!(Separator::parse1('e'), None);
    assert_eq!(Separator::parse3('4', '1', '6'), None);
    assert_eq!(Separator::parse1(':'), Some(Separator::Colon));
    assert_eq!(Separator::parse3('c', 't', '_'), None);
    assert_eq!(Separator::parse1('{'), Some(Separator::LeftBrace));
    assert_eq!(Separator::parse1('u'), None);
    assert_eq!(Separator::parse1('o'), None);
    assert_eq!(Separator::parse1(','), Some(Separator::Comma));
    assert_eq!(Separator::parse3('a', 'n', ':'), None);
    assert_eq!(Separator::parse1('p'), None);
    assert_eq!(Separator::parse1('u'), None);
    assert_eq!(Separator::parse3('i', '3', '2'), None);
    assert_eq!(Separator::parse3('i', 't', '!'), None);
    assert_eq!(Separator::parse3('k', ')', ')'), None);
    assert_eq!(Separator::parse1('a'), None);
    assert_eq!(Separator::parse3('t', '<', 'S'), None);
    assert_eq!(Separator::parse3('9', '0', '4'), None);
    assert_eq!(Separator::parse1('r'), None);
    assert_eq!(Separator::parse3('m', 'e', '('), None);
}

#[test]
fn keyword_basic() {

    assert_eq!(Keyword::Trait.display(), "trait");
    assert_eq!(Keyword::Trait.display(), "trait");
    assert_eq!(Keyword::Or.display(), "or");
    assert_eq!(Keyword::Else.display(), "else");
    assert_eq!(Keyword::Loop.display(), "loop");
    assert!(Keyword::Return.kind(KeywordKind::Normal));
    assert!(!Keyword::Return.kind(KeywordKind::Reserved));
    assert!(Keyword::Match.kind(KeywordKind::Reserved));
    assert!(!Keyword::Match.kind(KeywordKind::Normal));
    assert!(Keyword::As.kind(KeywordKind::Normal));
    assert!(Keyword::As.kind(KeywordKind::Normal));
    assert!(Keyword::I128.kind(KeywordKind::Reserved));
    assert!(!Keyword::I128.kind(KeywordKind::Primitive));
    assert!(Keyword::F128.kind(KeywordKind::Reserved));
    assert!(!Keyword::F128.kind(KeywordKind::Normal));
}

#[test]
fn keyword_parse() {

    assert_eq!(Keyword::parse("fn"), Some(Keyword::Fn));
    assert_eq!(Keyword::parse("await"), Some(Keyword::Await));
    assert_eq!(Keyword::parse("一个chinese变量"), None);
    assert_eq!(Keyword::parse("a_中文_var"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("low"), None);
    assert_eq!(Keyword::parse("or"), Some(Keyword::Or));
    assert_eq!(Keyword::parse("ue"), None);
    assert_eq!(Keyword::parse("pe"), None);
    assert_eq!(Keyword::parse("dDo"), None);
    assert_eq!(Keyword::parse("her"), None);
    assert_eq!(Keyword::parse("era"), None);
    assert_eq!(Keyword::parse("super"), Some(Keyword::Super));
    assert_eq!(Keyword::parse("mut"), Some(Keyword::Mut));
    assert_eq!(Keyword::parse("at"), None);
    assert_eq!(Keyword::parse("rat"), None);
    assert_eq!(Keyword::parse("let"), Some(Keyword::Let));
    assert_eq!(Keyword::parse("type"), Some(Keyword::Type));
    assert_eq!(Keyword::parse("ppContai"), None);
    assert_eq!(Keyword::parse("Xor"), None);
    assert_eq!(Keyword::parse("ess"), None);
    assert_eq!(Keyword::parse("BothExpr"), None);
    assert_eq!(Keyword::parse("tua"), None);
    assert_eq!(Keyword::parse("ConvertS"), None);
    assert_eq!(Keyword::parse("pe"), None);
    assert_eq!(Keyword::parse("Norm"), None);
    assert_eq!(Keyword::parse("nf"), None);
    assert_eq!(Keyword::parse("me"), None);
}
