///! --------------------------------------------------------------------------------
///! This code is auto generated by a tool
///! Changes may cause incorrect behavior and will be lost if the code is regenerated
///! --------------------------------------------------------------------------------

use super::*;

#[test]
fn separator_basic() {

    assert_eq!(Separator::GtEq.display(), ">=");
    assert_eq!(Separator::AddEq.display(), "+=");
    assert_eq!(Separator::Or.display(), "|");
    assert_eq!(Separator::Arrow.display(), "->");
    assert_eq!(Separator::Dot.display(), ".");
    assert!(Separator::MulEq.kind(SeparatorKind::Assign));
    assert!(!Separator::MulEq.kind(SeparatorKind::Shift));
    assert!(Separator::LtLt.kind(SeparatorKind::Shift));
    assert!(!Separator::LtLt.kind(SeparatorKind::Equality));
    assert!(Separator::AndAnd.kind(SeparatorKind::LogicalAnd));
    assert!(!Separator::AndAnd.kind(SeparatorKind::Unary));
    assert!(Separator::Div.kind(SeparatorKind::Multiplicative));
    assert!(!Separator::Div.kind(SeparatorKind::Range));
    assert!(Separator::Eq.kind(SeparatorKind::Assign));
    assert!(!Separator::Eq.kind(SeparatorKind::Separator));
}

#[test]
fn separator_parse() {

    assert_eq!(Separator::parse3('<', '<', '='), Some((Separator::LtLtEq, 3)));
    assert_eq!(Separator::parse3('>', '>', '='), Some((Separator::GtGtEq, 3)));
    assert_eq!(Separator::parse3('+', ' ', '1'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse3('!', '[', '('), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse3('{', ' ', 'a'), Some((Separator::LeftBrace, 1)));
    assert_eq!(Separator::parse3('&', '&', ' '), Some((Separator::AndAnd, 2)));
    assert_eq!(Separator::parse3('Х', '9', ' '), None);
    assert_eq!(Separator::parse3(':', '~', ']'), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse3('^', '+', '*'), Some((Separator::Caret, 1)));
    assert_eq!(Separator::parse3(';', '=', '^'), Some((Separator::SemiColon, 1)));
    assert_eq!(Separator::parse3('+', '=', ';'), Some((Separator::AddEq, 2)));
    assert_eq!(Separator::parse3('-', '=', '*'), Some((Separator::SubEq, 2)));
    assert_eq!(Separator::parse3('>', '(', ']'), Some((Separator::Gt, 1)));
    assert_eq!(Separator::parse3('~', '=', ','), Some((Separator::Tilde, 1)));
    assert_eq!(Separator::parse3('%', '=', '!'), Some((Separator::RemEq, 2)));
    assert_eq!(Separator::parse3('(', ':', ';'), Some((Separator::LeftParen, 1)));
    assert_eq!(Separator::parse3(';', '[', ']'), Some((Separator::SemiColon, 1)));
    assert_eq!(Separator::parse3('&', '~', '*'), Some((Separator::And, 1)));
    assert_eq!(Separator::parse3('*', ',', '('), Some((Separator::Mul, 1)));
    assert_eq!(Separator::parse3('=', '=', '!'), Some((Separator::EqEq, 2)));
    assert_eq!(Separator::parse3('!', '=', '^'), Some((Separator::NotEq, 2)));
    assert_eq!(Separator::parse3('/', '=', '*'), Some((Separator::DivEq, 2)));
    assert_eq!(Separator::parse3('/', '=', '='), Some((Separator::DivEq, 2)));
    assert_eq!(Separator::parse3('/', '-', '.'), Some((Separator::Div, 1)));
    assert_eq!(Separator::parse3('(', '=', '-'), Some((Separator::LeftParen, 1)));
    assert_eq!(Separator::parse3(']', '=', '^'), Some((Separator::RightBracket, 1)));
    assert_eq!(Separator::parse3('!', '[', '}'), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse1('i'), None);
    assert_eq!(Separator::parse1('e'), None);
    assert_eq!(Separator::parse3('t', '!', '('), None);
    assert_eq!(Separator::parse1('e'), None);
    assert_eq!(Separator::parse3('m', 'e', '('), None);
    assert_eq!(Separator::parse1('l'), None);
    assert_eq!(Separator::parse3('c', 'k', '_'), None);
    assert_eq!(Separator::parse3('q', '!', '('), None);
    assert_eq!(Separator::parse1('t'), None);
    assert_eq!(Separator::parse1('v'), None);
    assert_eq!(Separator::parse3('_', 'r', 'a'), None);
    assert_eq!(Separator::parse3('_', 's', 'p'), None);
    assert_eq!(Separator::parse1('x'), None);
    assert_eq!(Separator::parse3(')', ')', ';'), Some((Separator::RightParen, 1)));
    assert_eq!(Separator::parse3('i', 't', '_'), None);
    assert_eq!(Separator::parse3('r', 't', ','), None);
    assert_eq!(Separator::parse1('o'), None);
    assert_eq!(Separator::parse3('e', 'q', '!'), None);
    assert_eq!(Separator::parse1('n'), None);
    assert_eq!(Separator::parse1('"'), None);
    assert_eq!(Separator::parse3('t', '_', 's'), None);
    assert_eq!(Separator::parse1('f'), None);
    assert_eq!(Separator::parse3(':', 'F', 'l'), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse3('t', 'e', ':'), None);
    assert_eq!(Separator::parse1(','), Some(Separator::Comma));
    assert_eq!(Separator::parse3('p', 'r', ')'), None);
    assert_eq!(Separator::parse1('i'), None);
    assert_eq!(Separator::parse3('y', '1', '_'), None);
    assert_eq!(Separator::parse3('(', 'm', 's'), Some((Separator::LeftParen, 1)));
    assert_eq!(Separator::parse3('d', ':', ':'), None);
    assert_eq!(Separator::parse1('i'), None);
    assert_eq!(Separator::parse3('5', '9', '5'), None);
    assert_eq!(Separator::parse1('t'), None);
    assert_eq!(Separator::parse3('4', '4', '8'), None);
    assert_eq!(Separator::parse1(','), Some(Separator::Comma));
    assert_eq!(Separator::parse3('l', 'e', '-'), None);
}

#[test]
fn keyword_basic() {

    assert_eq!(Keyword::Use.display(), "use");
    assert_eq!(Keyword::Yield.display(), "yield");
    assert_eq!(Keyword::F128.display(), "f128");
    assert_eq!(Keyword::Mut.display(), "mut");
    assert_eq!(Keyword::Switch.display(), "switch");
    assert!(Keyword::In.kind(KeywordKind::Normal));
    assert!(!Keyword::In.kind(KeywordKind::Primitive));
    assert!(Keyword::Catch.kind(KeywordKind::Reserved));
    assert!(!Keyword::Catch.kind(KeywordKind::Primitive));
    assert!(Keyword::Finally.kind(KeywordKind::Reserved));
    assert!(!Keyword::Finally.kind(KeywordKind::Primitive));
    assert!(Keyword::I8.kind(KeywordKind::Primitive));
    assert!(!Keyword::I8.kind(KeywordKind::Normal));
    assert!(Keyword::Loop.kind(KeywordKind::Normal));
    assert!(!Keyword::Loop.kind(KeywordKind::MaybeIdentifier));
}

#[test]
fn keyword_parse() {

    assert_eq!(Keyword::parse("fn"), Some(Keyword::Fn));
    assert_eq!(Keyword::parse("await"), Some(Keyword::Await));
    assert_eq!(Keyword::parse("一个chinese变量"), None);
    assert_eq!(Keyword::parse("a_中文_var"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("ep"), None);
    assert_eq!(Keyword::parse("self"), Some(Keyword::Self_));
    assert_eq!(Keyword::parse("timeVa"), None);
    assert_eq!(Keyword::parse("rKi"), None);
    assert_eq!(Keyword::parse("re"), None);
    assert_eq!(Keyword::parse("in"), Some(Keyword::In));
    assert_eq!(Keyword::parse("lit"), None);
    assert_eq!(Keyword::parse("rig"), None);
    assert_eq!(Keyword::parse("ms"), None);
    assert_eq!(Keyword::parse("one"), None);
    assert_eq!(Keyword::parse("string"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("self"), Some(Keyword::Self_));
    assert_eq!(Keyword::parse("pan"), None);
    assert_eq!(Keyword::parse("ss"), None);
    assert_eq!(Keyword::parse("is"), Some(Keyword::Is));
    assert_eq!(Keyword::parse("shoul"), None);
    assert_eq!(Keyword::parse("expr"), None);
    assert_eq!(Keyword::parse("NTHESIS"), None);
}
