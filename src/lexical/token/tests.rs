///! --------------------------------------------------------------------------------
///! This code is auto generated by a tool
///! Changes may cause incorrect behavior and will be lost if the code is regenerated
///! --------------------------------------------------------------------------------

use super::*;

#[test]
fn separator_basic() {

    assert_eq!(Separator::OrEq.display(), "|=");
    assert_eq!(Separator::AddEq.display(), "+=");
    assert_eq!(Separator::AndAnd.display(), "&&");
    assert_eq!(Separator::Gt.display(), ">");
    assert_eq!(Separator::Mul.display(), "*");
    assert!(Separator::Mul.kind(SeparatorKind::Multiplicative));
    assert!(!Separator::Mul.kind(SeparatorKind::Unary));
    assert!(Separator::RightParen.kind(SeparatorKind::Separator));
    assert!(!Separator::RightParen.kind(SeparatorKind::BitXor));
    assert!(Separator::Lt.kind(SeparatorKind::Relational));
    assert!(!Separator::Lt.kind(SeparatorKind::Unary));
    assert!(Separator::RemEq.kind(SeparatorKind::Assign));
    assert!(!Separator::RemEq.kind(SeparatorKind::BitOr));
    assert!(Separator::AndEq.kind(SeparatorKind::Assign));
    assert!(!Separator::AndEq.kind(SeparatorKind::Separator));
}

#[test]
fn separator_parse() {

    assert_eq!(Separator::parse('<', '<', '='), Some((Separator::LtLtEq, 3)));
    assert_eq!(Separator::parse('>', '>', '='), Some((Separator::GtGtEq, 3)));
    assert_eq!(Separator::parse('+', ' ', '1'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse('!', '[', '('), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse('{', ' ', 'a'), Some((Separator::LeftBrace, 1)));
    assert_eq!(Separator::parse('&', '&', ' '), Some((Separator::AndAnd, 2)));
    assert_eq!(Separator::parse('Х', '9', ' '), None);
    assert_eq!(Separator::parse('*', '=', '+'), Some((Separator::MulEq, 2)));
    assert_eq!(Separator::parse('^', ',', '*'), Some((Separator::Caret, 1)));
    assert_eq!(Separator::parse('%', '.', ']'), Some((Separator::Rem, 1)));
    assert_eq!(Separator::parse('*', '=', ')'), Some((Separator::MulEq, 2)));
    assert_eq!(Separator::parse('>', '=', '*'), Some((Separator::GtEq, 2)));
    assert_eq!(Separator::parse('/', '>', '~'), Some((Separator::Div, 1)));
    assert_eq!(Separator::parse('&', '+', '!'), Some((Separator::And, 1)));
    assert_eq!(Separator::parse(')', '=', '|'), Some((Separator::RightParen, 1)));
    assert_eq!(Separator::parse('.', '=', ','), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse(':', '=', ':'), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse('.', '&', ','), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse('^', '=', '>'), Some((Separator::CaretEq, 2)));
    assert_eq!(Separator::parse('}', '[', '/'), Some((Separator::RightBrace, 1)));
    assert_eq!(Separator::parse('[', '=', ']'), Some((Separator::LeftBracket, 1)));
    assert_eq!(Separator::parse('&', '=', '-'), Some((Separator::AndEq, 2)));
    assert_eq!(Separator::parse('/', '=', '/'), Some((Separator::DivEq, 2)));
    assert_eq!(Separator::parse('<', '=', '('), Some((Separator::LtEq, 2)));
    assert_eq!(Separator::parse('&', '|', '|'), Some((Separator::And, 1)));
    assert_eq!(Separator::parse('[', '=', '*'), Some((Separator::LeftBracket, 1)));
    assert_eq!(Separator::parse('[', '~', ','), Some((Separator::LeftBracket, 1)));
    assert_eq!(Separator::parse('u', 'e', ')'), None);
    assert_eq!(Separator::parse('_', 'p', 'o'), None);
    assert_eq!(Separator::parse('_', 'd', 'e'), None);
    assert_eq!(Separator::parse(':', ':', 'n'), Some((Separator::ColonColon, 2)));
    assert_eq!(Separator::parse('1', ')', ','), None);
    assert_eq!(Separator::parse('.', '0', ','), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse(';', '1', ']'), Some((Separator::SemiColon, 1)));
    assert_eq!(Separator::parse('D', ':', ':'), None);
    assert_eq!(Separator::parse('r', 't', '_'), None);
    assert_eq!(Separator::parse('e', '_', 'e'), None);
    assert_eq!(Separator::parse('3', '1', '3'), None);
    assert_eq!(Separator::parse('e', '_', 'e'), None);
    assert_eq!(Separator::parse(':', ':', '{'), Some((Separator::ColonColon, 2)));
    assert_eq!(Separator::parse('k', 'e', '_'), None);
    assert_eq!(Separator::parse('x', '2', '0'), None);
    assert_eq!(Separator::parse('_', 'o', 'f'), None);
    assert_eq!(Separator::parse('\\', '"', '"'), None);
    assert_eq!(Separator::parse('_', 'e', 'q'), None);
    assert_eq!(Separator::parse(':', ':', 'E'), Some((Separator::ColonColon, 2)));
    assert_eq!(Separator::parse(':', 'd', 'e'), Some((Separator::Colon, 1)));
}

#[test]
fn keyword_basic() {

    assert_eq!(Keyword::U16.display(), "u16");
    assert_eq!(Keyword::F128.display(), "f128");
    assert_eq!(Keyword::U16.display(), "u16");
    assert_eq!(Keyword::Unsafe.display(), "unsafe");
    assert_eq!(Keyword::Bits8.display(), "bits8");
    assert!(Keyword::This.kind(KeywordKind::MaybeIdentifier));
    assert!(Keyword::This.kind(KeywordKind::MaybeIdentifier));
    assert!(Keyword::U128.kind(KeywordKind::Reserved));
    assert!(!Keyword::U128.kind(KeywordKind::Primitive));
    assert!(Keyword::Or.kind(KeywordKind::Reserved));
    assert!(Keyword::Or.kind(KeywordKind::Reserved));
    assert!(Keyword::Override.kind(KeywordKind::Reserved));
    assert!(Keyword::Override.kind(KeywordKind::Reserved));
    assert!(Keyword::While.kind(KeywordKind::Normal));
    assert!(Keyword::While.kind(KeywordKind::Normal));
}

#[test]
fn keyword_parse() {

    assert_eq!(Keyword::parse("fn"), Some(Keyword::Fn));
    assert_eq!(Keyword::parse("await"), Some(Keyword::Await));
    assert_eq!(Keyword::parse("一个chinese变量"), None);
    assert_eq!(Keyword::parse("a_中文_var"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("self"), Some(Keyword::Self_));
    assert_eq!(Keyword::parse("fn"), Some(Keyword::Fn));
    assert_eq!(Keyword::parse("ar"), None);
    assert_eq!(Keyword::parse("if"), Some(Keyword::If));
    assert_eq!(Keyword::parse("yword"), None);
    assert_eq!(Keyword::parse("pa"), None);
    assert_eq!(Keyword::parse("ak"), None);
    assert_eq!(Keyword::parse("bo"), None);
    assert_eq!(Keyword::parse("case"), None);
    assert_eq!(Keyword::parse("in"), Some(Keyword::In));
    assert_eq!(Keyword::parse("heade"), None);
    assert_eq!(Keyword::parse("als"), None);
    assert_eq!(Keyword::parse("com"), None);
    assert_eq!(Keyword::parse("ase"), None);
    assert_eq!(Keyword::parse("in"), Some(Keyword::In));
    assert_eq!(Keyword::parse("cution"), None);
    assert_eq!(Keyword::parse("odule"), None);
    assert_eq!(Keyword::parse("um"), None);
    assert_eq!(Keyword::parse("rd"), None);
    assert_eq!(Keyword::parse("eAtExp"), None);
    assert_eq!(Keyword::parse("known"), None);
    assert_eq!(Keyword::parse("tab"), None);
    assert_eq!(Keyword::parse("cAnalyze"), None);
    assert_eq!(Keyword::parse("va"), None);
    assert_eq!(Keyword::parse("usabl"), None);
    assert_eq!(Keyword::parse("ssage"), None);
}
