///! --------------------------------------------------------------------------------
///! This code is auto generated by a tool
///! Changes may cause incorrect behavior and will be lost if the code is regenerated
///! --------------------------------------------------------------------------------

use super::*;

#[test]
fn separator_basic() {

    assert_eq!(Separator::Add.display(), "+");
    assert_eq!(Separator::Rem.display(), "%");
    assert_eq!(Separator::LtEq.display(), "<=");
    assert_eq!(Separator::DotDot.display(), "..");
    assert_eq!(Separator::SubEq.display(), "-=");
    assert!(Separator::Div.kind(SeparatorKind::Multiplicative));
    assert!(!Separator::Div.kind(SeparatorKind::Relational));
    assert!(Separator::Div.kind(SeparatorKind::Multiplicative));
    assert!(!Separator::Div.kind(SeparatorKind::LogicalOr));
    assert!(Separator::Dot.kind(SeparatorKind::Separator));
    assert!(!Separator::Dot.kind(SeparatorKind::LogicalOr));
    assert!(Separator::LBracket.kind(SeparatorKind::Separator));
    assert!(!Separator::LBracket.kind(SeparatorKind::Additive));
    assert!(Separator::LParen.kind(SeparatorKind::Separator));
    assert!(!Separator::LParen.kind(SeparatorKind::Multiplicative));
}

#[test]
fn separator_parse() {

    assert_eq!(Separator::parse('<', '<', '='), Some((Separator::LtLtEq, 3)));
    assert_eq!(Separator::parse('>', '>', '='), Some((Separator::GtGtEq, 3)));
    assert_eq!(Separator::parse('+', ' ', '1'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse('!', '[', '('), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse('{', ' ', 'a'), Some((Separator::LBrace, 1)));
    assert_eq!(Separator::parse('&', '&', ' '), Some((Separator::AndAnd, 2)));
    assert_eq!(Separator::parse('Х', '9', ' '), None);
    assert_eq!(Separator::parse('.', '=', ';'), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse('}', '[', '-'), Some((Separator::RBrace, 1)));
    assert_eq!(Separator::parse('&', '%', ':'), Some((Separator::And, 1)));
    assert_eq!(Separator::parse('<', '|', ':'), Some((Separator::Lt, 1)));
    assert_eq!(Separator::parse('>', ')', '}'), Some((Separator::Gt, 1)));
    assert_eq!(Separator::parse('-', '}', '%'), Some((Separator::Sub, 1)));
    assert_eq!(Separator::parse('(', '=', '%'), Some((Separator::LParen, 1)));
    assert_eq!(Separator::parse('%', '=', '|'), Some((Separator::RemEq, 2)));
    assert_eq!(Separator::parse(',', '!', '='), Some((Separator::Comma, 1)));
    assert_eq!(Separator::parse('.', '.', '/'), Some((Separator::DotDot, 2)));
    assert_eq!(Separator::parse('+', ']', '~'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse('{', '|', '('), Some((Separator::LBrace, 1)));
    assert_eq!(Separator::parse('}', '=', '='), Some((Separator::RBrace, 1)));
    assert_eq!(Separator::parse('<', '=', '^'), Some((Separator::LtEq, 2)));
    assert_eq!(Separator::parse('%', '=', '&'), Some((Separator::RemEq, 2)));
    assert_eq!(Separator::parse('|', '=', '}'), Some((Separator::OrEq, 2)));
    assert_eq!(Separator::parse('%', '*', '<'), Some((Separator::Rem, 1)));
    assert_eq!(Separator::parse('(', '=', ','), Some((Separator::LParen, 1)));
    assert_eq!(Separator::parse('+', '=', '['), Some((Separator::AddEq, 2)));
    assert_eq!(Separator::parse('~', '-', '>'), Some((Separator::Tilde, 1)));
    assert_eq!(Separator::parse('p', 'r', '|'), None);
    assert_eq!(Separator::parse(',', '\\', 'n'), Some((Separator::Comma, 1)));
    assert_eq!(Separator::parse('6', '7', '8'), None);
    assert_eq!(Separator::parse('"', 'c', 'o'), None);
    assert_eq!(Separator::parse('t', 'e', ':'), None);
    assert_eq!(Separator::parse('(', 's', 't'), Some((Separator::LParen, 1)));
    assert_eq!(Separator::parse(':', 'O', 'v'), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse(':', ':', '<'), Some((Separator::ColonColon, 2)));
    assert_eq!(Separator::parse('4', ':', '5'), None);
    assert_eq!(Separator::parse('h', '(', ')'), None);
    assert_eq!(Separator::parse('u', '6', '4'), None);
    assert_eq!(Separator::parse('i', 'd', '('), None);
    assert_eq!(Separator::parse('s', 'e', '('), None);
    assert_eq!(Separator::parse('l', 'f', '.'), None);
    assert_eq!(Separator::parse('&', '\'', 'a'), Some((Separator::And, 1)));
    assert_eq!(Separator::parse('h', 's', '.'), None);
    assert_eq!(Separator::parse('_', 'd', 'e'), None);
    assert_eq!(Separator::parse('(', 'l', 'h'), Some((Separator::LParen, 1)));
    assert_eq!(Separator::parse('3', '7', '5'), None);
    assert_eq!(Separator::parse('"', ')', ';'), None);
    assert_eq!(Separator::parse('&', 's', 'e'), Some((Separator::And, 1)));
    assert_eq!(Separator::parse('a', 'm', '1'), None);
    assert_eq!(Separator::parse('t', 'e', '_'), None);
    assert_eq!(Separator::parse('(', 'S', 'p'), Some((Separator::LParen, 1)));
    assert_eq!(Separator::parse('e', 'r', '<'), None);
    assert_eq!(Separator::parse('(', '&', 'm'), Some((Separator::LParen, 1)));
    assert_eq!(Separator::parse('_', 'p', 'o'), None);
}

#[test]
fn keyword_basic() {

    assert_eq!(Keyword::Struct.display(), "struct");
    assert_eq!(Keyword::Impl.display(), "impl");
    assert_eq!(Keyword::Enum.display(), "enum");
    assert_eq!(Keyword::Self_.display(), "self");
    assert_eq!(Keyword::TypeDef.display(), "typedef");
    assert!(Keyword::Else.kind(KeywordKind::Normal));
    assert!(!Keyword::Else.kind(KeywordKind::Reserved));
    assert!(Keyword::TypeDef.kind(KeywordKind::Reserved));
    assert!(!Keyword::TypeDef.kind(KeywordKind::Normal));
    assert!(Keyword::Private.kind(KeywordKind::Reserved));
    assert!(!Keyword::Private.kind(KeywordKind::MaybeIdentifier));
    assert!(Keyword::Let.kind(KeywordKind::Reserved));
    assert!(Keyword::Let.kind(KeywordKind::Reserved));
    assert!(Keyword::Underscore.kind(KeywordKind::MaybeIdentifier));
    assert!(!Keyword::Underscore.kind(KeywordKind::Reserved));
}

#[test]
fn keyword_parse() {

    assert_eq!(Keyword::parse("fn"), Some(Keyword::Fn));
    assert_eq!(Keyword::parse("await"), Some(Keyword::Await));
    assert_eq!(Keyword::parse("一个chinese变量"), None);
    assert_eq!(Keyword::parse("a_中文_var"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("nExp"), None);
    assert_eq!(Keyword::parse("sk"), None);
    assert_eq!(Keyword::parse("bool"), Some(Keyword::Bool));
    assert_eq!(Keyword::parse("LitValu"), None);
    assert_eq!(Keyword::parse("at"), None);
    assert_eq!(Keyword::parse("re"), None);
    assert_eq!(Keyword::parse("torKind"), None);
    assert_eq!(Keyword::parse("self"), Some(Keyword::Self_));
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("dul"), None);
    assert_eq!(Keyword::parse("ic"), None);
    assert_eq!(Keyword::parse("cod"), None);
    assert_eq!(Keyword::parse("Simp"), None);
}
