///! --------------------------------------------------------------------------------
///! This code is auto generated by a tool
///! Changes may cause incorrect behavior and will be lost if the code is regenerated
///! --------------------------------------------------------------------------------

use super::*;

#[test]
fn separator_basic() {

    assert_eq!(Separator::RightBracket.display(), "]");
    assert_eq!(Separator::Gt.display(), ">");
    assert_eq!(Separator::RemEq.display(), "%=");
    assert_eq!(Separator::MulEq.display(), "*=");
    assert_eq!(Separator::Sub.display(), "-");
    assert!(Separator::Sub.kind(SeparatorKind::Additive));
    assert!(!Separator::Sub.kind(SeparatorKind::Shift));
    assert!(Separator::Div.kind(SeparatorKind::Multiplicative));
    assert!(!Separator::Div.kind(SeparatorKind::Assign));
    assert!(Separator::DotDot.kind(SeparatorKind::Range));
    assert!(!Separator::DotDot.kind(SeparatorKind::Assign));
    assert!(Separator::Not.kind(SeparatorKind::Unary));
    assert!(!Separator::Not.kind(SeparatorKind::BitAnd));
    assert!(Separator::Eq.kind(SeparatorKind::Assign));
    assert!(!Separator::Eq.kind(SeparatorKind::BitAnd));
}

#[test]
fn separator_parse() {

    assert_eq!(Separator::parse3('<', '<', '='), Some((Separator::LtLtEq, 3)));
    assert_eq!(Separator::parse3('>', '>', '='), Some((Separator::GtGtEq, 3)));
    assert_eq!(Separator::parse3('+', ' ', '1'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse3('!', '[', '('), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse3('{', ' ', 'a'), Some((Separator::LeftBrace, 1)));
    assert_eq!(Separator::parse3('&', '&', ' '), Some((Separator::AndAnd, 2)));
    assert_eq!(Separator::parse3('Х', '9', ' '), None);
    assert_eq!(Separator::parse3('~', '{', ']'), Some((Separator::Tilde, 1)));
    assert_eq!(Separator::parse3('^', ']', '+'), Some((Separator::Caret, 1)));
    assert_eq!(Separator::parse3(';', '=', '!'), Some((Separator::SemiColon, 1)));
    assert_eq!(Separator::parse3(']', '=', '%'), Some((Separator::RightBracket, 1)));
    assert_eq!(Separator::parse3('(', '=', '~'), Some((Separator::LeftParen, 1)));
    assert_eq!(Separator::parse3('*', '=', ')'), Some((Separator::MulEq, 2)));
    assert_eq!(Separator::parse3('}', '=', '^'), Some((Separator::RightBrace, 1)));
    assert_eq!(Separator::parse3('}', '&', '|'), Some((Separator::RightBrace, 1)));
    assert_eq!(Separator::parse3('|', '=', ']'), Some((Separator::OrEq, 2)));
    assert_eq!(Separator::parse3('*', '=', ']'), Some((Separator::MulEq, 2)));
    assert_eq!(Separator::parse3(']', '=', ','), Some((Separator::RightBracket, 1)));
    assert_eq!(Separator::parse3(',', '=', '/'), Some((Separator::Comma, 1)));
    assert_eq!(Separator::parse3('&', '!', ']'), Some((Separator::And, 1)));
    assert_eq!(Separator::parse3('/', '}', '>'), Some((Separator::Div, 1)));
    assert_eq!(Separator::parse3('.', '=', '>'), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse3('|', '=', '*'), Some((Separator::OrEq, 2)));
    assert_eq!(Separator::parse3('<', '}', ';'), Some((Separator::Lt, 1)));
    assert_eq!(Separator::parse3('}', '|', '['), Some((Separator::RightBrace, 1)));
    assert_eq!(Separator::parse3('-', '=', '['), Some((Separator::SubEq, 2)));
    assert_eq!(Separator::parse3('>', '=', '+'), Some((Separator::GtEq, 2)));
    assert_eq!(Separator::parse3('r', ':', ':'), None);
    assert_eq!(Separator::parse1('r'), None);
    assert_eq!(Separator::parse1('b'), None);
    assert_eq!(Separator::parse3('!', '(', ')'), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse3('2', ')', ')'), None);
    assert_eq!(Separator::parse1('/'), Some(Separator::Div));
    assert_eq!(Separator::parse1('f'), None);
    assert_eq!(Separator::parse1('r'), None);
    assert_eq!(Separator::parse1(':'), Some(Separator::Colon));
    assert_eq!(Separator::parse1('}'), Some(Separator::RightBrace));
    assert_eq!(Separator::parse3(':', 'I', 'm'), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse3('k', 'e', '_'), None);
    assert_eq!(Separator::parse1('f'), None);
    assert_eq!(Separator::parse3('q', '!', '('), None);
    assert_eq!(Separator::parse1('t'), None);
    assert_eq!(Separator::parse1(':'), Some(Separator::Colon));
    assert_eq!(Separator::parse1('p'), None);
    assert_eq!(Separator::parse3('r', 'r', ','), None);
    assert_eq!(Separator::parse1('r'), None);
    assert_eq!(Separator::parse1('a'), None);
    assert_eq!(Separator::parse1('a'), None);
    assert_eq!(Separator::parse3('r', 'y', '('), None);
    assert_eq!(Separator::parse1('i'), None);
    assert_eq!(Separator::parse1('r'), None);
    assert_eq!(Separator::parse3('b', 'p', ','), None);
    assert_eq!(Separator::parse1('a'), None);
    assert_eq!(Separator::parse1('e'), None);
    assert_eq!(Separator::parse1('r'), None);
    assert_eq!(Separator::parse3(')', ')', ','), Some((Separator::RightParen, 1)));
    assert_eq!(Separator::parse3('n', 't', '_'), None);
    assert_eq!(Separator::parse1('S'), None);
    assert_eq!(Separator::parse1('V'), None);
    assert_eq!(Separator::parse1('t'), None);
    assert_eq!(Separator::parse1(','), Some(Separator::Comma));
    assert_eq!(Separator::parse1(','), Some(Separator::Comma));
    assert_eq!(Separator::parse3('l', '<', '\''), None);
    assert_eq!(Separator::parse3('c', '!', '['), None);
    assert_eq!(Separator::parse1(')'), Some(Separator::RightParen));
    assert_eq!(Separator::parse3('.', 'e', 'n'), Some((Separator::Dot, 1)));
}

#[test]
fn keyword_basic() {

    assert_eq!(Keyword::True.display(), "true");
    assert_eq!(Keyword::Match.display(), "match");
    assert_eq!(Keyword::I32.display(), "i32");
    assert_eq!(Keyword::U128.display(), "u128");
    assert_eq!(Keyword::F32.display(), "f32");
    assert!(Keyword::TypeDef.kind(KeywordKind::Reserved));
    assert!(Keyword::TypeDef.kind(KeywordKind::Reserved));
    assert!(Keyword::Or.kind(KeywordKind::Reserved));
    assert!(!Keyword::Or.kind(KeywordKind::Normal));
    assert!(Keyword::And.kind(KeywordKind::Reserved));
    assert!(!Keyword::And.kind(KeywordKind::Normal));
    assert!(Keyword::Bits64.kind(KeywordKind::Reserved));
    assert!(!Keyword::Bits64.kind(KeywordKind::Primitive));
    assert!(Keyword::Fn.kind(KeywordKind::Normal));
    assert!(!Keyword::Fn.kind(KeywordKind::Primitive));
}

#[test]
fn keyword_parse() {

    assert_eq!(Keyword::parse("fn"), Some(Keyword::Fn));
    assert_eq!(Keyword::parse("await"), Some(Keyword::Await));
    assert_eq!(Keyword::parse("一个chinese变量"), None);
    assert_eq!(Keyword::parse("a_中文_var"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("self"), Some(Keyword::Self_));
    assert_eq!(Keyword::parse("ver"), None);
    assert_eq!(Keyword::parse("impl"), Some(Keyword::Impl));
    assert_eq!(Keyword::parse("eCharPars"), None);
    assert_eq!(Keyword::parse("Afte"), None);
    assert_eq!(Keyword::parse("ec"), None);
    assert_eq!(Keyword::parse("ionO"), None);
    assert_eq!(Keyword::parse("nde"), None);
    assert_eq!(Keyword::parse("for"), Some(Keyword::For));
    assert_eq!(Keyword::parse("pub"), Some(Keyword::Pub));
    assert_eq!(Keyword::parse("pera"), None);
    assert_eq!(Keyword::parse("tat"), None);
    assert_eq!(Keyword::parse("tr"), None);
    assert_eq!(Keyword::parse("Kind"), None);
    assert_eq!(Keyword::parse("in"), Some(Keyword::In));
    assert_eq!(Keyword::parse("itValu"), None);
    assert_eq!(Keyword::parse("Wit"), None);
    assert_eq!(Keyword::parse("coreArrou"), None);
    assert_eq!(Keyword::parse("ent"), None);
    assert_eq!(Keyword::parse("le"), None);
    assert_eq!(Keyword::parse("ecte"), None);
    assert_eq!(Keyword::parse("tValue"), None);
    assert_eq!(Keyword::parse("epara"), None);
}
