///! --------------------------------------------------------------------------------
///! This code is auto generated by a tool
///! Changes may cause incorrect behavior and will be lost if the code is regenerated
///! --------------------------------------------------------------------------------

use super::*;

#[test]
fn separator_basic() {

    assert_eq!(Separator::And.display(), "&");
    assert_eq!(Separator::Sub.display(), "-");
    assert_eq!(Separator::LtLt.display(), "<<");
    assert_eq!(Separator::Dot.display(), ".");
    assert_eq!(Separator::GtGtEq.display(), ">>=");
    assert!(Separator::LBracket.kind(SeparatorKind::Separator));
    assert!(!Separator::LBracket.kind(SeparatorKind::Equality));
    assert!(Separator::DivEq.kind(SeparatorKind::Assign));
    assert!(!Separator::DivEq.kind(SeparatorKind::LogicalAnd));
    assert!(Separator::Tilde.kind(SeparatorKind::Unary));
    assert!(!Separator::Tilde.kind(SeparatorKind::LogicalOr));
    assert!(Separator::And.kind(SeparatorKind::Unary));
    assert!(!Separator::And.kind(SeparatorKind::Separator));
    assert!(Separator::Add.kind(SeparatorKind::Additive));
    assert!(!Separator::Add.kind(SeparatorKind::LogicalOr));
}

#[test]
fn separator_parse() {

    assert_eq!(Separator::parse('<', '<', '='), Some((Separator::LtLtEq, 3)));
    assert_eq!(Separator::parse('>', '>', '='), Some((Separator::GtGtEq, 3)));
    assert_eq!(Separator::parse('+', ' ', '1'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse('!', '[', '('), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse('{', ' ', 'a'), Some((Separator::LBrace, 1)));
    assert_eq!(Separator::parse('&', '&', ' '), Some((Separator::AndAnd, 2)));
    assert_eq!(Separator::parse('Х', '9', ' '), None);
    assert_eq!(Separator::parse('<', '(', '^'), Some((Separator::Lt, 1)));
    assert_eq!(Separator::parse('+', '*', '{'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse('|', '=', '&'), Some((Separator::OrEq, 2)));
    assert_eq!(Separator::parse('~', '=', ']'), Some((Separator::Tilde, 1)));
    assert_eq!(Separator::parse('>', ',', '*'), Some((Separator::Gt, 1)));
    assert_eq!(Separator::parse('~', '&', '|'), Some((Separator::Tilde, 1)));
    assert_eq!(Separator::parse('/', '=', ';'), Some((Separator::DivEq, 2)));
    assert_eq!(Separator::parse('<', ')', '*'), Some((Separator::Lt, 1)));
    assert_eq!(Separator::parse('+', '<', '~'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse('[', '=', '<'), Some((Separator::LBracket, 1)));
    assert_eq!(Separator::parse('/', '=', '&'), Some((Separator::DivEq, 2)));
    assert_eq!(Separator::parse('^', '=', '&'), Some((Separator::CaretEq, 2)));
    assert_eq!(Separator::parse(',', '%', '<'), Some((Separator::Comma, 1)));
    assert_eq!(Separator::parse('<', '{', '='), Some((Separator::Lt, 1)));
    assert_eq!(Separator::parse('&', '=', ')'), Some((Separator::AndEq, 2)));
    assert_eq!(Separator::parse(']', '~', '('), Some((Separator::RBracket, 1)));
    assert_eq!(Separator::parse(':', ';', ','), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse('!', '>', ';'), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse('=', '~', '&'), Some((Separator::Eq, 1)));
    assert_eq!(Separator::parse('^', '=', '%'), Some((Separator::CaretEq, 2)));
    assert_eq!(Separator::parse('t', '(', 'S'), None);
    assert_eq!(Separator::parse('(', ')', ')'), Some((Separator::LParen, 1)));
    assert_eq!(Separator::parse('3', '5', '5'), None);
    assert_eq!(Separator::parse(':', 'L', 'B'), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse('s', 'e', ';'), None);
    assert_eq!(Separator::parse('n', 'a', ')'), None);
    assert_eq!(Separator::parse('(', '\'', '¦'), Some((Separator::LParen, 1)));
    assert_eq!(Separator::parse('a', 't', '!'), None);
    assert_eq!(Separator::parse('_', 't', 'y'), None);
    assert_eq!(Separator::parse('o', 'r', ':'), None);
    assert_eq!(Separator::parse('.', 'i', 'n'), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse('n', 'g', '_'), None);
    assert_eq!(Separator::parse('\'', 'a', ','), None);
    assert_eq!(Separator::parse(')', ')', ')'), Some((Separator::RParen, 1)));
    assert_eq!(Separator::parse('e', 'f', ':'), None);
    assert_eq!(Separator::parse('f', '(', 'h'), None);
    assert_eq!(Separator::parse('*', '\'', ','), Some((Separator::Mul, 1)));
    assert_eq!(Separator::parse('h', 's', '.'), None);
    assert_eq!(Separator::parse('a', ')', ','), None);
    assert_eq!(Separator::parse('8', '9', '0'), None);
    assert_eq!(Separator::parse('9', '5', '5'), None);
    assert_eq!(Separator::parse('p', 'e', ')'), None);
    assert_eq!(Separator::parse('(', ')', ')'), Some((Separator::LParen, 1)));
    assert_eq!(Separator::parse('l', 'e', '.'), None);
    assert_eq!(Separator::parse('n', '<', 'T'), None);
    assert_eq!(Separator::parse('r', 'c', '/'), None);
    assert_eq!(Separator::parse('e', 'r', ')'), None);
    assert_eq!(Separator::parse('s', '.', 'v'), None);
    assert_eq!(Separator::parse('e', '!', '('), None);
    assert_eq!(Separator::parse('3', '4', '5'), None);
    assert_eq!(Separator::parse('c', 'e', '_'), None);
    assert_eq!(Separator::parse('e', '(', '9'), None);
}

#[test]
fn keyword_basic() {

    assert_eq!(Keyword::Await.display(), "await");
    assert_eq!(Keyword::I128.display(), "i128");
    assert_eq!(Keyword::Trait.display(), "trait");
    assert_eq!(Keyword::True.display(), "true");
    assert_eq!(Keyword::Where.display(), "where");
    assert!(Keyword::U32.kind(KeywordKind::Primitive));
    assert!(!Keyword::U32.kind(KeywordKind::Normal));
    assert!(Keyword::Volatile.kind(KeywordKind::Reserved));
    assert!(!Keyword::Volatile.kind(KeywordKind::MaybeIdentifier));
    assert!(Keyword::I32.kind(KeywordKind::Primitive));
    assert!(Keyword::I32.kind(KeywordKind::Primitive));
    assert!(Keyword::As.kind(KeywordKind::Normal));
    assert!(Keyword::As.kind(KeywordKind::Normal));
    assert!(Keyword::Else.kind(KeywordKind::Normal));
    assert!(!Keyword::Else.kind(KeywordKind::Reserved));
}

#[test]
fn keyword_parse() {

    assert_eq!(Keyword::parse("fn"), Some(Keyword::Fn));
    assert_eq!(Keyword::parse("await"), Some(Keyword::Await));
    assert_eq!(Keyword::parse("一个chinese变量"), None);
    assert_eq!(Keyword::parse("a_中文_var"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("ial"), None);
    assert_eq!(Keyword::parse("fi"), None);
    assert_eq!(Keyword::parse("perat"), None);
    assert_eq!(Keyword::parse("else"), Some(Keyword::Else));
    assert_eq!(Keyword::parse("ty"), None);
    assert_eq!(Keyword::parse("in"), Some(Keyword::In));
    assert_eq!(Keyword::parse("ara"), None);
    assert_eq!(Keyword::parse("lidTuple"), None);
    assert_eq!(Keyword::parse("hardcode"), None);
    assert_eq!(Keyword::parse("tio"), None);
    assert_eq!(Keyword::parse("synta"), None);
    assert_eq!(Keyword::parse("if"), Some(Keyword::If));
    assert_eq!(Keyword::parse("pt"), None);
    assert_eq!(Keyword::parse("diagn"), None);
    assert_eq!(Keyword::parse("is"), Some(Keyword::Is));
    assert_eq!(Keyword::parse("pu"), None);
    assert_eq!(Keyword::parse("al"), None);
    assert_eq!(Keyword::parse("ba"), None);
    assert_eq!(Keyword::parse("uni"), None);
    assert_eq!(Keyword::parse("new"), None);
    assert_eq!(Keyword::parse("rom"), None);
    assert_eq!(Keyword::parse("geCollect"), None);
    assert_eq!(Keyword::parse("Ind"), None);
}
