///! --------------------------------------------------------------------------------
///! This code is auto generated by a tool
///! Changes may cause incorrect behavior and will be lost if the code is regenerated
///! --------------------------------------------------------------------------------

use super::*;

#[test]
fn separator_basic() {

    assert_eq!(Separator::And.display(), "&");
    assert_eq!(Separator::GtGtEq.display(), ">>=");
    assert_eq!(Separator::LeftBrace.display(), "{");
    assert_eq!(Separator::LtEq.display(), "<=");
    assert_eq!(Separator::DivEq.display(), "/=");
    assert!(Separator::Arrow.kind(SeparatorKind::Separator));
    assert!(Separator::Arrow.kind(SeparatorKind::Separator));
    assert!(Separator::Div.kind(SeparatorKind::Multiplicative));
    assert!(!Separator::Div.kind(SeparatorKind::Additive));
    assert!(Separator::Rem.kind(SeparatorKind::Multiplicative));
    assert!(Separator::Rem.kind(SeparatorKind::Multiplicative));
    assert!(Separator::GtGt.kind(SeparatorKind::Shift));
    assert!(!Separator::GtGt.kind(SeparatorKind::Relational));
    assert!(Separator::LtLt.kind(SeparatorKind::Shift));
    assert!(!Separator::LtLt.kind(SeparatorKind::BitOr));
}

#[test]
fn separator_parse() {

    assert_eq!(Separator::parse('<', '<', '='), Some((Separator::LtLtEq, 3)));
    assert_eq!(Separator::parse('>', '>', '='), Some((Separator::GtGtEq, 3)));
    assert_eq!(Separator::parse('+', ' ', '1'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse('!', '[', '('), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse('{', ' ', 'a'), Some((Separator::LeftBrace, 1)));
    assert_eq!(Separator::parse('&', '&', ' '), Some((Separator::AndAnd, 2)));
    assert_eq!(Separator::parse('Х', '9', ' '), None);
    assert_eq!(Separator::parse('%', '=', '|'), Some((Separator::RemEq, 2)));
    assert_eq!(Separator::parse('{', '=', '!'), Some((Separator::LeftBrace, 1)));
    assert_eq!(Separator::parse(']', '(', '>'), Some((Separator::RightBracket, 1)));
    assert_eq!(Separator::parse('^', '&', '<'), Some((Separator::Caret, 1)));
    assert_eq!(Separator::parse('(', '>', '='), Some((Separator::LeftParen, 1)));
    assert_eq!(Separator::parse('.', '=', '-'), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse('~', '|', '-'), Some((Separator::Tilde, 1)));
    assert_eq!(Separator::parse('/', '^', ';'), Some((Separator::Div, 1)));
    assert_eq!(Separator::parse('&', '(', '*'), Some((Separator::And, 1)));
    assert_eq!(Separator::parse('.', ';', '%'), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse('%', '-', '='), Some((Separator::Rem, 1)));
    assert_eq!(Separator::parse('~', '!', '!'), Some((Separator::Tilde, 1)));
    assert_eq!(Separator::parse('*', ':', ')'), Some((Separator::Mul, 1)));
    assert_eq!(Separator::parse('|', ';', '<'), Some((Separator::Or, 1)));
    assert_eq!(Separator::parse('}', '{', ')'), Some((Separator::RightBrace, 1)));
    assert_eq!(Separator::parse('|', '=', '}'), Some((Separator::OrEq, 2)));
    assert_eq!(Separator::parse('+', '=', '&'), Some((Separator::AddEq, 2)));
    assert_eq!(Separator::parse('+', ',', '.'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse('&', '~', '!'), Some((Separator::And, 1)));
    assert_eq!(Separator::parse('&', '+', '~'), Some((Separator::And, 1)));
    assert_eq!(Separator::parse('_', 'v', 'a'), None);
    assert_eq!(Separator::parse('t', '<', 'T'), None);
    assert_eq!(Separator::parse('(', 's', 'y'), Some((Separator::LeftParen, 1)));
    assert_eq!(Separator::parse(':', 'p', 'a'), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse('m', 'e', '('), None);
    assert_eq!(Separator::parse('2', '3', '0'), None);
    assert_eq!(Separator::parse('n', '(', ')'), None);
    assert_eq!(Separator::parse('6', '7', '8'), None);
    assert_eq!(Separator::parse('E', 'q', ')'), None);
    assert_eq!(Separator::parse('n', 't', ')'), None);
    assert_eq!(Separator::parse('.', 'i', 'n'), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse('1', '3', '9'), None);
    assert_eq!(Separator::parse(')', ')', ')'), Some((Separator::RightParen, 1)));
    assert_eq!(Separator::parse('r', 'e', ')'), None);
    assert_eq!(Separator::parse('-', '-', '-'), Some((Separator::Sub, 1)));
    assert_eq!(Separator::parse('_', 'e', 'q'), None);
    assert_eq!(Separator::parse('x', 't', ';'), None);
    assert_eq!(Separator::parse('"', 't', 'y'), None);
    assert_eq!(Separator::parse('O', 'N', '"'), None);
    assert_eq!(Separator::parse(')', '.', 'd'), Some((Separator::RightParen, 1)));
    assert_eq!(Separator::parse('f', '.', 'p'), None);
    assert_eq!(Separator::parse('_', 's', 'c'), None);
}

#[test]
fn keyword_basic() {

    assert_eq!(Keyword::Await.display(), "await");
    assert_eq!(Keyword::False.display(), "false");
    assert_eq!(Keyword::Underscore.display(), "_");
    assert_eq!(Keyword::Const.display(), "const");
    assert_eq!(Keyword::Goto.display(), "goto");
    assert!(Keyword::F128.kind(KeywordKind::Reserved));
    assert!(!Keyword::F128.kind(KeywordKind::MaybeIdentifier));
    assert!(Keyword::R64.kind(KeywordKind::Reserved));
    assert!(!Keyword::R64.kind(KeywordKind::Normal));
    assert!(Keyword::Try.kind(KeywordKind::Reserved));
    assert!(!Keyword::Try.kind(KeywordKind::Normal));
    assert!(Keyword::Continue.kind(KeywordKind::Normal));
    assert!(Keyword::Continue.kind(KeywordKind::Normal));
    assert!(Keyword::Interface.kind(KeywordKind::Reserved));
    assert!(!Keyword::Interface.kind(KeywordKind::MaybeIdentifier));
}

#[test]
fn keyword_parse() {

    assert_eq!(Keyword::parse("fn"), Some(Keyword::Fn));
    assert_eq!(Keyword::parse("await"), Some(Keyword::Await));
    assert_eq!(Keyword::parse("一个chinese变量"), None);
    assert_eq!(Keyword::parse("a_中文_var"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("se"), None);
    assert_eq!(Keyword::parse("be"), None);
    assert_eq!(Keyword::parse("yphened"), None);
    assert_eq!(Keyword::parse("rr"), None);
    assert_eq!(Keyword::parse("pub"), Some(Keyword::Pub));
    assert_eq!(Keyword::parse("au"), None);
    assert_eq!(Keyword::parse("Virtu"), None);
    assert_eq!(Keyword::parse("part"), None);
    assert_eq!(Keyword::parse("tP"), None);
    assert_eq!(Keyword::parse("char"), Some(Keyword::Char));
    assert_eq!(Keyword::parse("Arr"), None);
    assert_eq!(Keyword::parse("code"), None);
    assert_eq!(Keyword::parse("ma"), None);
    assert_eq!(Keyword::parse("workin"), None);
    assert_eq!(Keyword::parse("in"), Some(Keyword::In));
}
