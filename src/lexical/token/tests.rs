///! --------------------------------------------------------------------------------
///! This code is auto generated by a tool
///! Changes may cause incorrect behavior and will be lost if the code is regenerated
///! --------------------------------------------------------------------------------

use super::*;

#[test]
fn separator_basic() {

    assert_eq!(Separator::Arrow.display(), "->");
    assert_eq!(Separator::RightBracket.display(), "]");
    assert_eq!(Separator::SemiColon.display(), ";");
    assert_eq!(Separator::Add.display(), "+");
    assert_eq!(Separator::Eq.display(), "=");
    assert!(Separator::LeftBracket.kind(SeparatorKind::Separator));
    assert!(!Separator::LeftBracket.kind(SeparatorKind::Range));
    assert!(Separator::Or.kind(SeparatorKind::BitOr));
    assert!(!Separator::Or.kind(SeparatorKind::Range));
    assert!(Separator::LeftBracket.kind(SeparatorKind::Separator));
    assert!(!Separator::LeftBracket.kind(SeparatorKind::Range));
    assert!(Separator::Dot.kind(SeparatorKind::Separator));
    assert!(!Separator::Dot.kind(SeparatorKind::Additive));
    assert!(Separator::Lt.kind(SeparatorKind::Relational));
    assert!(!Separator::Lt.kind(SeparatorKind::Multiplicative));
}

#[test]
fn separator_parse() {

    assert_eq!(Separator::parse('<', '<', '='), Some((Separator::LtLtEq, 3)));
    assert_eq!(Separator::parse('>', '>', '='), Some((Separator::GtGtEq, 3)));
    assert_eq!(Separator::parse('+', ' ', '1'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse('!', '[', '('), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse('{', ' ', 'a'), Some((Separator::LeftBrace, 1)));
    assert_eq!(Separator::parse('&', '&', ' '), Some((Separator::AndAnd, 2)));
    assert_eq!(Separator::parse('Х', '9', ' '), None);
    assert_eq!(Separator::parse('}', '{', ';'), Some((Separator::RightBrace, 1)));
    assert_eq!(Separator::parse('^', '/', '{'), Some((Separator::Caret, 1)));
    assert_eq!(Separator::parse('+', ':', ','), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse('(', '=', '='), Some((Separator::LeftParen, 1)));
    assert_eq!(Separator::parse(',', '/', '}'), Some((Separator::Comma, 1)));
    assert_eq!(Separator::parse(':', ';', '('), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse(':', ';', '%'), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse(':', '|', '!'), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse('+', '=', '='), Some((Separator::AddEq, 2)));
    assert_eq!(Separator::parse('=', '}', '.'), Some((Separator::Eq, 1)));
    assert_eq!(Separator::parse('~', '^', '%'), Some((Separator::Tilde, 1)));
    assert_eq!(Separator::parse(';', '=', '^'), Some((Separator::SemiColon, 1)));
    assert_eq!(Separator::parse('&', '+', ','), Some((Separator::And, 1)));
    assert_eq!(Separator::parse('-', '=', ')'), Some((Separator::SubEq, 2)));
    assert_eq!(Separator::parse('/', '}', '%'), Some((Separator::Div, 1)));
    assert_eq!(Separator::parse('/', '+', '*'), Some((Separator::Div, 1)));
    assert_eq!(Separator::parse('^', '=', '/'), Some((Separator::CaretEq, 2)));
    assert_eq!(Separator::parse(')', '=', '}'), Some((Separator::RightParen, 1)));
    assert_eq!(Separator::parse('^', '<', '~'), Some((Separator::Caret, 1)));
    assert_eq!(Separator::parse('[', '/', ':'), Some((Separator::LeftBracket, 1)));
    assert_eq!(Separator::parse('s', 't', '('), None);
    assert_eq!(Separator::parse('"', 'P', 'A'), None);
    assert_eq!(Separator::parse('(', 'p', 'r'), Some((Separator::LeftParen, 1)));
    assert_eq!(Separator::parse('u', 'e', ','), None);
    assert_eq!(Separator::parse('c', 'n', '"'), None);
    assert_eq!(Separator::parse('t', '_', 's'), None);
    assert_eq!(Separator::parse('p', 'r', '!'), None);
    assert_eq!(Separator::parse('p', '_', 'o'), None);
    assert_eq!(Separator::parse('3', '8', '8'), None);
    assert_eq!(Separator::parse('n', 'g', ','), None);
    assert_eq!(Separator::parse('.', 'p', 'u'), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse('1', '2', '3'), None);
    assert_eq!(Separator::parse('A', '"', ')'), None);
    assert_eq!(Separator::parse('e', ')', ';'), None);
    assert_eq!(Separator::parse('6', '8', ','), None);
    assert_eq!(Separator::parse('_', 's', 'i'), None);
    assert_eq!(Separator::parse('t', 'e', '_'), None);
    assert_eq!(Separator::parse('(', '&', 's'), Some((Separator::LeftParen, 1)));
    assert_eq!(Separator::parse('1', '2', '3'), None);
    assert_eq!(Separator::parse('e', '\'', ','), None);
    assert_eq!(Separator::parse('#', '[', 'd'), None);
}

#[test]
fn keyword_basic() {

    assert_eq!(Keyword::Goto.display(), "goto");
    assert_eq!(Keyword::Namespace.display(), "namespace");
    assert_eq!(Keyword::Extern.display(), "extern");
    assert_eq!(Keyword::Yield.display(), "yield");
    assert_eq!(Keyword::Var.display(), "var");
    assert!(Keyword::Override.kind(KeywordKind::Reserved));
    assert!(!Keyword::Override.kind(KeywordKind::MaybeIdentifier));
    assert!(Keyword::Underscore.kind(KeywordKind::MaybeIdentifier));
    assert!(!Keyword::Underscore.kind(KeywordKind::Reserved));
    assert!(Keyword::Bits64.kind(KeywordKind::Reserved));
    assert!(!Keyword::Bits64.kind(KeywordKind::Primitive));
    assert!(Keyword::Bits32.kind(KeywordKind::Reserved));
    assert!(!Keyword::Bits32.kind(KeywordKind::Primitive));
    assert!(Keyword::Interface.kind(KeywordKind::Reserved));
    assert!(Keyword::Interface.kind(KeywordKind::Reserved));
}

#[test]
fn keyword_parse() {

    assert_eq!(Keyword::parse("fn"), Some(Keyword::Fn));
    assert_eq!(Keyword::parse("await"), Some(Keyword::Await));
    assert_eq!(Keyword::parse("一个chinese变量"), None);
    assert_eq!(Keyword::parse("a_中文_var"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("ild"), None);
    assert_eq!(Keyword::parse("arator"), None);
    assert_eq!(Keyword::parse("move"), None);
    assert_eq!(Keyword::parse("ment"), None);
    assert_eq!(Keyword::parse("confusa"), None);
    assert_eq!(Keyword::parse("Collec"), None);
    assert_eq!(Keyword::parse("kip"), None);
    assert_eq!(Keyword::parse("obalPoin"), None);
    assert_eq!(Keyword::parse("ing"), None);
    assert_eq!(Keyword::parse("is"), Some(Keyword::Is));
    assert_eq!(Keyword::parse("ue"), None);
    assert_eq!(Keyword::parse("thm"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("Sep"), None);
    assert_eq!(Keyword::parse("LeftE"), None);
}
