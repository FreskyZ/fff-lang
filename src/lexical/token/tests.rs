///! --------------------------------------------------------------------------------
///! This code is auto generated by a tool
///! Changes may cause incorrect behavior and will be lost if the code is regenerated
///! --------------------------------------------------------------------------------

use super::*;

#[test]
fn separator_basic() {

    assert_eq!(Separator::Eq.display(), "=");
    assert_eq!(Separator::EqEq.display(), "==");
    assert_eq!(Separator::Add.display(), "+");
    assert_eq!(Separator::DivEq.display(), "/=");
    assert_eq!(Separator::Comma.display(), ",");
    assert!(Separator::NotEq.kind(SeparatorKind::Equality));
    assert!(!Separator::NotEq.kind(SeparatorKind::BitOr));
    assert!(Separator::RightParen.kind(SeparatorKind::Separator));
    assert!(!Separator::RightParen.kind(SeparatorKind::Assign));
    assert!(Separator::Caret.kind(SeparatorKind::BitXor));
    assert!(!Separator::Caret.kind(SeparatorKind::Range));
    assert!(Separator::LtLtEq.kind(SeparatorKind::Assign));
    assert!(!Separator::LtLtEq.kind(SeparatorKind::Separator));
    assert!(Separator::LeftBracket.kind(SeparatorKind::Separator));
    assert!(!Separator::LeftBracket.kind(SeparatorKind::BitOr));
}

#[test]
fn separator_parse() {

    assert_eq!(Separator::parse3('<', '<', '='), Some((Separator::LtLtEq, 3)));
    assert_eq!(Separator::parse3('>', '>', '='), Some((Separator::GtGtEq, 3)));
    assert_eq!(Separator::parse3('+', ' ', '1'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse3('!', '[', '('), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse3('{', ' ', 'a'), Some((Separator::LeftBrace, 1)));
    assert_eq!(Separator::parse3('&', '&', ' '), Some((Separator::AndAnd, 2)));
    assert_eq!(Separator::parse3('Х', '9', ' '), None);
    assert_eq!(Separator::parse3('/', '=', '}'), Some((Separator::DivEq, 2)));
    assert_eq!(Separator::parse3('{', '=', '~'), Some((Separator::LeftBrace, 1)));
    assert_eq!(Separator::parse3('|', '{', ']'), Some((Separator::Or, 1)));
    assert_eq!(Separator::parse3(':', ':', '}'), Some((Separator::ColonColon, 2)));
    assert_eq!(Separator::parse3(',', '=', '{'), Some((Separator::Comma, 1)));
    assert_eq!(Separator::parse3('<', '<', '='), Some((Separator::LtLtEq, 3)));
    assert_eq!(Separator::parse3('+', '!', '/'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse3('|', '{', '+'), Some((Separator::Or, 1)));
    assert_eq!(Separator::parse3('%', '{', ')'), Some((Separator::Rem, 1)));
    assert_eq!(Separator::parse3('>', '(', '{'), Some((Separator::Gt, 1)));
    assert_eq!(Separator::parse3('-', '!', '-'), Some((Separator::Sub, 1)));
    assert_eq!(Separator::parse3('(', '=', '.'), Some((Separator::LeftParen, 1)));
    assert_eq!(Separator::parse3('|', '*', '}'), Some((Separator::Or, 1)));
    assert_eq!(Separator::parse3('<', '*', '('), Some((Separator::Lt, 1)));
    assert_eq!(Separator::parse3('!', '=', '^'), Some((Separator::NotEq, 2)));
    assert_eq!(Separator::parse3('+', '=', '.'), Some((Separator::AddEq, 2)));
    assert_eq!(Separator::parse3('^', '(', '>'), Some((Separator::Caret, 1)));
    assert_eq!(Separator::parse3('.', '=', '-'), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse3('*', '^', '*'), Some((Separator::Mul, 1)));
    assert_eq!(Separator::parse3('/', '!', ';'), Some((Separator::Div, 1)));
    assert_eq!(Separator::parse3('c', ':', 'l'), None);
    assert_eq!(Separator::parse1('v'), None);
    assert_eq!(Separator::parse1('E'), None);
    assert_eq!(Separator::parse1('='), Some(Separator::Eq));
    assert_eq!(Separator::parse3('m', 'e', ':'), None);
    assert_eq!(Separator::parse1('"'), None);
    assert_eq!(Separator::parse1(')'), Some(Separator::RightParen));
    assert_eq!(Separator::parse3('s', 'h', '('), None);
    assert_eq!(Separator::parse3('l', 'e', '_'), None);
    assert_eq!(Separator::parse1('r'), None);
    assert_eq!(Separator::parse3('!', '(', 'c'), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse3('m', 'e', '!'), None);
    assert_eq!(Separator::parse3('c', 'x', '.'), None);
    assert_eq!(Separator::parse1('('), Some(Separator::LeftParen));
    assert_eq!(Separator::parse1(';'), Some(Separator::SemiColon));
    assert_eq!(Separator::parse1('s'), None);
    assert_eq!(Separator::parse1('n'), None);
    assert_eq!(Separator::parse3('l', 'f', ','), None);
    assert_eq!(Separator::parse3('_', '2', '!'), None);
    assert_eq!(Separator::parse1('n'), None);
    assert_eq!(Separator::parse1('r'), None);
    assert_eq!(Separator::parse1('2'), None);
    assert_eq!(Separator::parse1('a'), None);
    assert_eq!(Separator::parse3(';', '\'', ','), Some((Separator::SemiColon, 1)));
    assert_eq!(Separator::parse1('5'), None);
    assert_eq!(Separator::parse3('(', '"', '.'), Some((Separator::LeftParen, 1)));
    assert_eq!(Separator::parse3('o', 'p', '('), None);
    assert_eq!(Separator::parse3('p', 'r', ','), None);
    assert_eq!(Separator::parse1('.'), Some(Separator::Dot));
    assert_eq!(Separator::parse3('s', 't', ']'), None);
    assert_eq!(Separator::parse1('k'), None);
    assert_eq!(Separator::parse1('c'), None);
    assert_eq!(Separator::parse3('e', '(', 'r'), None);
    assert_eq!(Separator::parse1('p'), None);
    assert_eq!(Separator::parse1('o'), None);
    assert_eq!(Separator::parse3('9', '0', '4'), None);
    assert_eq!(Separator::parse1('.'), Some(Separator::Dot));
    assert_eq!(Separator::parse3('x', ']', ')'), None);
}

#[test]
fn keyword_basic() {

    assert_eq!(Keyword::And.display(), "and");
    assert_eq!(Keyword::Bits32.display(), "bits32");
    assert_eq!(Keyword::I128.display(), "i128");
    assert_eq!(Keyword::Private.display(), "private");
    assert_eq!(Keyword::I32.display(), "i32");
    assert!(Keyword::Finally.kind(KeywordKind::Reserved));
    assert!(!Keyword::Finally.kind(KeywordKind::Normal));
    assert!(Keyword::Loop.kind(KeywordKind::Normal));
    assert!(!Keyword::Loop.kind(KeywordKind::MaybeIdentifier));
    assert!(Keyword::Pub.kind(KeywordKind::Reserved));
    assert!(!Keyword::Pub.kind(KeywordKind::MaybeIdentifier));
    assert!(Keyword::Break.kind(KeywordKind::Normal));
    assert!(!Keyword::Break.kind(KeywordKind::Primitive));
    assert!(Keyword::In.kind(KeywordKind::Normal));
    assert!(!Keyword::In.kind(KeywordKind::Reserved));
}

#[test]
fn keyword_parse() {

    assert_eq!(Keyword::parse("fn"), Some(Keyword::Fn));
    assert_eq!(Keyword::parse("await"), Some(Keyword::Await));
    assert_eq!(Keyword::parse("一个chinese变量"), None);
    assert_eq!(Keyword::parse("a_中文_var"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("in"), Some(Keyword::In));
    assert_eq!(Keyword::parse("use"), Some(Keyword::Use));
    assert_eq!(Keyword::parse("ind"), None);
    assert_eq!(Keyword::parse("Char"), None);
    assert_eq!(Keyword::parse("aren"), None);
    assert_eq!(Keyword::parse("ar"), None);
    assert_eq!(Keyword::parse("romS"), None);
    assert_eq!(Keyword::parse("lowHelp"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("PLE"), None);
    assert_eq!(Keyword::parse("cte"), None);
    assert_eq!(Keyword::parse("et"), None);
    assert_eq!(Keyword::parse("peTyp"), None);
    assert_eq!(Keyword::parse("ep"), None);
    assert_eq!(Keyword::parse("ndex"), None);
    assert_eq!(Keyword::parse("engt"), None);
    assert_eq!(Keyword::parse("erved"), None);
    assert_eq!(Keyword::parse("ca"), None);
    assert_eq!(Keyword::parse("ectio"), None);
}
