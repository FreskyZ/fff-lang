///! --------------------------------------------------------------------------------
///! This code is auto generated by a tool
///! Changes may cause incorrect behavior and will be lost if the code is regenerated
///! --------------------------------------------------------------------------------

use super::*;

#[test]
fn separator_basic() {

    assert_eq!(Separator::OrOr.display(), "||");
    assert_eq!(Separator::SubEq.display(), "-=");
    assert_eq!(Separator::ColonColon.display(), "::");
    assert_eq!(Separator::And.display(), "&");
    assert_eq!(Separator::LtEq.display(), "<=");
    assert!(Separator::RightParen.kind(SeparatorKind::Separator));
    assert!(!Separator::RightParen.kind(SeparatorKind::BitOr));
    assert!(Separator::ColonColon.kind(SeparatorKind::Separator));
    assert!(!Separator::ColonColon.kind(SeparatorKind::Shift));
    assert!(Separator::LtLtEq.kind(SeparatorKind::Assign));
    assert!(!Separator::LtLtEq.kind(SeparatorKind::BitXor));
    assert!(Separator::AndEq.kind(SeparatorKind::Assign));
    assert!(!Separator::AndEq.kind(SeparatorKind::Separator));
    assert!(Separator::RightParen.kind(SeparatorKind::Separator));
    assert!(!Separator::RightParen.kind(SeparatorKind::Range));
}

#[test]
fn separator_parse() {

    assert_eq!(Separator::parse3('<', '<', '='), Some((Separator::LtLtEq, 3)));
    assert_eq!(Separator::parse3('>', '>', '='), Some((Separator::GtGtEq, 3)));
    assert_eq!(Separator::parse3('+', ' ', '1'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse3('!', '[', '('), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse3('{', ' ', 'a'), Some((Separator::LeftBrace, 1)));
    assert_eq!(Separator::parse3('&', '&', ' '), Some((Separator::AndAnd, 2)));
    assert_eq!(Separator::parse3('Х', '9', ' '), None);
    assert_eq!(Separator::parse3(';', '[', '-'), Some((Separator::SemiColon, 1)));
    assert_eq!(Separator::parse3(',', '<', '!'), Some((Separator::Comma, 1)));
    assert_eq!(Separator::parse3('*', '=', '<'), Some((Separator::MulEq, 2)));
    assert_eq!(Separator::parse3('/', '=', ']'), Some((Separator::DivEq, 2)));
    assert_eq!(Separator::parse3(')', '=', '.'), Some((Separator::RightParen, 1)));
    assert_eq!(Separator::parse3('.', '=', '['), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse3('-', ':', '('), Some((Separator::Sub, 1)));
    assert_eq!(Separator::parse3('+', '(', ';'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse3('!', '+', '>'), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse3('~', '-', ':'), Some((Separator::Tilde, 1)));
    assert_eq!(Separator::parse3('%', '=', ','), Some((Separator::RemEq, 2)));
    assert_eq!(Separator::parse3(',', '^', '('), Some((Separator::Comma, 1)));
    assert_eq!(Separator::parse3('[', '=', ','), Some((Separator::LeftBracket, 1)));
    assert_eq!(Separator::parse3('*', ':', '*'), Some((Separator::Mul, 1)));
    assert_eq!(Separator::parse3(':', '!', '='), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse3(';', ';', ':'), Some((Separator::SemiColon, 1)));
    assert_eq!(Separator::parse3('=', '/', '<'), Some((Separator::Eq, 1)));
    assert_eq!(Separator::parse3('}', ']', '>'), Some((Separator::RightBrace, 1)));
    assert_eq!(Separator::parse3('-', '%', ')'), Some((Separator::Sub, 1)));
    assert_eq!(Separator::parse3('!', '+', '='), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse1('I'), None);
    assert_eq!(Separator::parse3('u', '1', '6'), None);
    assert_eq!(Separator::parse3('c', 't', '_'), None);
    assert_eq!(Separator::parse1('n'), None);
    assert_eq!(Separator::parse1('1'), None);
    assert_eq!(Separator::parse3('e', 'w', '('), None);
    assert_eq!(Separator::parse3('!', '(', 'r'), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse3('m', 'e', '('), None);
    assert_eq!(Separator::parse3('d', ')', ','), None);
    assert_eq!(Separator::parse1('l'), None);
    assert_eq!(Separator::parse1('b'), None);
    assert_eq!(Separator::parse3('-', '"', ')'), Some((Separator::Sub, 1)));
    assert_eq!(Separator::parse3('l', 'e', '/'), None);
    assert_eq!(Separator::parse1('t'), None);
    assert_eq!(Separator::parse1('4'), None);
    assert_eq!(Separator::parse1('t'), None);
    assert_eq!(Separator::parse1('r'), None);
    assert_eq!(Separator::parse1('c'), None);
    assert_eq!(Separator::parse3('&', 'm', 'u'), Some((Separator::And, 1)));
    assert_eq!(Separator::parse3('t', 'o', '_'), None);
    assert_eq!(Separator::parse1('s'), None);
    assert_eq!(Separator::parse1('|'), Some(Separator::Or));
    assert_eq!(Separator::parse1(':'), Some(Separator::Colon));
    assert_eq!(Separator::parse3('$', 'e', 'n'), None);
    assert_eq!(Separator::parse3('e', '_', 'n'), None);
    assert_eq!(Separator::parse1('i'), None);
    assert_eq!(Separator::parse3('i', 'd', ':'), None);
    assert_eq!(Separator::parse3('1', '1', ','), None);
    assert_eq!(Separator::parse3('m', ':', ':'), None);
    assert_eq!(Separator::parse3('e', ':', ':'), None);
    assert_eq!(Separator::parse3('u', 's', '_'), None);
    assert_eq!(Separator::parse1(','), Some(Separator::Comma));
    assert_eq!(Separator::parse3('e', ',', ')'), None);
    assert_eq!(Separator::parse1(']'), Some(Separator::RightBracket));
    assert_eq!(Separator::parse1('z'), None);
    assert_eq!(Separator::parse1('c'), None);
    assert_eq!(Separator::parse1('('), Some(Separator::LeftParen));
}

#[test]
fn keyword_basic() {

    assert_eq!(Keyword::For.display(), "for");
    assert_eq!(Keyword::Bits32.display(), "bits32");
    assert_eq!(Keyword::I16.display(), "i16");
    assert_eq!(Keyword::As.display(), "as");
    assert_eq!(Keyword::True.display(), "true");
    assert!(Keyword::I16.kind(KeywordKind::Primitive));
    assert!(!Keyword::I16.kind(KeywordKind::Normal));
    assert!(Keyword::U16.kind(KeywordKind::Primitive));
    assert!(Keyword::U16.kind(KeywordKind::Primitive));
    assert!(Keyword::As.kind(KeywordKind::Normal));
    assert!(!Keyword::As.kind(KeywordKind::MaybeIdentifier));
    assert!(Keyword::I8.kind(KeywordKind::Primitive));
    assert!(!Keyword::I8.kind(KeywordKind::MaybeIdentifier));
    assert!(Keyword::Var.kind(KeywordKind::Normal));
    assert!(!Keyword::Var.kind(KeywordKind::Reserved));
}

#[test]
fn keyword_parse() {

    assert_eq!(Keyword::parse("fn"), Some(Keyword::Fn));
    assert_eq!(Keyword::parse("await"), Some(Keyword::Await));
    assert_eq!(Keyword::parse("一个chinese变量"), None);
    assert_eq!(Keyword::parse("a_中文_var"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("ra"), None);
    assert_eq!(Keyword::parse("ag"), None);
    assert_eq!(Keyword::parse("seRese"), None);
    assert_eq!(Keyword::parse("nticAnal"), None);
    assert_eq!(Keyword::parse("confusa"), None);
    assert_eq!(Keyword::parse("Gt"), None);
    assert_eq!(Keyword::parse("se"), None);
    assert_eq!(Keyword::parse("DIF"), None);
    assert_eq!(Keyword::parse("od"), None);
    assert_eq!(Keyword::parse("hard"), None);
    assert_eq!(Keyword::parse("co"), None);
    assert_eq!(Keyword::parse("self"), Some(Keyword::Self_));
    assert_eq!(Keyword::parse("ner"), None);
    assert_eq!(Keyword::parse("rT"), None);
    assert_eq!(Keyword::parse("ato"), None);
    assert_eq!(Keyword::parse("rator"), None);
    assert_eq!(Keyword::parse("CDA"), None);
    assert_eq!(Keyword::parse("ha"), None);
    assert_eq!(Keyword::parse("if"), Some(Keyword::If));
}
