///! --------------------------------------------------------------------------------
///! This code is auto generated by a tool
///! Changes may cause incorrect behavior and will be lost if the code is regenerated
///! --------------------------------------------------------------------------------

use super::*;

#[test]
fn separator_basic() {

    assert_eq!(Separator::GtEq.display(), ">=");
    assert_eq!(Separator::RightParen.display(), ")");
    assert_eq!(Separator::Sub.display(), "-");
    assert_eq!(Separator::AddEq.display(), "+=");
    assert_eq!(Separator::MulEq.display(), "*=");
    assert!(Separator::RightBracket.kind(SeparatorKind::Separator));
    assert!(!Separator::RightBracket.kind(SeparatorKind::Unary));
    assert!(Separator::SemiColon.kind(SeparatorKind::Separator));
    assert!(!Separator::SemiColon.kind(SeparatorKind::Assign));
    assert!(Separator::GtGtEq.kind(SeparatorKind::Assign));
    assert!(!Separator::GtGtEq.kind(SeparatorKind::BitOr));
    assert!(Separator::GtEq.kind(SeparatorKind::Relational));
    assert!(!Separator::GtEq.kind(SeparatorKind::Range));
    assert!(Separator::LtEq.kind(SeparatorKind::Relational));
    assert!(!Separator::LtEq.kind(SeparatorKind::LogicalOr));
}

#[test]
fn separator_parse() {

    assert_eq!(Separator::parse3('<', '<', '='), Some((Separator::LtLtEq, 3)));
    assert_eq!(Separator::parse3('>', '>', '='), Some((Separator::GtGtEq, 3)));
    assert_eq!(Separator::parse3('+', ' ', '1'), Some((Separator::Add, 1)));
    assert_eq!(Separator::parse3('!', '[', '('), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse3('{', ' ', 'a'), Some((Separator::LeftBrace, 1)));
    assert_eq!(Separator::parse3('&', '&', ' '), Some((Separator::AndAnd, 2)));
    assert_eq!(Separator::parse3('Х', '9', ' '), None);
    assert_eq!(Separator::parse3('/', '=', '^'), Some((Separator::DivEq, 2)));
    assert_eq!(Separator::parse3(',', '=', '.'), Some((Separator::Comma, 1)));
    assert_eq!(Separator::parse3(')', '=', '/'), Some((Separator::RightParen, 1)));
    assert_eq!(Separator::parse3('(', ';', '-'), Some((Separator::LeftParen, 1)));
    assert_eq!(Separator::parse3(')', '.', '%'), Some((Separator::RightParen, 1)));
    assert_eq!(Separator::parse3(']', '!', '['), Some((Separator::RightBracket, 1)));
    assert_eq!(Separator::parse3('~', ')', '/'), Some((Separator::Tilde, 1)));
    assert_eq!(Separator::parse3('-', ':', '/'), Some((Separator::Sub, 1)));
    assert_eq!(Separator::parse3('|', '.', '-'), Some((Separator::Or, 1)));
    assert_eq!(Separator::parse3('!', '=', '|'), Some((Separator::NotEq, 2)));
    assert_eq!(Separator::parse3('=', '=', '~'), Some((Separator::EqEq, 2)));
    assert_eq!(Separator::parse3(':', '=', ')'), Some((Separator::Colon, 1)));
    assert_eq!(Separator::parse3('=', '^', '~'), Some((Separator::Eq, 1)));
    assert_eq!(Separator::parse3('=', '*', '|'), Some((Separator::Eq, 1)));
    assert_eq!(Separator::parse3('}', '=', '('), Some((Separator::RightBrace, 1)));
    assert_eq!(Separator::parse3('.', '+', '('), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse3('!', '-', '}'), Some((Separator::Not, 1)));
    assert_eq!(Separator::parse3(';', '=', '^'), Some((Separator::SemiColon, 1)));
    assert_eq!(Separator::parse3('%', '+', '>'), Some((Separator::Rem, 1)));
    assert_eq!(Separator::parse3('^', '=', '!'), Some((Separator::CaretEq, 2)));
    assert_eq!(Separator::parse1('l'), None);
    assert_eq!(Separator::parse1('a'), None);
    assert_eq!(Separator::parse3('a', 'r', '>'), None);
    assert_eq!(Separator::parse3('t', '(', '&'), None);
    assert_eq!(Separator::parse3('3', '7', '4'), None);
    assert_eq!(Separator::parse1('p'), None);
    assert_eq!(Separator::parse3('s', 's', ':'), None);
    assert_eq!(Separator::parse1(';'), Some(Separator::SemiColon));
    assert_eq!(Separator::parse1('t'), None);
    assert_eq!(Separator::parse3('1', '2', '3'), None);
    assert_eq!(Separator::parse1(')'), Some(Separator::RightParen));
    assert_eq!(Separator::parse1('}'), Some(Separator::RightBrace));
    assert_eq!(Separator::parse3('o', 'r', '('), None);
    assert_eq!(Separator::parse3('s', '_', 'h'), None);
    assert_eq!(Separator::parse1('f'), None);
    assert_eq!(Separator::parse3('e', ':', ':'), None);
    assert_eq!(Separator::parse1('A'), None);
    assert_eq!(Separator::parse1('r'), None);
    assert_eq!(Separator::parse1('b'), None);
    assert_eq!(Separator::parse3('&', 's', 'e'), Some((Separator::And, 1)));
    assert_eq!(Separator::parse3('(', '"', 'c'), Some((Separator::LeftParen, 1)));
    assert_eq!(Separator::parse3('2', '2', ','), None);
    assert_eq!(Separator::parse1('e'), None);
    assert_eq!(Separator::parse1('n'), None);
    assert_eq!(Separator::parse3('"', ')', ','), None);
    assert_eq!(Separator::parse1('e'), None);
    assert_eq!(Separator::parse3('2', '3', '4'), None);
    assert_eq!(Separator::parse3('p', '(', ')'), None);
    assert_eq!(Separator::parse1('-'), Some(Separator::Sub));
    assert_eq!(Separator::parse1('M'), None);
    assert_eq!(Separator::parse1('u'), None);
    assert_eq!(Separator::parse1('L'), None);
    assert_eq!(Separator::parse1('m'), None);
    assert_eq!(Separator::parse1('5'), None);
    assert_eq!(Separator::parse3('u', 'e', ')'), None);
    assert_eq!(Separator::parse3('f', '.', 'w'), None);
    assert_eq!(Separator::parse3('5', '6', '7'), None);
    assert_eq!(Separator::parse1('c'), None);
    assert_eq!(Separator::parse3('.', 'd', 'e'), Some((Separator::Dot, 1)));
    assert_eq!(Separator::parse1('r'), None);
    assert_eq!(Separator::parse1('o'), None);
    assert_eq!(Separator::parse1('-'), Some(Separator::Sub));
    assert_eq!(Separator::parse1('r'), None);
    assert_eq!(Separator::parse3('_', 'c', 'u'), None);
    assert_eq!(Separator::parse1('w'), None);
    assert_eq!(Separator::parse3('3', '9', '5'), None);
    assert_eq!(Separator::parse3('_', 'b', 'i'), None);
    assert_eq!(Separator::parse1('m'), None);
    assert_eq!(Separator::parse1('t'), None);
    assert_eq!(Separator::parse1('e'), None);
}

#[test]
fn keyword_basic() {

    assert_eq!(Keyword::Var.display(), "var");
    assert_eq!(Keyword::Goto.display(), "goto");
    assert_eq!(Keyword::Ret.display(), "ret");
    assert_eq!(Keyword::F128.display(), "f128");
    assert_eq!(Keyword::Break.display(), "break");
    assert!(Keyword::R128.kind(KeywordKind::Reserved));
    assert!(!Keyword::R128.kind(KeywordKind::Primitive));
    assert!(Keyword::If.kind(KeywordKind::Normal));
    assert!(!Keyword::If.kind(KeywordKind::Primitive));
    assert!(Keyword::Underscore.kind(KeywordKind::Normal));
    assert!(!Keyword::Underscore.kind(KeywordKind::Reserved));
    assert!(Keyword::Return.kind(KeywordKind::Normal));
    assert!(!Keyword::Return.kind(KeywordKind::Reserved));
    assert!(Keyword::Char.kind(KeywordKind::Primitive));
    assert!(!Keyword::Char.kind(KeywordKind::Normal));
}

#[test]
fn keyword_parse() {

    assert_eq!(Keyword::parse("fn"), Some(Keyword::Fn));
    assert_eq!(Keyword::parse("await"), Some(Keyword::Await));
    assert_eq!(Keyword::parse("一个chinese变量"), None);
    assert_eq!(Keyword::parse("a_中文_var"), None);
    assert_eq!(Keyword::parse("as"), Some(Keyword::As));
    assert_eq!(Keyword::parse("crate"), None);
    assert_eq!(Keyword::parse("mp"), None);
    assert_eq!(Keyword::parse("chitectur"), None);
    assert_eq!(Keyword::parse("ew"), None);
    assert_eq!(Keyword::parse("type"), Some(Keyword::Type));
    assert_eq!(Keyword::parse("osti"), None);
    assert_eq!(Keyword::parse("sess"), None);
    assert_eq!(Keyword::parse("or"), Some(Keyword::Or));
    assert_eq!(Keyword::parse("yntax"), None);
    assert_eq!(Keyword::parse("Num"), None);
    assert_eq!(Keyword::parse("rds"), None);
    assert_eq!(Keyword::parse("Stat"), None);
    assert_eq!(Keyword::parse("rato"), None);
    assert_eq!(Keyword::parse("rel"), None);
    assert_eq!(Keyword::parse("int"), None);
    assert_eq!(Keyword::parse("assignme"), None);
    assert_eq!(Keyword::parse("taDireco"), None);
    assert_eq!(Keyword::parse("le"), None);
    assert_eq!(Keyword::parse("fn"), Some(Keyword::Fn));
    assert_eq!(Keyword::parse("ra"), None);
    assert_eq!(Keyword::parse("me"), None);
    assert_eq!(Keyword::parse("type"), Some(Keyword::Type));
    assert_eq!(Keyword::parse("self"), Some(Keyword::Self_));
}
