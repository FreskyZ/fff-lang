(* fff-lang grammar *)

(* lexical actually not syntax *)
identifier = that identifier;
literal = that literal;

label = "@", [ identifier ];
logical or operator = "||";
logical and operator = "&&";
equality operator = "==" | "!=";
bit or operator = "|";
bit xor operator = "^";
bit and operator = "&";
shift operator = "<<" | ">>";
relational operator = "<=" | "<" | ">" | ">=";
additive operator = "+" | "-";
multiplicative operator = "*" | "\" | "%";
unary operator = "!" | "~" | "-";

(* syntax *)
type use = 
    identifier 
    | "[", type use, "]"
    | "(", { type use }, ")";
binary expr = unary expr | logical or expr;
logical or expr = logical and expr | logical or expr, logical or operator, logical and expr;
logical and expr = equality expr | logical and expr, logical and operator, equality expr;
equality expr = bit or expr | equality expr, equality operator, bit or expr;
bit or expr = bit xor expr | bit or expr, bit or operator, bit xor expr;
bit xor expr = bit and expr | bit xor expr, bit xor operator, bit and expr;
bit and expr = shift expr | bit and expr, bit and operator, shift expr;
shift expr = relational expr | shift expr, shift operator, relational expr;
relational expr = additive expr | relational expr, relational operator, additive expr;
additive expr = multiplicative expr | additive expr, additive operator, multiplicative expr;
multiplicative expr = unary expr | multiplicative expr, multiplicative operator, unary expr;
unary expr =
    postfix expr
    | unary operator, unary expr;
postfix expr = primary expr, (
    "[", [ expr, { ",", expr }, [ "," ] ], "]"
    | "(", [ expr, { ",", expr }, [ "," ] ], ")"
    | ".", identifier, [ "(", { ",", expr }, [ "," ], ")" ]);
primary expr = 
    identifier
    | literal
    | "(", [ expr, { ",", expr }, [ "," ] ], ")"
    | "[", [ (expr, { ",", expr }, [ "," ]) | (expr, ";", expr) ], "]";
expr = binary expr;
block = "{", { statement }, "}";
label definition = label, ":";
statement = 
    const declaration 
    | var declaration
    | if statement
    | while statement
    | for statement
    | loop statement
    | jump statement
    | block statement
    | expr statement
    | return statement;
const declaration = "const", (identifier | "_"), [ ":", type use ], "=", expr, ";";
var declaration = "var", (identifier | "_"), [ ":", type use], [ "=", expr ], ";";
if statement = [ label definition ], "if", expr, block, { "else", "if", expr, block }, [ "else", block ];
while statement = [ label definition ], "while", expr, block;
for statement = [ label definition ], "for", (identifier | "_"), "in", expr, block;
loop statement = [ label definition ], "loop", block;
jump statement = 
    "break", [ label ], ";"
    | "continue", [ label ], ";";
block statement = [ label definition ], block;
return statement = "return", [ expr ], ";";
expr statement = expr [ "=", expr ], ";";
function definition = "fn", identifier, "(", [ identifier, ":", type use, { ",", identifier, ":" type use }, [ "," ] ], ")", [ "->", type use ], block;
package = { function definition };
