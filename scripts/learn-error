Learn Error Message Format from Other Compiler

[17/1/30 22:06]
For source file not exist
rustc: counldn't read "not_exist.rs": 系统找不到指定的文件。 (os error 2)   // This is FormatMessageW, 233
cl: clxx: fatal error C1083: Can not open source file 'not_exist.cpp': No such file or directory  // "Can not ... '%1': %2", %2 is c lib error message
gcc: error: not_exist.cpp: No such file or directory  // also c lib error message
ghc: can't file file: not_exist.hs
python: can't open file: 'not_exist.py': [Errno 2] No such file or directory    // c lib error message

[17/2/24 18:38]
For unexpected end of string literal when processing unicode char escape
rusrc: incorrect unicode escape sequence (`"a\u"`)
cl: (cannot construct a similar error)
gcc: (same as cl...)

[17/2/24 22:18]
For invalid unicode char escape (`'\u12345678'`)
rustc: invalid unicode char escape (...)
cl: a universal-character-name specifies an invalid character
clang: 

[17/2/24 22:18]
For EOF in block comment
rustc: unterminated block comment
cl: unexpected end of file found in comment

[17/2/25 14:16]
A complex error formating, wrong parameter given when calling function
error[E0061]: this function takes 2 parameters but 1 parameter was supplied
   --> src\v2lexer\mod.rs: 341:49
    |
341 |                   somefn($p1);
    |
...
358 |     some_macro!(1);
    |     --------------- in this macro invocation
    |
   ::: src\buf_lexer.rs
    |
74  |     pub fn somefn(a: i32, b: i32) -> i32 {
    |   __- starting here...
75  |  |      a + b
76  |  |  }
77  |  |__- ...ending here: defined here

[17/2/27 12:38]
Unexpected unicode char in source code
rustc: unknown start of token: '\u{ff0c}', unicode character '，'(Fullwidth Comma) looks much like ',', but is not

[17/3/14 14:42]
Empty integral literal like '0x'
rustc: no valid digits found for number

[17/8/9 14:16]
   Compiling semantic v0.1.3 (file:///C:/Users/fhan018/Any/Repos/fff-lang/semantic)
error[E0308]: mismatched types
  --> src\def_scope.rs:34:69
   |
34 |     pub fn sub(&self, name: String) -> Self { Self::_new(name, Some(self.0.clone())) }
   |                                                                     ^^^^^^^^^^^^^^
   |                                                                     |
   |                                                                     expected struct `def_scope::SharedDefScope`, found struct `std::rc::Rc`
   |                                                                     help: try using a variant of the expected type: `def_scope::SharedDefScope(self.0.clone
())`
   |
   = note: expected type `def_scope::SharedDefScope`
              found type `std::rc::Rc<std::cell::RefCell<def_scope::DefScope>>`
   = help: here are some functions which might fulfill your needs:
           - .into_inner()

error[E0277]: the trait bound `codemap::Span: std::fmt::Display` is not satisfied
  --> src\def_scope.rs:38:104
   |
38 |     pub fn sub_with_span(&self, name: String, span: Span) -> Self { Self::_new(format!("<{}{}>", name, span), Some(self.0.clone())) }
   |                                                                                                        ^^^^ `codemap::Span` cannot be formatted with the de
fault formatter; try using `:?` instead if you are using a format string
   |
   = help: the trait `std::fmt::Display` is not implemented for `codemap::Span`
   = note: required by `std::fmt::Display::fmt`

error[E0308]: mismatched types
  --> src\def_scope.rs:38:116
   |
38 |     pub fn sub_with_span(&self, name: String, span: Span) -> Self { Self::_new(format!("<{}{}>", name, span), Some(self.0.clone())) }
   |                                                                                                                    ^^^^^^^^^^^^^^
   |                                                                                                                    |
   |                                                                                                                    expected struct `def_scope::SharedDefSco
pe`, found struct `std::rc::Rc`
   |                                                                                                                    help: try using a variant of the expecte
d type: `def_scope::SharedDefScope(self.0.clone())`
   |
   = note: expected type `def_scope::SharedDefScope`
              found type `std::rc::Rc<std::cell::RefCell<def_scope::DefScope>>`
   = help: here are some functions which might fulfill your needs:
           - .into_inner()

error: aborting due to 3 previous errors

error: Could not compile `semantic`.

To learn more, run the command again with --verbose.

   Compiling semantic v0.1.3 (file:///C:/Users/fhan018/Any/Repos/fff-lang/semantic)
error[E0597]: borrowed value does not live long enough
  --> src\def_scope.rs:46:44
   |
46 |     pub fn get_this_name(&self) -> &str { &self.0.as_ref().borrow().name }
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^      - temporary value only lives until here
   |                                            |
   |                                            does not live long enough
   |
note: borrowed value must be valid for the anonymous lifetime #1 defined on the method body at 46:5...
  --> src\def_scope.rs:46:5
   |
46 |     pub fn get_this_name(&self) -> &str { &self.0.as_ref().borrow().name }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0597]: borrowed value does not live long enough
  --> src\def_scope.rs:47:62
   |
47 |     fn get_parent_scope(&self) -> &Option<SharedDefScope> { &self.0.as_ref().borrow().parent }
   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^        - temporary value only lives until here
   |                                                              |
   |                                                              does not live long enough
   |
note: borrowed value must be valid for the anonymous lifetime #1 defined on the method body at 47:5...
  --> src\def_scope.rs:47:5
   |
47 |     fn get_parent_scope(&self) -> &Option<SharedDefScope> { &self.0.as_ref().borrow().parent }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to 2 previous errors

error: Could not compile `semantic`.

To learn more, run the command again with --verbose.
   Compiling semantic v0.1.3 (file:///C:/Users/fhan018/Any/Repos/fff-lang/semantic)
error[E0277]: the trait bound `std::string::String: std::convert::From<&std::ffi::OsStr>` is not satisfied
  --> src\items\module.rs:27:38
   |
27 |             this_scope: parent_scope.sub(node.source.get_absolute_path().file_stem().unwrap()),
   |                                      ^^^ the trait `std::convert::From<&std::ffi::OsStr>` is not implemented for `std::string::String`
   |
   = help: the following implementations were found:
             <std::string::String as std::convert::From<std::borrow::Cow<'a, str>>>
             <std::string::String as std::convert::From<&'a str>>
             <std::string::String as std::convert::From<std::boxed::Box<str>>>
   = note: required because of the requirements on the impl of `std::convert::Into<std::string::String>` for `&std::ffi::OsStr`

error[E0308]: mismatched types
  --> src\items\module.rs:35:55
   |
35 |         let mut retval = Module{ items: Vec::new(), ..self };
   |                                                       ^^^^ expected struct `items::module::Module`, found mutable reference
   |
   = note: expected type `items::module::Module`
              found type `&mut items::module::Module`

error[E0063]: missing field `this_scope` in initializer of `items::module::Module`
  --> src\package.rs:78:54
   |
78 |                                         module: Some(Module{
   |                                                      ^^^^^^ missing `this_scope`

error[E0063]: missing field `this_scope` in initializer of `items::module::Module`
  --> src\package.rs:72:42
   |
72 |                             module: Some(Module{
   |                                          ^^^^^^ missing `this_scope`

error[E0063]: missing field `this_scope` in initializer of `items::module::Module`
  --> src\package.rs:66:30
   |
66 |                 module: Some(Module{
   |                              ^^^^^^ missing `this_scope`

error[E0063]: missing field `this_scope` in initializer of `items::module::Module`
  --> src\package.rs:92:30
   |
92 |                 module: Some(Module{
   |                              ^^^^^^ missing `this_scope`

error[E0063]: missing field `this_scope` in initializer of `items::module::Module`
  --> src\package.rs:60:18
   |
60 |     let expect = Module{
   |                  ^^^^^^ missing `this_scope`

error: aborting due to 7 previous errors

error: Could not compile `semantic`.

To learn more, run the command again with --verbose.
error: unexpected token: `"import d;"`
  --> src\package.rs:50:104
   |
50 |         syntax::Module::new(Rc::new(SourceCode::pretend_with_file_name(3, vec!["a", "c", "module.ff"]. "import d;")), vec![   // c
   |                                                                                                        ^^^^^^^^^^^
   Compiling semantic v0.1.3 (file:///C:/Users/fhan018/Any/Repos/fff-lang/semantic)
error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `.`
   --> src\statement\mod.rs:148:33
    |
148 |         let elseif_clauses: node.elseif_clauses.into_iter().map(|elseif|
    |                                 ^ expected one of 7 possible tokens here

error: expected one of `!`, `(`, `+`, `::`, `<`, `=`, `const`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `.`
   --> src\statement\mod.rs:148:33
    |
148 |         let elseif_clauses: node.elseif_clauses.into_iter().map(|elseif|
    |                                 ^ expected one of 14 possible tokens here

error: missing `fn`, `type`, or `const` for impl-item declaration
   --> src\statement\mod.rs:149:94
    |
149 |               let elseif_clause_scope = parent_scope.sub_with_span("else-if", elseif.all_span);
    |  ______________________________________________________________________________________________^
150 | |             ElseIfClause{
    | |____________^ missing `fn`, `type`, or `const`

error: expected one of `const`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `)`
   --> src\statement\mod.rs:155:9
    |
154 |             }
    |              - expected one of 8 possible tokens here
155 |         ).collect();
    |         ^ unexpected token

error: expected one of `const`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `let`
   --> src\statement\mod.rs:157:9
    |
155 |         ).collect();
    |                     - expected one of 8 possible tokens here
156 |
157 |         let else_clause = node.else_clause.map(|else_clause|
    |         ^^^ unexpected token

error: missing `fn`, `type`, or `const` for impl-item declaration
   --> src\statement\mod.rs:158:94
    |
158 |               let else_clause_scope = parent_scope.sub_with_span("else", else_clause.all_span);
    |  ______________________________________________________________________________________________^
159 | |             ElseClause{
    | |____________^ missing `fn`, `type`, or `const`

error: expected one of `const`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `)`
   --> src\statement\mod.rs:163:9
    |
162 |             }
    |              - expected one of 8 possible tokens here
163 |         );
    |         ^ unexpected token

error: missing `fn`, `type`, or `const` for impl-item declaration
   --> src\statement\mod.rs:163:11
    |
163 |           );
    |  ___________^
164 | |
165 | |         IfStatement{ if_clause, elseif_clauses, else_clause }
    | |________^ missing `fn`, `type`, or `const`

error: expected item, found `}`
   --> src\statement\mod.rs:167:1
    |
167 | }
    | ^

    error[E0425]: cannot find value `module` in this scope
  --> src\items\module.rs:56:67
   |
56 |                     FromSession::new_raw(self.this_scope.clone(), module.source.as_ref(), symbols).sub_with_symbol(import_stmt.name.value)
   |                                                                   ^^^^^^ did you mean `modules`?

error[E0425]: cannot find value `sources` in this scope
  --> src\items\module.rs:58:71
   |
58 |                 imported_module.buildup_imports(import_maps, modules, sources, symbols);
   |                                                                       ^^^^^^^ not found in this scope

error[E0061]: this function takes 3 parameters but 4 parameters were supplied
  --> src\items\module.rs:58:49
   |
46 | /     pub fn buildup_imports(&mut self, import_maps: &Vec<syntax::ImportMap>, modules: &mut Vec<syntax::Module>, symbols: &SymbolCollection) {
47 | |
48 | |         let module_id = self.module_id; // if use `self.module_id` in the for expr then rustc complains about mutably borrowed self in `&mut self.items`
... hope non lexical lifetime solve this
49 | |         for item in &mut self.items {
...  |
58 | |                 imported_module.buildup_imports(import_maps, modules, sources, symbols);
   | |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 3 parameters
...  |
61 | |         }
62 | |     }
   | |_____- defined here

error[E0599]: no method named `as_ref` found for type `messages::MessageCollection` in the current scope
  --> src\items\module.rs:89:105
   |
89 |         let package = Package::new(SyntaxTree::new_modules(vec![maybe_result.unwrap()], vec![]), source.as_ref(), &symbols);
   |                                                                                                         ^^^^^^

error[E0308]: mismatched types
  --> src\items\module.rs:89:115
   |
89 |         let package = Package::new(SyntaxTree::new_modules(vec![maybe_result.unwrap()], vec![]), source.as_ref(), &symbols);
   |                                                                                                                   ^^^^^^^^ types differ in mutability
   |
   = note: expected type `&mut codemap::SymbolCollection`
              found type `&codemap::SymbolCollection`

error[E0061]: this function takes 3 parameters but 4 parameters were supplied
  --> src\package.rs:28:37
   |
28 |           main_module.buildup_imports(&tree.import_maps, &mut tree.modules, sources, symbols);
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 3 parameters
   |
  ::: src\items\module.rs
   |
46 | /     pub fn buildup_imports(&mut self, import_maps: &Vec<syntax::ImportMap>, modules: &mut Vec<syntax::Module>, symbols: &SymbolCollection) {
47 | |
48 | |         let module_id = self.module_id; // if use `self.module_id` in the for expr then rustc complains about mutably borrowed self in `&mut self.items`
... hope non lexical lifetime solve this
49 | |         for item in &mut self.items {
...  |
61 | |         }
62 | |     }
   | |_____- defined here

error[E0061]: this function takes 3 parameters but 2 parameters were supplied
  --> src\package.rs:43:32
   |
21 | /     pub fn new(tree: syntax::SyntaxTree, sources: &SourceMap, symbols: &mut SymbolCollection) -> Package {
22 | |
23 | |         let mut tree = tree; // do not mut in parameter because I want to leave this driver beautiful
24 | |
...  |
32 | |         Package{ global_scope: global_sess.into_scope(), main_module }
33 | |     }
   | |_____- defined here
...
43 |       let package = Package::new(syntax::SyntaxTree::new_modules(vec![
   |  ________________________________^
44 | |         syntax::Module::new(Rc::new(SourceCode::pretend_with_file_name(0, vec!["main.ff"], "import a; import b;")), vec![
45 | |             syntax::Item::Import(syntax::ImportStatement::new_default(make_span!(0, 1, 1), syntax::SimpleName::new(make_id!(1), make_span!(0, 2, 2)))),
46 | |             syntax::Item::Import(syntax::ImportStatement::new_default(make_span!(0, 3, 3), syntax::SimpleName::new(make_id!(2), make_span!(0, 4, 4)))),
...  |
60 | |         syntax::ImportMap::new(3, make_id!(4), 4),
61 | |     ]), &make_symbols!["a", "b", "c", "d"]);
   | |__________________________________________^ expected 3 parameters
