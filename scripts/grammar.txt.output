
module = item*
   FIRST: IDENT, LABEL, LITERAL, `!`, `&`, `(`, `*`, `-`, `..`, `::`, `<`, `[`, `_`, `class`, `const`, `enum`, `false`, `fn`, `for`, `if`, `impl`, `loop`, `module`, `self`, `struct`, `true`, `type`, `use`, `var`, `while`, `{`, `~`
   FIRSTSUBSET: item
   FOLLOW: <dollar>

unit-expr = LPAREN RPAREN
   FIRST: `(`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: primary-expr

lit-expr = LITERAL
   FIRST: LITERAL
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: primary-expr

paren-expr = LPAREN expr RPAREN
   FIRST: `(`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: primary-expr

single-tuple-expr = LPAREN expr COMMA RPAREN
   FIRST: `(`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: primary-expr

tuple-expr-3 = COMMA expr
   FIRST: <epsilon>, `,`
   FOLLOW: `)`, `,`, `]`
   FOLLOWSUBSETFOLLOW: call-expr-postfix-2

tuple-expr = LPAREN expr tuple-expr-3* COMMA? RPAREN
   FIRST: `(`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: primary-expr

array-expr = LBRACKET expr tuple-expr-3* COMMA? RPAREN
   FIRST: `[`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: primary-expr

primary-expr = unit-expr | lit-expr | value-path | paren-expr | single-tuple-expr | tuple-expr | array-expr
   FIRST: IDENT, LITERAL, `(`, `::`, `<`, `[`, `_`, `false`, `self`, `true`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFIRST: expr-postfix
   FOLLOWSUBSETFOLLOW: postfix-expr

member-expr-postfix-3-4 = COMMA type-ref
   FIRST: <epsilon>, `,`
   FOLLOW: `)`, `,`, `>`
   FOLLOWSUBSETFOLLOW: tuple-type-2

member-expr-postfix-3 = COLONCOLON LT type-ref member-expr-postfix-3-4* COMMA? GT
   FIRST: <epsilon>, `::`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `)`, `*`, `+`, `,`, `-`, `..`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: member-expr-postfix

member-expr-postfix = DOT IDENT member-expr-postfix-3?
   FIRST: `.`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `)`, `*`, `+`, `,`, `-`, `..`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: expr-postfix

tuple-index-expr-postfix = DOT NUMBER
   FIRST: `.`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `)`, `*`, `+`, `,`, `-`, `..`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: expr-postfix

call-expr-postfix-2 = expr tuple-expr-3* COMMA?
   FIRST: <epsilon>, IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `..`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: expr
   FOLLOW: `)`, `]`

call-expr-postfix = LPAREN call-expr-postfix-2? RPAREN
   FIRST: `(`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `)`, `*`, `+`, `,`, `-`, `..`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: expr-postfix

array-index-expr-postfix = LBRACKET call-expr-postfix-2? RBRACKET
   FIRST: `[`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `)`, `*`, `+`, `,`, `-`, `..`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: expr-postfix

object-expr-postfix-2-4 = COMMA IDENT COLON expr
   FIRST: <epsilon>, `,`
   FOLLOW: `,`, `}`
   FOLLOWSUBSETFOLLOW: object-expr-postfix-2

object-expr-postfix-2 = IDENT COLON expr object-expr-postfix-2-4* COMMA?
   FIRST: <epsilon>, IDENT
   FOLLOW: `}`

object-expr-postfix = LBRACE object-expr-postfix-2? RBRACE
   FIRST: `{`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `)`, `*`, `+`, `,`, `-`, `..`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: expr-postfix

expr-postfix = member-expr-postfix | tuple-index-expr-postfix | call-expr-postfix | array-index-expr-postfix | object-expr-postfix
   FIRST: <epsilon>, `(`, `.`, `[`, `{`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `)`, `*`, `+`, `,`, `-`, `..`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: postfix-expr

postfix-expr = primary-expr expr-postfix*
   FIRST: IDENT, LITERAL, `(`, `::`, `<`, `[`, `_`, `false`, `self`, `true`
   FIRSTSUBSET: primary-expr
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `)`, `*`, `+`, `,`, `-`, `..`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: unary-expr

unary-expr-1 = NOT | AND | SUB | MUL | TILDE
   FIRST: <epsilon>, `!`, `&`, `*`, `-`, `~`
   FOLLOW: IDENT, LITERAL, `(`, `::`, `<`, `[`, `_`, `false`, `self`, `true`
   FOLLOWSUBSETFIRST: postfix-expr

unary-expr = unary-expr-1* postfix-expr
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: postfix-expr, unary-expr-1
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `)`, `*`, `+`, `,`, `-`, `..`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFIRST: multiplicative-expr-2
   FOLLOWSUBSETFOLLOW: multiplicative-expr, multiplicative-expr-2

multiplicative-expr-2-1 = REM | MUL | DIV
   FIRST: `%`, `*`, `/`
   FOLLOW: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FOLLOWSUBSETFIRST: unary-expr

multiplicative-expr-2 = multiplicative-expr-2-1 unary-expr
   FIRST: <epsilon>, `%`, `*`, `/`
   FIRSTSUBSET: multiplicative-expr-2-1
   FOLLOW: other-assign-expr, `!=`, `&&`, `&`, `)`, `+`, `,`, `-`, `..`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: multiplicative-expr

multiplicative-expr = unary-expr multiplicative-expr-2*
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: unary-expr
   FOLLOW: other-assign-expr, `!=`, `&&`, `&`, `)`, `+`, `,`, `-`, `..`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFIRST: additive-expr-2
   FOLLOWSUBSETFOLLOW: additive-expr, additive-expr-2

additive-expr-2-1 = ADD | SUB
   FIRST: `+`, `-`
   FOLLOW: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FOLLOWSUBSETFIRST: multiplicative-expr

additive-expr-2 = additive-expr-2-1 multiplicative-expr
   FIRST: <epsilon>, `+`, `-`
   FIRSTSUBSET: additive-expr-2-1
   FOLLOW: other-assign-expr, `!=`, `&&`, `&`, `)`, `,`, `..`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: additive-expr

additive-expr = multiplicative-expr additive-expr-2*
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: multiplicative-expr
   FOLLOW: other-assign-expr, `!=`, `&&`, `&`, `)`, `,`, `..`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFIRST: relational-expr-2
   FOLLOWSUBSETFOLLOW: relational-expr, relational-expr-2

relational-expr-2-1 = LT | GT | LTEQ | GTEQ
   FIRST: `<=`, `<`, `>=`, `>`
   FOLLOW: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FOLLOWSUBSETFIRST: additive-expr

relational-expr-2 = relational-expr-2-1 additive-expr
   FIRST: <epsilon>, `<=`, `<`, `>=`, `>`
   FIRSTSUBSET: relational-expr-2-1
   FOLLOW: other-assign-expr, `!=`, `&&`, `&`, `)`, `,`, `..`, `;`, `<<`, `==`, `=`, `>>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: relational-expr

relational-expr = additive-expr relational-expr-2*
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: additive-expr
   FOLLOW: other-assign-expr, `!=`, `&&`, `&`, `)`, `,`, `..`, `;`, `<<`, `==`, `=`, `>>`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFIRST: shift-expr-2
   FOLLOWSUBSETFOLLOW: shift-expr, shift-expr-2

shift-expr-2-1 = LTLT | GTGT
   FIRST: `<<`, `>>`
   FOLLOW: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FOLLOWSUBSETFIRST: relational-expr

shift-expr-2 = shift-expr-2-1 relational-expr
   FIRST: <epsilon>, `<<`, `>>`
   FIRSTSUBSET: shift-expr-2-1
   FOLLOW: other-assign-expr, `!=`, `&&`, `&`, `)`, `,`, `..`, `;`, `==`, `=`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: shift-expr

shift-expr = relational-expr shift-expr-2*
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: relational-expr
   FOLLOW: other-assign-expr, `!=`, `&&`, `&`, `)`, `,`, `..`, `;`, `==`, `=`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFIRST: bitand-expr-2
   FOLLOWSUBSETFOLLOW: bitand-expr, bitand-expr-2

bitand-expr-2 = AND shift-expr
   FIRST: <epsilon>, `&`
   FOLLOW: other-assign-expr, `!=`, `&&`, `)`, `,`, `..`, `;`, `==`, `=`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: bitand-expr

bitand-expr = shift-expr bitand-expr-2*
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: shift-expr
   FOLLOW: other-assign-expr, `!=`, `&&`, `)`, `,`, `..`, `;`, `==`, `=`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFIRST: bitxor-expr-2
   FOLLOWSUBSETFOLLOW: bitxor-expr, bitxor-expr-2

bitxor-expr-2 = CARET bitand-expr
   FIRST: <epsilon>, `^`
   FOLLOW: other-assign-expr, `!=`, `&&`, `)`, `,`, `..`, `;`, `==`, `=`, `]`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: bitxor-expr

bitxor-expr = bitand-expr bitxor-expr-2*
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: bitand-expr
   FOLLOW: other-assign-expr, `!=`, `&&`, `)`, `,`, `..`, `;`, `==`, `=`, `]`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFIRST: bitor-expr-2
   FOLLOWSUBSETFOLLOW: bitor-expr, bitor-expr-2

bitor-expr-2 = OR bitxor-expr
   FIRST: <epsilon>, `|`
   FOLLOW: other-assign-expr, `!=`, `&&`, `)`, `,`, `..`, `;`, `==`, `=`, `]`, `{`, `||`, `}`
   FOLLOWSUBSETFOLLOW: bitor-expr

bitor-expr = bitxor-expr bitor-expr-2*
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: bitxor-expr
   FOLLOW: other-assign-expr, `!=`, `&&`, `)`, `,`, `..`, `;`, `==`, `=`, `]`, `{`, `||`, `}`
   FOLLOWSUBSETFIRST: equality-expr-2
   FOLLOWSUBSETFOLLOW: equality-expr, equality-expr-2

equality-expr-2-1 = EQEQ | NOTEQ
   FIRST: `!=`, `==`
   FOLLOW: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FOLLOWSUBSETFIRST: bitor-expr

equality-expr-2 = equality-expr-2-1 bitor-expr
   FIRST: <epsilon>, `!=`, `==`
   FIRSTSUBSET: equality-expr-2-1
   FOLLOW: other-assign-expr, `&&`, `)`, `,`, `..`, `;`, `=`, `]`, `{`, `||`, `}`
   FOLLOWSUBSETFOLLOW: equality-expr

equality-expr = bitor-expr equality-expr-2*
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: bitor-expr
   FOLLOW: other-assign-expr, `&&`, `)`, `,`, `..`, `;`, `=`, `]`, `{`, `||`, `}`
   FOLLOWSUBSETFIRST: logical-and-expr-2
   FOLLOWSUBSETFOLLOW: logical-and-expr, logical-and-expr-2

logical-and-expr-2 = ANDAND equality-expr
   FIRST: <epsilon>, `&&`
   FOLLOW: other-assign-expr, `)`, `,`, `..`, `;`, `=`, `]`, `{`, `||`, `}`
   FOLLOWSUBSETFOLLOW: logical-and-expr

logical-and-expr = equality-expr logical-and-expr-2*
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: equality-expr
   FOLLOW: other-assign-expr, `)`, `,`, `..`, `;`, `=`, `]`, `{`, `||`, `}`
   FOLLOWSUBSETFIRST: logical-or-expr-2
   FOLLOWSUBSETFOLLOW: logical-or-expr, logical-or-expr-2

logical-or-expr-2 = OROR logical-and-expr
   FIRST: <epsilon>, `||`
   FOLLOW: other-assign-expr, `)`, `,`, `..`, `;`, `=`, `]`, `{`, `}`
   FOLLOWSUBSETFOLLOW: logical-or-expr

logical-or-expr = logical-and-expr logical-or-expr-2*
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: logical-and-expr
   FOLLOW: other-assign-expr, `)`, `,`, `..`, `;`, `=`, `]`, `{`, `}`
   FOLLOWSUBSETFOLLOW: binary-expr

binary-expr = logical-or-expr
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: logical-or-expr
   FOLLOW: other-assign-expr, `)`, `,`, `..`, `;`, `=`, `]`, `{`, `}`
   FOLLOWSUBSETFOLLOW: range-both-expr, range-right-expr

range-full-expr = DOTDOT
   FIRST: `..`
   FOLLOW: other-assign-expr, `)`, `,`, `;`, `=`, `]`, `{`, `}`
   FOLLOWSUBSETFOLLOW: range-expr

range-right-expr = DOTDOT binary-expr
   FIRST: `..`
   FOLLOW: other-assign-expr, `)`, `,`, `;`, `=`, `]`, `{`, `}`
   FOLLOWSUBSETFOLLOW: range-expr

range-left-expr = binary-expr DOTDOT
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: binary-expr
   FOLLOW: other-assign-expr, `)`, `,`, `;`, `=`, `]`, `{`, `}`
   FOLLOWSUBSETFOLLOW: range-expr

range-both-expr = binary-expr DOTDOT binary-expr
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: binary-expr
   FOLLOW: other-assign-expr, `)`, `,`, `;`, `=`, `]`, `{`, `}`
   FOLLOWSUBSETFOLLOW: range-expr

range-expr = range-full-expr | range-right-expr | range-left-expr | range-both-expr
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `..`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FOLLOW: other-assign-expr, `)`, `,`, `;`, `=`, `]`, `{`, `}`
   FOLLOWSUBSETFOLLOW: expr

expr = range-expr
   FIRST: <epsilon>, IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `..`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: range-expr
   FOLLOW: other-assign-expr, `)`, `,`, `;`, `=`, `]`, `{`, `}`
   FOLLOWSUBSETFIRST: assign-expr-stmt-2, block, object-expr-postfix-2-4, tuple-expr-3
   FOLLOWSUBSETFOLLOW: call-expr-postfix-2, enum-def-5-2, object-expr-postfix-2, object-expr-postfix-2-4, tuple-expr-3

primitive-type = BOOL | CHAR | F32 | F64 | I8 | I16 | I32 | I64 | I128 | U8 | U16 | U32 | U64 | U128
   FIRST: primitive-type
   FOLLOW: `)`, `+`, `,`, `;`, `=`, `>`, `as`, `for`, `where`, `{`, `}`
   FOLLOWSUBSETFOLLOW: enum-def-3, type-ref

array-type = LBRACKET type-ref SEMICOLON expr RBRACKET
   FIRST: `[`
   FOLLOW: `)`, `+`, `,`, `;`, `=`, `>`, `as`, `for`, `where`, `{`, `}`
   FOLLOWSUBSETFOLLOW: type-ref

fn-type-3-1 = IDENT COLON
   FIRST: <epsilon>, IDENT
   FOLLOW: primitive-type, IDENT, `&`, `(`, `::`, `<`, `[`, `_`, `false`, `fn`, `self`, `true`
   FOLLOWSUBSETFIRST: type-ref

fn-type-3-3 = COMMA fn-type-3-1? type-ref
   FIRST: <epsilon>, `,`
   FOLLOW: `)`, `,`
   FOLLOWSUBSETFOLLOW: fn-type-3

fn-type-3 = fn-type-3-1? type-ref fn-type-3-3* COMMA?
   FIRST: <epsilon>, primitive-type, IDENT, `&`, `(`, `::`, `<`, `[`, `_`, `false`, `fn`, `self`, `true`
   FIRSTSUBSET: fn-type-3-1, type-ref
   FOLLOW: `)`

fn-type-5 = SUBGT type-ref
   FIRST: <epsilon>, `->`
   FOLLOW: `)`, `,`, `;`, `>`, `where`, `{`
   FOLLOWSUBSETFIRST: fn-def-7, fn-def-8
   FOLLOWSUBSETFOLLOW: fn-type

fn-type = FN LPAREN fn-type-3? RPAREN fn-type-5?
   FIRST: `fn`
   FOLLOW: `)`, `,`, `;`, `>`
   FOLLOWSUBSETFOLLOW: type-ref

ref-type = AND type-ref
   FIRST: `&`
   FOLLOW: `)`, `,`, `;`, `>`, `where`, `{`
   FOLLOWSUBSETFOLLOW: type-ref

tuple-type-2 = type-ref member-expr-postfix-3-4* COMMA?
   FIRST: <epsilon>, primitive-type, IDENT, `&`, `(`, `::`, `<`, `[`, `_`, `false`, `fn`, `self`, `true`
   FIRSTSUBSET: type-ref
   FOLLOW: `)`

tuple-type = LPAREN tuple-type-2? RPAREN
   FIRST: `(`
   FOLLOW: `)`, `+`, `,`, `;`, `=`, `>`, `as`, `for`, `where`, `{`, `}`
   FOLLOWSUBSETFOLLOW: type-ref

type-ref = primitive-type | array-type | fn-type | ref-type | tuple-type | path
   FIRST: primitive-type, IDENT, `&`, `(`, `::`, `<`, `[`, `_`, `false`, `fn`, `self`, `true`
   FOLLOW: `)`, `+`, `,`, `;`, `=`, `>`, `as`, `for`, `where`, `{`, `}`
   FOLLOWSUBSETFIRST: fn-def-4-4, fn-def-7, fn-type-3-3, impl-block-4, member-expr-postfix-3-4, where-clause-4
   FOLLOWSUBSETFOLLOW: fn-def-4, fn-def-4-4, fn-type-3, fn-type-3-3, fn-type-5, impl-block-4, member-expr-postfix-3-4, ref-type, tuple-type-2, type-def-3, var-decl-stmt-3, where-clause, where-clause-4

simple-segment = IDENT | TRUE | FALSE | SELF_ | UNDERSCORE
   FIRST: IDENT, `_`, `false`, `self`, `true`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `::`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `as`, `for`, `where`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: path-segment, value-path-segment

generic-segment = IDENT COLONCOLON? LT type-ref member-expr-postfix-3-4* COMMA? GT
   FIRST: IDENT
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `::`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `as`, `for`, `where`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: path-segment

value-generic-segment = IDENT COLONCOLON LT type-ref member-expr-postfix-3-4* COMMA? GT
   FIRST: IDENT
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `::`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: value-path-segment

cast-segment = LT type-ref AS type-ref GT
   FIRST: `<`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `::`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `as`, `for`, `where`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: path-segment, value-path-segment

path-segment = simple-segment | generic-segment | cast-segment
   FIRST: IDENT, `<`, `_`, `false`, `self`, `true`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `::`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `as`, `for`, `where`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFIRST: path-3
   FOLLOWSUBSETFOLLOW: path, path-3

value-path-segment = simple-segment | value-generic-segment | cast-segment
   FIRST: IDENT, `<`, `_`, `false`, `self`, `true`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `::`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFIRST: path-3
   FOLLOWSUBSETFOLLOW: value-path

path-3 = COLONCOLON path-segment
   FIRST: <epsilon>, `::`
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `as`, `for`, `where`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: path, value-path

path = COLONCOLON? path-segment path-3*
   FIRST: IDENT, `::`, `<`, `_`, `false`, `self`, `true`
   FIRSTSUBSET: path-segment
   FOLLOW: `)`, `+`, `,`, `;`, `=`, `>`, `as`, `for`, `where`, `{`, `}`
   FOLLOWSUBSETFIRST: use-stmt-3
   FOLLOWSUBSETFOLLOW: type-ref

value-path = COLONCOLON? value-path-segment path-3*
   FIRST: IDENT, `::`, `<`, `_`, `false`, `self`, `true`
   FIRSTSUBSET: value-path-segment
   FOLLOW: other-assign-expr, `!=`, `%`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `-`, `..`, `.`, `/`, `;`, `<<`, `<=`, `<`, `==`, `=`, `>=`, `>>`, `>`, `[`, `]`, `^`, `{`, `|`, `||`, `}`
   FOLLOWSUBSETFOLLOW: primary-expr

label = LABEL COLON
   FIRST: <epsilon>, LABEL
   FOLLOW: `;`, `for`, `loop`, `while`, `{`
   FOLLOWSUBSETFIRST: block

generic-name-2-3 = COMMA IDENT
   FIRST: <epsilon>, `,`
   FOLLOW: `,`, `>`

generic-name-2 = LT IDENT generic-name-2-3* COMMA? GT
   FIRST: <epsilon>, `<`
   FOLLOW: primitive-type, IDENT, `&`, `(`, `::`, `;`, `<`, `=`, `[`, `_`, `false`, `fn`, `self`, `true`, `{`
   FOLLOWSUBSETFIRST: type-ref
   FOLLOWSUBSETFOLLOW: generic-name

generic-name = IDENT generic-name-2?
   FIRST: IDENT
   FOLLOW: `(`, `;`, `=`, `{`
   FOLLOWSUBSETFIRST: type-def-3

where-clause-4 = ADD type-ref
   FIRST: <epsilon>, `+`
   FOLLOW: `,`, `;`, `{`
   FOLLOWSUBSETFOLLOW: where-clause

where-clause = IDENT COLON type-ref where-clause-4*
   FIRST: IDENT
   FOLLOW: `,`, `;`, `{`
   FOLLOWSUBSETFIRST: fn-def-7-3
   FOLLOWSUBSETFOLLOW: fn-def-7, fn-def-7-3

block = LBRACE stmt* RBRACE
   FIRST: `{`
   FOLLOW: <dollar>, `else`, `}`
   FOLLOWSUBSETFIRST: if-stmt-4, if-stmt-5
   FOLLOWSUBSETFOLLOW: block-stmt, fn-def-8, for-stmt, if-stmt, if-stmt-4, if-stmt-5, loop-stmt, while-stmt

block-stmt = label? block
   FIRST: LABEL, `{`
   FIRSTSUBSET: block, label
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

break-stmt = BREAK label? SEMICOLON
   FIRST: `break`
   FOLLOW: `}`
   FOLLOWSUBSETFOLLOW: stmt

class-def = CLASS generic-name LBRACE item* RBRACE
   FIRST: `class`
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

continue-stmt = CONTINUE label? SEMICOLON
   FIRST: `continue`
   FOLLOW: `}`
   FOLLOWSUBSETFOLLOW: stmt

enum-def-3 = COLON primitive-type
   FIRST: <epsilon>, `:`
   FOLLOW: `{`

enum-def-5-2 = EQ expr
   FIRST: <epsilon>, `=`
   FOLLOW: `,`, `;`, `}`
   FOLLOWSUBSETFIRST: enum-def-5-3
   FOLLOWSUBSETFOLLOW: enum-def-5, enum-def-5-3

enum-def-5-3 = COMMA IDENT enum-def-5-2?
   FIRST: <epsilon>, `,`
   FOLLOW: `,`, `}`
   FOLLOWSUBSETFOLLOW: enum-def-5

enum-def-5 = IDENT enum-def-5-2? enum-def-5-3* COMMA?
   FIRST: <epsilon>, IDENT
   FOLLOW: `}`

enum-def = ENUM IDENT enum-def-3? LBRACE enum-def-5? RBRACE
   FIRST: `enum`
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

simple-expr-stmt = expr SEMICOLON
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `..`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: expr
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

assign-expr-stmt-2 = EQ | REMEQ | ANDEQ | MULEQ | ADDEQ | SUBEQ | DIVEQ | CARETEQ | OREQ | LTLTEQ | GTGTEQ
   FIRST: other-assign-expr, `=`
   FOLLOW: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `..`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FOLLOWSUBSETFIRST: expr

assign-expr-stmt = expr assign-expr-stmt-2 expr SEMICOLON
   FIRST: IDENT, LITERAL, `!`, `&`, `(`, `*`, `-`, `..`, `::`, `<`, `[`, `_`, `false`, `self`, `true`, `~`
   FIRSTSUBSET: expr
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

fn-def-4-4 = COMMA IDENT COLON type-ref
   FIRST: <epsilon>, `,`
   FOLLOW: `)`, `,`, `}`
   FOLLOWSUBSETFOLLOW: fn-def-4

fn-def-4 = IDENT COLON type-ref fn-def-4-4* COMMA?
   FIRST: <epsilon>, IDENT
   FOLLOW: `)`, `}`

fn-def-7-3 = COMMA where-clause
   FIRST: <epsilon>, `,`
   FOLLOW: `,`, `;`, `{`
   FOLLOWSUBSETFOLLOW: fn-def-7

fn-def-7 = WHERE where-clause fn-def-7-3* COMMA?
   FIRST: <epsilon>, `where`
   FOLLOW: `;`, `{`
   FOLLOWSUBSETFIRST: fn-def-8

fn-def-8 = block | SEMICOLON
   FIRST: `;`, `{`
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: fn-def

fn-def = FN generic-name LPAREN fn-def-4? RPAREN fn-type-5? fn-def-7? fn-def-8
   FIRST: `fn`
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

for-stmt = label? FOR IDENT IN expr block
   FIRST: LABEL, `for`
   FIRSTSUBSET: label
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

if-stmt-4 = ELSE IF expr block
   FIRST: <epsilon>, `else`
   FOLLOW: <dollar>, `else`, `}`
   FOLLOWSUBSETFIRST: if-stmt-5
   FOLLOWSUBSETFOLLOW: if-stmt

if-stmt-5 = ELSE block
   FIRST: <epsilon>, `else`
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: if-stmt

if-stmt = IF expr block if-stmt-4* if-stmt-5?
   FIRST: `if`
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

impl-block-4 = FOR type-ref
   FIRST: <epsilon>, `for`
   FOLLOW: `where`, `{`
   FOLLOWSUBSETFIRST: fn-def-7

impl-block = IMPL generic-name-2? type-ref impl-block-4? fn-def-7? LBRACE item* RBRACE
   FIRST: `impl`
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

loop-stmt = label? LOOP block
   FIRST: LABEL, `loop`
   FIRSTSUBSET: label
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

module-stmt = MODULE IDENT LITERAL? SEMICOLON
   FIRST: `module`
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item

ret-stmt = RETURN expr? SEMICOLON
   FIRST: `return`
   FOLLOW: `}`
   FOLLOWSUBSETFOLLOW: stmt

struct-def = STRUCT generic-name LBRACE fn-def-4? RBRACE
   FIRST: `struct`
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

type-def-3 = EQ type-ref
   FIRST: <epsilon>, `=`
   FOLLOW: `;`

type-def = TYPE generic-name type-def-3? SEMICOLON
   FIRST: `type`
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

use-stmt-3 = AS IDENT
   FIRST: <epsilon>, `as`
   FOLLOW: `;`

use-stmt = USE path use-stmt-3? SEMICOLON
   FIRST: `use`
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

var-decl-stmt-1 = CONST | VAR
   FIRST: `const`, `var`
   FOLLOW: IDENT

var-decl-stmt-3 = COLON type-ref
   FIRST: <epsilon>, `:`
   FOLLOW: `;`, `=`
   FOLLOWSUBSETFIRST: enum-def-5-2

var-decl-stmt = var-decl-stmt-1 IDENT var-decl-stmt-3? enum-def-5-2? SEMICOLON
   FIRST: `const`, `var`
   FIRSTSUBSET: var-decl-stmt-1
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

while-stmt = label? WHILE expr block
   FIRST: LABEL, `while`
   FIRSTSUBSET: label
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: item, stmt

stmt = struct-def | enum-def | fn-def | impl-block | type-def | class-def | block-stmt | break-stmt | continue-stmt | simple-expr-stmt | assign-expr-stmt | for-stmt | if-stmt | loop-stmt | ret-stmt | var-decl-stmt | while-stmt | use-stmt
   FIRST: <epsilon>, IDENT, LABEL, LITERAL, `!`, `&`, `(`, `*`, `-`, `..`, `::`, `<`, `[`, `_`, `break`, `class`, `const`, `continue`, `enum`, `false`, `fn`, `for`, `if`, `impl`, `loop`, `return`, `self`, `struct`, `true`, `type`, `use`, `var`, `while`, `{`, `~`
   FOLLOW: `}`

item = struct-def | enum-def | fn-def | impl-block | type-def | class-def | block-stmt | simple-expr-stmt | assign-expr-stmt | for-stmt | if-stmt | loop-stmt | var-decl-stmt | while-stmt | use-stmt | module-stmt
   FIRST: <epsilon>, IDENT, LABEL, LITERAL, `!`, `&`, `(`, `*`, `-`, `..`, `::`, `<`, `[`, `_`, `class`, `const`, `enum`, `false`, `fn`, `for`, `if`, `impl`, `loop`, `module`, `self`, `struct`, `true`, `type`, `use`, `var`, `while`, `{`, `~`
   FOLLOW: <dollar>, `}`
   FOLLOWSUBSETFOLLOW: module
