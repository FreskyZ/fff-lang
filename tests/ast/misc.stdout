[all(149)] 3516
[lit-expr(17)] 544 (15.47%)
[var-decl-stmt(10)] 400 (11.38%)
[path(23)] 368 (10.47%)
[simple-segment(21)] 252 (7.17%)
[binary-expr(7)] 252 (7.17%)
[fn-def(5)] 240 (6.83%)
[call-expr(7)] 224 (6.37%)
[block(13)] 208 (5.92%)
[generic-name(5)] 180 (5.12%)
[fn-def-parameter(5)] 140 (3.98%)
[primitive-type(10)] 120 (3.41%)
[assign-expr-stmt(3)] 108 (3.07%)
[while-stmt(2)] 64 (1.82%)
[loop-stmt(2)] 48 (1.37%)
[generic-segment(2)] 48 (1.37%)
[for-stmt(1)] 44 (1.25%)
[break-stmt(2)] 40 (1.14%)
[type-list(2)] 32 (0.91%)
[simple-expr-stmt(2)] 32 (0.91%)
[ret-stmt(2)] 32 (0.91%)
[if-stmt(1)] 24 (0.68%)
[block-stmt(1)] 24 (0.68%)
[if-clause(1)] 20 (0.57%)
[ref-type(1)] 16 (0.46%)
[paren-expr(1)] 16 (0.46%)
[array-expr(1)] 16 (0.46%)
[module(1)] 12 (0.34%)
[else-clause(1)] 12 (0.34%)
module tests/ast/misc.f3
  fn-def <1:1-3:1> () <1:7-1:22>
    generic-name <1:4-1:6> fn1 <1:4-1:6>
    fn-def-parameter <1:8-1:13> a <1:8-1:8>
      primitive-type u32 <1:11-1:13>
    fn-def-parameter <1:16-1:21> b <1:16-1:16>
      primitive-type u32 <1:19-1:21>
    primitive-type u32 <1:27-1:29>
    block <1:31-3:1>
      ret-stmt <2:5-2:17>
        binary-expr <2:12-2:16> + <2:14-2:14>
          path <2:12-2:12>
            segment <2:12-2:12> a
          path <2:16-2:16>
            segment <2:16-2:16> b
  fn-def <4:1-12:1> () <4:8-4:33>
    generic-name <4:4-4:7> main <4:4-4:7>
    fn-def-parameter <4:9-4:17> argc <4:9-4:12>
      primitive-type u32 <4:15-4:17>
    fn-def-parameter <4:20-4:32> argv <4:20-4:23>
      ref-type <4:26-4:32>
        path <4:27-4:32>
          segment <4:27-4:32> string
    primitive-type u32 <4:38-4:40>
    block <4:42-12:1>
      var-decl-stmt <5:5-5:19> mutable i <5:9-5:9>
        primitive-type u32 <5:12-5:14>
        lit-expr i32 1 <5:18-5:18>
      while-stmt <6:5-10:5>
        paren-expr <6:10-6:17>
          binary-expr <6:11-6:16> != <6:13-6:14>
            path <6:11-6:11>
              segment <6:11-6:11> i
            lit-expr i32 0 <6:16-6:16>
        block <6:19-10:5>
          var-decl-stmt <7:9-7:29> const a <7:15-7:15>
            call-expr <7:19-7:28> () <7:27-7:28>
              path <7:19-7:26>
                segment <7:19-7:26> read_u32
          var-decl-stmt <8:9-8:34> const b <8:15-8:15>
            primitive-type u32 <8:18-8:20>
            call-expr <8:24-8:33> () <8:32-8:33>
              path <8:24-8:31>
                segment <8:24-8:31> read_u32
          simple-expr-stmt <9:9-9:27>
            call-expr <9:9-9:26> () <9:16-9:26>
              path <9:9-9:15>
                segment <9:9-9:15> println
              call-expr <9:17-9:25> () <9:20-9:25>
                path <9:17-9:19>
                  segment <9:17-9:19> fn1
                path <9:21-9:21>
                  segment <9:21-9:21> a
                path <9:24-9:24>
                  segment <9:24-9:24> b
      ret-stmt <11:5-11:13>
        lit-expr i32 0 <11:12-11:12>
  fn-def <15:1-22:1> () <15:8-15:9>
    generic-name <15:4-15:7> main <15:4-15:7>
    block <15:11-22:1>
      var-decl-stmt <16:5-16:14> mutable a <16:9-16:9>
        lit-expr i32 0 <16:13-16:13>
      block-stmt <17:5-20:5>
        block <17:5-20:5>
          var-decl-stmt <18:9-18:18> mutable b <18:13-18:13>
            lit-expr i32 0 <18:17-18:17>
          var-decl-stmt <19:9-19:22> mutable a <19:13-19:13>
            primitive-type i32 <19:15-19:17>
            lit-expr i32 0 <19:21-19:21>
      var-decl-stmt <21:5-21:18> mutable c <21:9-21:9>
        binary-expr <21:13-21:17> + <21:15-21:15>
          path <21:13-21:13>
            segment <21:13-21:13> a
          path <21:17-21:17>
            segment <21:17-21:17> b
  fn-def <25:1-39:1> () <25:8-25:15>
    generic-name <25:4-25:7> main <25:4-25:7>
    fn-def-parameter <25:9-25:14> b <25:9-25:9>
      primitive-type u32 <25:12-25:14>
    block <25:17-39:1>
      var-decl-stmt <26:5-26:28> const a <26:11-26:11>
        call-expr <26:15-26:27> () <26:26-26:27>
          path <26:15-26:25>
            generic-segment <26:15-26:25> read <26:15-26:18>
              primitive-type i32 <26:22-26:24>
      loop-stmt <27:5-38:5> @abc <27:5-27:8>
        block <27:16-38:5>
          var-decl-stmt <28:9-28:18> mutable b <28:13-28:13>
            lit-expr i32 0 <28:17-28:17>
          loop-stmt <29:9-37:9> @def <29:9-29:12>
            block <29:20-37:9>
              if-stmt <30:13-36:13>
                if-clause <30:13-33:13>
                  binary-expr <30:16-30:21> == <30:18-30:19>
                    path <30:16-30:16>
                      segment <30:16-30:16> a
                    lit-expr i32 0 <30:21-30:21>
                  block <30:23-33:13>
                    assign-expr-stmt <31:17-31:23> += <31:19-31:20>
                      path <31:17-31:17>
                        segment <31:17-31:17> a
                      lit-expr i32 1 <31:22-31:22>
                    break-stmt <32:17-32:27> @def <32:23-32:26>
                else-clause <33:15-36:13>
                  block <33:20-36:13>
                    assign-expr-stmt <34:17-34:23> += <34:19-34:20>
                      path <34:17-34:17>
                        segment <34:17-34:17> b
                      lit-expr i32 1 <34:22-34:22>
                    break-stmt <35:17-35:27> @abc <35:23-35:26>
  fn-def <42:1-50:1> () <42:8-42:9>
    generic-name <42:4-42:7> main <42:4-42:7>
    block <42:11-50:1>
      var-decl-stmt <43:5-43:28> const a <43:11-43:11>
        call-expr <43:15-43:27> () <43:26-43:27>
          path <43:15-43:25>
            generic-segment <43:15-43:25> read <43:15-43:18>
              path <43:22-43:24>
                segment <43:22-43:24> i33
      while-stmt <44:5-49:5>
        binary-expr <44:11-44:16> != <44:13-44:14>
          path <44:11-44:11>
            segment <44:11-44:11> a
          lit-expr i32 0 <44:16-44:16>
        block <44:18-49:5>
          for-stmt <45:9-47:9> iter-var i <45:13-45:13>
            array-expr <45:18-45:33>
              lit-expr i32 0 <45:19-45:19>
              lit-expr i32 1 <45:22-45:22>
              lit-expr i32 2 <45:25-45:25>
              binary-expr <45:28-45:32> + <45:30-45:30>
                path <45:28-45:28>
                  segment <45:28-45:28> a
                lit-expr i32 1 <45:32-45:32>
            block <45:35-47:9>
              simple-expr-stmt <46:13-46:31>
                call-expr <46:13-46:30> () <46:20-46:30>
                  path <46:13-46:19>
                    segment <46:13-46:19> writeln
                  binary-expr <46:21-46:29> + <46:27-46:27>
                    lit-expr str "zmj" <46:21-46:25>
                    path <46:29-46:29>
                      segment <46:29-46:29> i
          assign-expr-stmt <48:9-48:15> -= <48:11-48:12>
            path <48:9-48:9>
              segment <48:9-48:9> a
            lit-expr i32 1 <48:14-48:14>
