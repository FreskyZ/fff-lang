tests/ast/gcd.f3
                  total size 16988 > 2816
  [path-segment(simple)(22)] 4928 (29.01%) > 88 (3.12%)
            [expr(path)(22)] 1760 (10.36%) > 176 (6.25%)
               [stmt(if)(3)] 984 (5.79%) > 24 (0.85%)
              [stmt(ret)(3)] 984 (5.79%) > 24 (0.85%)
          [expr(binary)(11)] 880 (5.18%) > 88 (3.12%)
            [expr(call)(10)] 800 (4.71%) > 80 (2.84%)
                  [path(44)] 704 (4.14%) > 352 (12.50%)
         [stmt(var-decl)(2)] 656 (3.86%) > 16 (0.57%)
      [stmt(simple-expr)(2)] 656 (3.86%) > 16 (0.57%)
               [item(fn)(2)] 656 (3.86%) > 16 (0.57%)
              [expr(lit)(7)] 560 (3.30%) > 56 (1.99%)
           [binary-expr(55)] 363 (2.14%) > 275 (9.77%)
             [stmt(loop)(1)] 328 (1.93%) > 8 (0.28%)
            [stmt(break)(1)] 328 (1.93%) > 8 (0.28%)
    [type-ref(primitive)(3)] 312 (1.84%) > 24 (0.85%)
   [path-segment-simple(22)] 264 (1.55%) > 264 (9.38%)
             [expr-list(10)] 240 (1.41%) > 72 (2.56%)
           [expr(member)(3)] 240 (1.41%) > 24 (0.85%)
             [call-expr(40)] 240 (1.41%) > 240 (8.52%)
                 [block(14)] 224 (1.32%) > 132 (4.69%)
              [lit-expr(14)] 224 (1.32%) > 224 (7.95%)
                [fn-def(14)] 128 (0.75%) > 80 (2.84%)
           [member-expr(15)] 108 (0.64%) > 108 (3.84%)
           [generic-name(8)] 104 (0.61%) > 64 (2.27%)
               [if-stmt(12)] 96 (0.57%) > 60 (2.13%)
              [var-decl(10)] 42 (0.25%) > 58 (2.06%)
       [fn-def-parameter(6)] 40 (0.24%) > 48 (1.70%)
         [primitive-type(6)] 27 (0.16%) > 27 (0.96%)
              [if-clause(9)] 24 (0.14%) > 48 (1.70%)
               [ret-stmt(6)] 24 (0.14%) > 36 (1.28%)
             [break-stmt(2)] 20 (0.12%) > 20 (0.71%)
              [loop-stmt(3)] 20 (0.12%) > 24 (0.85%)
       [simple-expr-stmt(4)] 16 (0.09%) > 24 (0.85%)
            [else-clause(2)] 8 (0.05%) > 12 (0.43%)
tests/ast/generic.f3
                  total size 85163 > 13919
 [path-segment(simple)(131)] 29344 (34.46%) > 524 (3.76%)
            [expr(path)(90)] 7200 (8.45%) > 720 (5.17%)
        [type-ref(path)(48)] 4992 (5.86%) > 384 (2.76%)
                 [path(278)] 4448 (5.22%) > 2240 (16.09%)
     [stmt(assign-expr)(11)] 3608 (4.24%) > 88 (0.63%)
 [path-segment(generic)(12)] 2688 (3.16%) > 48 (0.34%)
      [stmt(simple-expr)(7)] 2296 (2.70%) > 56 (0.40%)
         [stmt(var-decl)(5)] 1640 (1.93%) > 40 (0.29%)
              [stmt(ret)(5)] 1640 (1.93%) > 40 (0.29%)
  [path-segment-simple(131)] 1572 (1.85%) > 1572 (11.29%)
         [type-ref(ref)(14)] 1456 (1.71%) > 112 (0.80%)
           [item(struct)(4)] 1312 (1.54%) > 32 (0.23%)
              [stmt(for)(4)] 1312 (1.54%) > 32 (0.23%)
               [stmt(if)(4)] 1312 (1.54%) > 32 (0.23%)
   [type-ref(primitive)(12)] 1248 (1.47%) > 96 (0.69%)
             [expr(lit)(15)] 1200 (1.41%) > 120 (0.86%)
     [expr(array-index)(15)] 1200 (1.41%) > 120 (0.86%)
          [expr(binary)(14)] 1120 (1.32%) > 112 (0.80%)
          [generic-name(76)] 988 (1.16%) > 664 (4.77%)
            [item(class)(3)] 984 (1.16%) > 24 (0.17%)
               [stmt(fn)(3)] 984 (1.16%) > 24 (0.17%)
               [item(fn)(3)] 984 (1.16%) > 24 (0.17%)
            [expr(call)(12)] 960 (1.13%) > 96 (0.69%)
                [fn-def(77)] 704 (0.83%) > 508 (3.65%)
            [stmt(while)(2)] 656 (0.77%) > 16 (0.11%)
             [expr-list(27)] 648 (0.76%) > 260 (1.87%)
                 [block(40)] 640 (0.75%) > 416 (2.99%)
              [lit-expr(30)] 480 (0.56%) > 480 (3.45%)
      [fn-def-parameter(72)] 480 (0.56%) > 576 (4.14%)
           [binary-expr(70)] 462 (0.54%) > 350 (2.51%)
           [type-ref(fn)(4)] 416 (0.49%) > 32 (0.23%)
           [expr(member)(5)] 400 (0.47%) > 40 (0.29%)
             [type-list(24)] 384 (0.45%) > 192 (1.38%)
      [array-index-expr(60)] 360 (0.42%) > 360 (2.59%)
             [item(enum)(1)] 328 (0.39%) > 8 (0.06%)
             [stmt(loop)(1)] 328 (0.39%) > 8 (0.06%)
              [stmt(use)(1)] 328 (0.39%) > 8 (0.06%)
            [stmt(break)(1)] 328 (0.39%) > 8 (0.06%)
             [call-expr(48)] 288 (0.34%) > 288 (2.07%)
     [generic-parameter(28)] 280 (0.33%) > 280 (2.01%)
  [path-segment-generic(36)] 240 (0.28%) > 288 (2.07%)
              [ref-type(28)] 224 (0.26%) > 168 (1.21%)
             [field-def(32)] 224 (0.26%) > 256 (1.84%)
               [fn-type(16)] 192 (0.23%) > 132 (0.95%)
             [class-def(15)] 192 (0.23%) > 108 (0.78%)
      [assign-expr-stmt(55)] 187 (0.22%) > 275 (1.98%)
           [member-expr(25)] 180 (0.21%) > 180 (1.29%)
          [where-clause(12)] 176 (0.21%) > 112 (0.80%)
       [expr(range-both)(2)] 160 (0.19%) > 16 (0.11%)
              [for-stmt(20)] 128 (0.15%) > 160 (1.15%)
               [if-stmt(16)] 128 (0.15%) > 80 (0.57%)
            [struct-def(12)] 128 (0.15%) > 96 (0.69%)
        [primitive-type(24)] 108 (0.13%) > 108 (0.78%)
              [var-decl(25)] 105 (0.12%) > 145 (1.04%)
     [fn-type-parameter(15)] 100 (0.12%) > 120 (0.86%)
            [expr(unary)(1)] 80 (0.09%) > 8 (0.06%)
           [expr(object)(1)] 80 (0.09%) > 8 (0.06%)
        [range-both-expr(8)] 64 (0.08%) > 48 (0.34%)
       [enum-def-variant(9)] 60 (0.07%) > 72 (0.52%)
      [simple-expr-stmt(14)] 56 (0.07%) > 84 (0.60%)
               [enum-def(5)] 52 (0.06%) > 48 (0.34%)
            [object-expr(4)] 48 (0.06%) > 32 (0.23%)
             [while-stmt(8)] 40 (0.05%) > 56 (0.40%)
              [ret-stmt(10)] 40 (0.05%) > 60 (0.43%)
      [object-expr-field(6)] 40 (0.05%) > 48 (0.34%)
             [if-clause(12)] 32 (0.04%) > 64 (0.46%)
             [unary-expr(4)] 25 (0.03%) > 21 (0.15%)
               [use-stmt(3)] 20 (0.02%) > 24 (0.17%)
             [break-stmt(2)] 20 (0.02%) > 20 (0.14%)
              [loop-stmt(3)] 20 (0.02%) > 24 (0.17%)
               [type-def(3)] 8 (0.01%) > 16 (0.11%)
            [else-clause(2)] 8 (0.01%) > 12 (0.09%)
tests/ast/hello.f3
                  total size 924 > 140
      [item(simple-expr)(1)] 328 (35.50%) > 8 (5.71%)
   [path-segment(simple)(1)] 224 (24.24%) > 4 (2.86%)
             [expr(call)(1)] 80 (8.66%) > 8 (5.71%)
             [expr(path)(1)] 80 (8.66%) > 8 (5.71%)
              [expr(lit)(1)] 80 (8.66%) > 8 (5.71%)
               [lit-expr(2)] 32 (3.46%) > 32 (22.86%)
                   [path(2)] 32 (3.46%) > 16 (11.43%)
              [call-expr(4)] 24 (2.60%) > 24 (17.14%)
              [expr-list(1)] 24 (2.60%) > 8 (5.71%)
    [path-segment-simple(1)] 12 (1.30%) > 12 (8.57%)
       [simple-expr-stmt(2)] 8 (0.87%) > 12 (8.57%)
tests/ast/hugetype.f3
error: Invalid numeric literal, integral overflow
 --> tests/ast/hugetype.f3:2:83
  |
2 | [櫟; 0o26544323043442]>::_ksGOfoqc::n诐::kj3c,>::dGyp24j<M覚漞uF0銊a, GMwB駯::mowB<[n6; 0x164c043u8], &u64, 
  |                                                                                   ^^^^^^^^^^^ 
  = help: Max value of u8 is 255

error: Invalid numeric literal, numeric literal should not start with 0
 --> tests/ast/hugetype.f3:7:66
  |
7 | 芹jD, u16>::j8rGKNr, eMmAhI1E::Km韈疓H67<leHK1wui, [Nms畻14; 4], [n; 023r64], i43<i8, f64,>::wIoNrrxle::aca5vh::F<u8,
  |                                                                  ^^^^^^ 
  = help: If you mean C style octal numeric literal, use `0o777` syntax

error: empty type list
 --> tests/ast/hugetype.f3:8:113
  |
8 | i8, i33>::g6p4C::s瓶FOCaFH, uGt8hskBm<u16, i64, string>::gE2hwi<string, f32,>::CK212F::Csu8a::f6N>::i5h::Dudt6Gd楑<>>,
  |                                                                                                                 ^^ 

error: Invalid numeric literal, numeric literal should not start with 0
 --> tests/ast/hugetype.f3:9:87
  |
9 | ojOh, (G4dMu4, [F; 0xBAe7E], EunGe3O)>::nx6Ks2N::k1Jt_b::sc::FDl6ONf<(), qBJNbI_<[c溏; 086i32], (v4a<u32, char, 
  |                                                                                       ^^^^^^ 
  = help: If you mean C style octal numeric literal, use `0o777` syntax

error: empty type list
  --> tests/ast/hugetype.f3:12:99
   |
12 | [uDhnpmfw; 41]), CGDtB<[mm娇甌I; 0xDd2d4], mjmD4p727<bool, f32, u8>::tuMt::e, n::檟Oc07::lxHNyu8O::Jm<>::DGB0::pOxC>::L6JNDq<fn(f32, 
   |                                                                                                   ^^ 

error: Invalid numeric literal, integral overflow
  --> tests/ast/hugetype.f3:14:25
   |
14 | bool,>, u32, f64>, [Gg; 0o1565261i8]>::N3x12akl::uax<揪x4<bFEGDldf::G1蹀0Lv87<char, i64, f32>, &bool, (u8, u64, i33), 
   |                         ^^^^^^^^^^^ 
   = help: Max value of i8 is 127

error: empty type list
  --> tests/ast/hugetype.f3:15:73
   |
15 | KqJfs::kNyJ0::_OGo<u32, f32, u64>::Ohwlco>::ibOlvh蹫jB::D檤spvwm::xaFN_KOg<>, &NaC<char, i64, string>::fk::Iw4EB<i64, 
   |                                                                         ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:16:24
   |
16 | i33, u8, u16>, A靯k萯::_H<>>::LD7njk80>,>::My_愇2::uooO::IIrCK1Jcu<(fn(fn(胣fm沂w::_6::gH0C1<bool, f64, u8>::L, [_狆Fvf; 
   |                        ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:20:16
   |
20 | &&u32>::v7be5媜e<>::lH_jCa51<hlvCb15, [骨88a2yEBE; 2544], [NB7BLb; 530003]>), CM8c飁id<[g1KnjC; 62464562], (lee蝠cpj, 
   |                ^^ 

error: Invalid numeric literal, numeric literal should not start with 0
  --> tests/ast/hugetype.f3:21:38
   |
21 | [EFmFr霠; 87452686r32], y4ur<[kmm馭tJ; 012], &i33, C4K>::MelL8syta::kB5鱏qs), [G; 3534.87641235E-377], LK魲C2D::mgq::ImKms::v_禤1ut<&G7ajwc4,
   |                                      ^^^ 
   = help: If you mean C style octal numeric literal, use `0o777` syntax

error: Invalid numeric literal, floating point underflow
  --> tests/ast/hugetype.f3:21:80
   |
21 | [EFmFr霠; 87452686r32], y4ur<[kmm馭tJ; 012], &i33, C4K>::MelL8syta::kB5鱏qs), [G; 3534.87641235E-377], LK魲C2D::mgq::ImKms::v_禤1ut<&G7ajwc4,
   |                                                                                ^^^^^^^^^^^^^^^^^^ 
   = help: It is a double precision floating point literal and positive min value is about 2.2250738585072014E-308

error: empty type list
  --> tests/ast/hugetype.f3:22:64
   |
22 | ot4, [m0NngfH; 0b110]>::o::mOgF3F>::甍qr閇s恀<::BuqoFali::EE6t7OqG<>::n3rq7ALB<ckFj, 狇Jii潫6bvN<&u32, (i8, f64, u64), oBE1GAC, 
   |                                                                ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:24:131
   |
24 | u16, char, i16>::loHgD<f32, i16, i64, i16, i8>::B, (char, i16, f32)>::E檩E嘣H, [D63gE晤kJ; 65671.70030055E+116r64], 蟧bFembG0<xcb::hqO<>::善::yrj4hkbe<玽Iy砉6::_uJ0e::C澞y<u16, 
   |                                                                                                                                   ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:26:84
   |
26 | char,>::oywl<rHbhBy輈, &i33, [qf7櫍5gv; 0x2ab086u32], H>::Oosfypj<i64, ::EJ::Nr::LJC臧<>::N8::xCL5c, (f64, string,)>::Lfb>::Ox>, ::k梷u黸w4p<>, 
   |                                                                                    ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:26:136
   |
26 | char,>::oywl<rHbhBy輈, &i33, [qf7櫍5gv; 0x2ab086u32], H>::Oosfypj<i64, ::EJ::Nr::LJC臧<>::N8::xCL5c, (f64, string,)>::Lfb>::Ox>, ::k梷u黸w4p<>, 
   |                                                                                                                                        ^^ 

error: Invalid numeric literal, Exponent not allowed in integral literal
  --> tests/ast/hugetype.f3:30:1
   |
30 | 0xe7258847i16]), sl::k8O<&char, OHph<u64, i33,>::NNGbwuwi<u64, u64, u8, i33>::DEHud, [O; 0b11011110000011011u8]>::Cbhqv鮅27A<(bool, 
   | ^^^^^^^^^^^^^ 

error: Invalid numeric literal, integral overflow
  --> tests/ast/hugetype.f3:30:90
   |
30 | 0xe7258847i16]), sl::k8O<&char, OHph<u64, i33,>::NNGbwuwi<u64, u64, u8, i33>::DEHud, [O; 0b11011110000011011u8]>::Cbhqv鮅27A<(bool, 
   |                                                                                          ^^^^^^^^^^^^^^^^^^^^^ 
   = help: Max value of u8 is 255

error: Invalid numeric literal, integral overflow
  --> tests/ast/hugetype.f3:31:22
   |
31 | i8, u64), i64, [etb; 0o66311346u8]>, m2_F奵n::Kmqvvob藍l<(u16, i33, u64), (string, i33, u32), A>, 孱knAH::JB褼<fn(曊Ap: f32, i64, 
   |                      ^^^^^^^^^^^^ 
   = help: Max value of u8 is 255

error: empty type list
  --> tests/ast/hugetype.f3:34:20
   |
34 | u64,)>::vl<Eia忚0O2M<>::N1N::_bBy6fI髳4, dogCa1,>), jlMybkA, t<(h::GxGJoogC<bool, f32, i64>::mH_p坍kl::st::iE<bool, u8, string, u16, 
   |                    ^^ 

error: Invalid numeric literal, integral overflow
  --> tests/ast/hugetype.f3:35:45
   |
35 | u32>::葁I2E1q<u64, char, f64, bool>, [qAm5x; 0x5d474b5i8], r8sK<f32, string, i8>::qOemFG燫Bc<u8, bool, bool>::EqwNECsA<i33, u8, 
   |                                             ^^^^^^^^^^^ 
   = help: Max value of i8 is 127

error: Invalid numeric literal, integral overflow
  --> tests/ast/hugetype.f3:36:39
   |
36 | i64>::坞bbCBI3<i64, f32, f32>, [oyAin; 18661568i8], [k遙bL; 84445884]), (::bF5r<char, f32, u8>, s::妲43_pnI::EHllb<char, i16,>, (bool, 
   |                                       ^^^^^^^^^^ 
   = help: Max value of i8 is 127

error: Invalid numeric literal, integral overflow
  --> tests/ast/hugetype.f3:37:75
   |
37 | i64, u16), uicwHu::vH), [lw4祕jFor; 5121]>::堮1AC殇戔<[Cv殦5; 6r64], [姙hErI逄E; 0d401712i16], [蹞; 257326]>::y<((), &u64, 
   |                                                                           ^^^^^^^^^^^ 
   = help: Max value of i16 is 32767

error: empty type list
  --> tests/ast/hugetype.f3:39:51
   |
39 | OC::nBl::uivbmu虙EI<bool, i8, string>, Hl4IIDvMv::B<>::篁3IA倴uKB<u8, i16, u16>::vfk, (char, f64, u8)>>::is_)>, [e; 0o3u32],
   |                                                   ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:42:57
   |
42 | B則JalyC::D6l_Oj, o6wfEw<(string, i64, u8, f64), N8q_1ks驠<>::AjwOBF红3::LDOy::t4i3b<f64, i64, u32>::Myvr3呜d8<u8, f32,>::HNGwfx<f64,
   |                                                         ^^ 

error: Invalid numeric literal, integral overflow
  --> tests/ast/hugetype.f3:43:63
   |
43 | i8, f32>, E>::pKufBv<(f64, i33, char), [蜀; 36334], [D0vECbcy; 23626i8]>::H1>::va镮J<[ryJt哖Lul; 711504.248755], (o涋i7kvH::潥p03CJoa<u8,
   |                                                               ^^^^^^^ 
   = help: Max value of i8 is 127

error: empty type list
  --> tests/ast/hugetype.f3:45:72
   |
45 | 7183810], (), &f32), string, &K<i64, f32, i33>::ic<i33, u64,>::pCa7O輏Jo<>::IM徠h>::t7lN::bH<(::bwE<f32, i8, bool, char, u16>::ODgEuA2布3<u16,
   |                                                                        ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:46:115
   |
46 | u32, f32>::uwAIK<u32, f32, i16>::FOvw::q<i64, char, i33, i8>, BD1MK麲8<u8, i16, i64>::sl7<f64, u8, char>, x::补Ch6fk<>::i0<>), FfLo::ooyLL8<fn(bool,
   |                                                                                                                   ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:46:121
   |
46 | u32, f32>::uwAIK<u32, f32, i16>::FOvw::q<i64, char, i33, i8>, BD1MK麲8<u8, i16, i64>::sl7<f64, u8, char>, x::补Ch6fk<>::i0<>), FfLo::ooyLL8<fn(bool,
   |                                                                                                                         ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:47:45
   |
47 | I: u8, mcuA: f64, mEkjFHuO: i8), M_, u32>::f<>::ksq1G1HMg,>, phLasofe::kEroGvI4s>::FfCcI7>::Ftbgqo<&f64, eBv<ehBi7kM::xI::IyO渜, qn6Jry<&aHna2sL2,
   |                                             ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:48:4
   |
48 | B<t<>::se_::茔vKLEE::侪t6Etyy, [exNeJG5n; 38414],>::u<char, &&string, eH05::qAtp1L舊::CK8ttMpy8, dOj<fn(char, f32, ECwa: u64), u8, i33, (f32, 
   |    ^^ 

error: Invalid numeric literal, Exponent not allowed in integral literal
  --> tests/ast/hugetype.f3:50:14
   |
50 | i33>, [udBA; 0xe78c0D3u8], &f32>::Hf0<DnO煱gd, C3GIO樼yxc, [NcOE; 0.35736r64], jiw6::xnt0OI, (u16, string, u8, i8)>>::tOppMOO<::pox37<>, 
   |              ^^^^^^^^^^^ 

error: empty type list
  --> tests/ast/hugetype.f3:50:132
   |
50 | i33>, [udBA; 0xe78c0D3u8], &f32>::Hf0<DnO煱gd, C3GIO樼yxc, [NcOE; 0.35736r64], jiw6::xnt0OI, (u16, string, u8, i8)>>::tOppMOO<::pox37<>, 
   |                                                                                                                                    ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:55:26
   |
55 | 0b0], ::stGnGde::FF鶦lqK1t<>::盳wt>::k2fhA诿E_獄>::瓤<KB::CEMKJ17::bD<>::ifi5e3pE<m8<u64, f64, string>::bqbs<bool, char, u16, 
   |                          ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:55:65
   |
55 | 0b0], ::stGnGde::FF鶦lqK1t<>::盳wt>::k2fhA诿E_獄>::瓤<KB::CEMKJ17::bD<>::ifi5e3pE<m8<u64, f64, string>::bqbs<bool, char, u16, 
   |                                                                 ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:57:32
   |
57 | IKEu嗓::Beg2y::Dgr5::v::g0_t3AF0<>>, [ek_乩5fbbA; 63]>::g嚤<>::DgAjFtu2, usqNw::K<[k036DFE00; 0xcE], [lq5jG; 0b01010001000000110110], 
   |                                ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:57:57
   |
57 | IKEu嗓::Beg2y::Dgr5::v::g0_t3AF0<>>, [ek_乩5fbbA; 63]>::g嚤<>::DgAjFtu2, usqNw::K<[k036DFE00; 0xcE], [lq5jG; 0b01010001000000110110], 
   |                                                         ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:63:104
   |
63 | lqnkA倾: f32, 飉FfNcyyyC: u16) -> u64, &bool, (u16, bool, i8), ::rsijgrv7::BxywqE::ka::AfgoKJ31::钘a::NF31<>)>, (I::FlanmscM::訔a5jLmIwf<>::H蕹p3bajLh
   |                                                                                                        ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:63:133
   |
63 | lqnkA倾: f32, 飉FfNcyyyC: u16) -> u64, &bool, (u16, bool, i8), ::rsijgrv7::BxywqE::ka::AfgoKJ31::钘a::NF31<>)>, (I::FlanmscM::訔a5jLmIwf<>::H蕹p3bajLh
   |                                                                                                                                     ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:66:23
   |
66 | u32, char>), i3kh6Fv82<>::GCJG儤ik<>::cquKq<[t嗕F_ocE; 2214], ::jtdffi::iGh0sIGE<u8, u64, f32>::MM喩慝0Lmjd::n跲1moqmt8::uFlMC<char,
   |                       ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:66:34
   |
66 | u32, char>), i3kh6Fv82<>::GCJG儤ik<>::cquKq<[t嗕F_ocE; 2214], ::jtdffi::iGh0sIGE<u8, u64, f32>::MM喩慝0Lmjd::n跲1moqmt8::uFlMC<char,
   |                                  ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:69:58
   |
69 | char),>::N__JNu<&char, kKDBIj8up<i33, u16, char>::vG8a5Bf<>::q2H5wD, [t姪Fx; 0o06]>::n00BK<ca6凥_::Mc4GB<u16, string,
   |                                                          ^^ 

error: empty type list
  --> tests/ast/hugetype.f3:70:104
   |
70 | i64>, ::x3kG6<f64, i33, f64, f32, f32>::aBqduKnKc::sh3齇GG<i8, u32, f32>::reI<f32, f64,>::Dn8Kc::Fnvvw0p<>, &i33>, (icLbNi,
   |                                                                                                        ^^ 

error: Invalid numeric literal, numeric literal should not start with 0
  --> tests/ast/hugetype.f3:71:82
   |
71 | 挎Eh1, [KoC6K58n5; 0o26552535540]), u64)>::IincEILqo<([_1; 32230.742734r32], [LG; 06064], ()), qIOlh,>>::mmBr冒h_<&E7MEe::F<[E橝0EtCI;
   |                                                                                  ^^^^^ 
   = help: If you mean C style octal numeric literal, use `0o777` syntax

error: Invalid numeric literal, numeric literal should not start with 0
  --> tests/ast/hugetype.f3:72:1
   |
72 | 060], yro<>::lG膠, 錧F_h>::O粄騄6轄AI0, (n釜2e6j::ymjBDaB<[cdOq; 82304312E-81], [LCI; 2126745r64], ([go0BC; 0b1100000101100011000u32],
   | ^^^ 
   = help: If you mean C style octal numeric literal, use `0o777` syntax

error: empty type list
  --> tests/ast/hugetype.f3:72:10
   |
72 | 060], yro<>::lG膠, 錧F_h>::O粄騄6轄AI0, (n釜2e6j::ymjBDaB<[cdOq; 82304312E-81], [LCI; 2126745r64], ([go0BC; 0b1100000101100011000u32],
   |          ^^ 

error: Invalid numeric literal, numeric literal should not start with 0
  --> tests/ast/hugetype.f3:76:176
   |
76 | i64>::y8ojkCa<f64, u8, i64, i8, u16>::Ft, (f32, bool, u8, i8), hOob<u16, i64, bool>, u16, fCk77K要nx::l<char, u32, u32>>::t51cpk1, [p6d7hq; 0o32366])),>::j3OOqsKI::飍x, [_捿酙2l; 040], &&i16, u8>::E鼊湕绦;
   |                                                                                                                                                                                ^^^ 
   = help: If you mean C style octal numeric literal, use `0o777` syntax

                  total size 343967 > 52307
 [path-segment(simple)(496)] 111104 (32.30%) > 1984 (3.79%)
  [type-ref(primitive)(566)] 58864 (17.11%) > 4528 (8.66%)
[path-segment(generic)(249)] 55776 (16.22%) > 996 (1.90%)
       [type-ref(path)(376)] 39104 (11.37%) > 3008 (5.75%)
                 [path(752)] 12032 (3.50%) > 7540 (14.41%)
       [type-ref(array)(86)] 8944 (2.60%) > 688 (1.32%)
       [type-ref(tuple)(83)] 8632 (2.51%) > 664 (1.27%)
            [type-list(498)] 7968 (2.32%) > 5892 (11.26%)
             [expr(lit)(86)] 6880 (2.00%) > 688 (1.32%)
  [path-segment-simple(496)] 5952 (1.73%) > 5952 (11.38%)
      [primitive-type(1132)] 5094 (1.48%) > 5094 (9.74%)
 [path-segment-generic(747)] 4980 (1.45%) > 5976 (11.42%)
         [type-ref(ref)(41)] 4264 (1.24%) > 328 (0.63%)
             [lit-expr(172)] 2752 (0.80%) > 2752 (5.26%)
  [path-segment(global)(12)] 2688 (0.78%) > 48 (0.09%)
           [tuple-type(166)] 2656 (0.77%) > 1992 (3.81%)
          [type-ref(fn)(18)] 1872 (0.54%) > 144 (0.28%)
           [array-type(258)] 1376 (0.40%) > 1376 (2.63%)
    [fn-type-parameter(174)] 1160 (0.34%) > 1392 (2.66%)
               [fn-type(72)] 864 (0.25%) > 736 (1.41%)
              [ref-type(82)] 656 (0.19%) > 492 (0.94%)
         [item(var-decl)(1)] 328 (0.10%) > 8 (0.02%)
               [var-decl(5)] 21 (0.01%) > 29 (0.06%)
   [path-segment-global(12)] 0 (0.00%) > 0 (0.00%)
tests/ast/list.f3
                  total size 13863 > 2295
  [path-segment(simple)(16)] 3584 (25.85%) > 64 (2.79%)
      [stmt(simple-expr)(8)] 2624 (18.93%) > 64 (2.79%)
            [expr(path)(16)] 1280 (9.23%) > 128 (5.58%)
             [expr(lit)(10)] 800 (5.77%) > 80 (3.49%)
              [stmt(for)(2)] 656 (4.73%) > 16 (0.70%)
      [stmt(assign-expr)(2)] 656 (4.73%) > 16 (0.70%)
             [expr(call)(8)] 640 (4.62%) > 64 (2.79%)
           [expr(member)(7)] 560 (4.04%) > 56 (2.44%)
                  [path(32)] 512 (3.69%) > 256 (11.15%)
               [item(fn)(1)] 328 (2.37%) > 8 (0.35%)
         [stmt(var-decl)(1)] 328 (2.37%) > 8 (0.35%)
              [lit-expr(20)] 320 (2.31%) > 320 (13.94%)
           [member-expr(35)] 252 (1.82%) > 252 (10.98%)
             [expr-list(10)] 240 (1.73%) > 84 (3.66%)
             [call-expr(32)] 192 (1.38%) > 192 (8.37%)
   [path-segment-simple(16)] 192 (1.38%) > 192 (8.37%)
                  [block(6)] 96 (0.69%) > 88 (3.83%)
      [expr(array-index)(1)] 80 (0.58%) > 8 (0.35%)
       [expr(range-both)(1)] 80 (0.58%) > 8 (0.35%)
            [expr(array)(1)] 80 (0.58%) > 8 (0.35%)
      [simple-expr-stmt(16)] 64 (0.46%) > 96 (4.18%)
              [for-stmt(10)] 64 (0.46%) > 80 (3.49%)
                 [fn-def(7)] 64 (0.46%) > 36 (1.57%)
           [generic-name(4)] 52 (0.38%) > 32 (1.39%)
      [assign-expr-stmt(10)] 34 (0.25%) > 50 (2.18%)
        [range-both-expr(4)] 32 (0.23%) > 24 (1.05%)
       [array-index-expr(4)] 24 (0.17%) > 24 (1.05%)
               [var-decl(5)] 21 (0.15%) > 29 (1.26%)
             [array-expr(2)] 8 (0.06%) > 12 (0.52%)
tests/ast/misc.f3
                  total size 24958 > 4062
  [path-segment(simple)(21)] 4704 (18.85%) > 84 (2.07%)
        [stmt(var-decl)(10)] 3280 (13.14%) > 80 (1.97%)
            [expr(path)(21)] 1680 (6.73%) > 168 (4.14%)
               [item(fn)(5)] 1640 (6.57%) > 40 (0.98%)
             [expr(lit)(17)] 1360 (5.45%) > 136 (3.35%)
   [type-ref(primitive)(10)] 1040 (4.17%) > 80 (1.97%)
      [stmt(assign-expr)(3)] 984 (3.94%) > 24 (0.59%)
                  [path(46)] 736 (2.95%) > 368 (9.06%)
              [stmt(ret)(2)] 656 (2.63%) > 16 (0.39%)
            [stmt(while)(2)] 656 (2.63%) > 16 (0.39%)
      [stmt(simple-expr)(2)] 656 (2.63%) > 16 (0.39%)
            [stmt(break)(2)] 656 (2.63%) > 16 (0.39%)
             [stmt(loop)(2)] 656 (2.63%) > 16 (0.39%)
             [expr(call)(7)] 560 (2.24%) > 56 (1.38%)
           [expr(binary)(7)] 560 (2.24%) > 56 (1.38%)
              [lit-expr(34)] 544 (2.18%) > 544 (13.39%)
  [path-segment(generic)(2)] 448 (1.80%) > 8 (0.20%)
                 [block(26)] 416 (1.67%) > 260 (6.40%)
              [stmt(for)(1)] 328 (1.31%) > 8 (0.20%)
            [stmt(block)(1)] 328 (1.31%) > 8 (0.20%)
               [stmt(if)(1)] 328 (1.31%) > 8 (0.20%)
                [fn-def(35)] 320 (1.28%) > 200 (4.92%)
          [generic-name(20)] 260 (1.04%) > 160 (3.94%)
   [path-segment-simple(21)] 252 (1.01%) > 252 (6.20%)
           [binary-expr(35)] 231 (0.93%) > 175 (4.31%)
              [var-decl(50)] 210 (0.84%) > 290 (7.14%)
         [type-ref(path)(2)] 208 (0.83%) > 16 (0.39%)
              [expr-list(8)] 192 (0.77%) > 64 (1.58%)
             [call-expr(28)] 168 (0.67%) > 168 (4.14%)
          [type-ref(ref)(1)] 104 (0.42%) > 8 (0.20%)
      [fn-def-parameter(15)] 100 (0.40%) > 120 (2.95%)
        [primitive-type(20)] 90 (0.36%) > 90 (2.22%)
            [expr(paren)(1)] 80 (0.32%) > 8 (0.20%)
            [expr(array)(1)] 80 (0.32%) > 8 (0.20%)
              [type-list(4)] 64 (0.26%) > 32 (0.79%)
      [assign-expr-stmt(15)] 51 (0.20%) > 75 (1.85%)
              [loop-stmt(6)] 40 (0.16%) > 48 (1.18%)
   [path-segment-generic(6)] 40 (0.16%) > 48 (1.18%)
             [break-stmt(4)] 40 (0.16%) > 40 (0.98%)
             [while-stmt(8)] 40 (0.16%) > 56 (1.38%)
               [for-stmt(5)] 32 (0.13%) > 40 (0.98%)
                [if-stmt(4)] 32 (0.13%) > 20 (0.49%)
             [block-stmt(3)] 20 (0.08%) > 24 (0.59%)
             [paren-expr(2)] 16 (0.06%) > 12 (0.30%)
               [ret-stmt(4)] 16 (0.06%) > 24 (0.59%)
               [ref-type(2)] 16 (0.06%) > 12 (0.30%)
       [simple-expr-stmt(4)] 16 (0.06%) > 24 (0.59%)
            [else-clause(2)] 8 (0.03%) > 12 (0.30%)
             [array-expr(2)] 8 (0.03%) > 12 (0.30%)
              [if-clause(3)] 8 (0.03%) > 16 (0.39%)
tests/ast/missing.f3
                  total size 10791 > 1959
   [path-segment(simple)(7)] 1568 (14.53%) > 28 (1.43%)
         [item(var-decl)(4)] 1312 (12.16%) > 32 (1.63%)
             [expr(lit)(10)] 800 (7.41%) > 80 (4.08%)
              [stmt(ret)(2)] 656 (6.08%) > 16 (0.82%)
    [type-ref(primitive)(6)] 624 (5.78%) > 48 (2.45%)
              [item(use)(1)] 328 (3.04%) > 8 (0.41%)
           [stmt(struct)(1)] 328 (3.04%) > 8 (0.41%)
           [item(struct)(1)] 328 (3.04%) > 8 (0.41%)
            [item(while)(1)] 328 (3.04%) > 8 (0.41%)
               [item(fn)(1)] 328 (3.04%) > 8 (0.41%)
             [item(loop)(1)] 328 (3.04%) > 8 (0.41%)
               [item(if)(1)] 328 (3.04%) > 8 (0.41%)
               [stmt(fn)(1)] 328 (3.04%) > 8 (0.41%)
           [expr(binary)(4)] 320 (2.97%) > 32 (1.63%)
              [lit-expr(20)] 320 (2.97%) > 320 (16.33%)
             [expr(path)(3)] 240 (2.22%) > 24 (1.23%)
          [generic-name(16)] 208 (1.93%) > 128 (6.53%)
                  [path(10)] 160 (1.48%) > 88 (4.49%)
             [expr(call)(2)] 160 (1.48%) > 16 (0.82%)
                 [block(10)] 160 (1.48%) > 76 (3.88%)
             [field-def(20)] 140 (1.30%) > 160 (8.17%)
           [binary-expr(20)] 132 (1.22%) > 100 (5.10%)
                [fn-def(14)] 128 (1.19%) > 76 (3.88%)
         [type-ref(path)(1)] 104 (0.96%) > 8 (0.41%)
          [type-ref(ref)(1)] 104 (0.96%) > 8 (0.41%)
              [var-decl(20)] 84 (0.78%) > 116 (5.92%)
    [path-segment-simple(7)] 84 (0.78%) > 84 (4.29%)
      [expr(range-right)(1)] 80 (0.74%) > 8 (0.41%)
            [expr(unary)(1)] 80 (0.74%) > 8 (0.41%)
       [expr(range-left)(1)] 80 (0.74%) > 8 (0.41%)
            [expr(tuple)(1)] 80 (0.74%) > 8 (0.41%)
       [expr(range-full)(1)] 80 (0.74%) > 8 (0.41%)
              [expr-list(3)] 72 (0.67%) > 24 (1.23%)
             [struct-def(6)] 64 (0.59%) > 52 (2.65%)
        [primitive-type(12)] 54 (0.50%) > 54 (2.76%)
              [call-expr(8)] 48 (0.44%) > 48 (2.45%)
                [if-stmt(4)] 32 (0.30%) > 20 (1.02%)
             [unary-expr(4)] 25 (0.23%) > 21 (1.07%)
       [fn-def-parameter(3)] 20 (0.19%) > 24 (1.23%)
               [use-stmt(3)] 20 (0.19%) > 24 (1.23%)
             [while-stmt(4)] 20 (0.19%) > 28 (1.43%)
              [loop-stmt(3)] 20 (0.19%) > 24 (1.23%)
       [range-right-expr(2)] 16 (0.15%) > 12 (0.61%)
               [ret-stmt(4)] 16 (0.15%) > 24 (1.23%)
        [range-left-expr(2)] 16 (0.15%) > 12 (0.61%)
               [ref-type(2)] 16 (0.15%) > 12 (0.61%)
        [range-full-expr(1)] 8 (0.07%) > 8 (0.41%)
              [if-clause(3)] 8 (0.07%) > 16 (0.82%)
             [tuple-expr(2)] 8 (0.07%) > 12 (0.61%)
tests/ast/module1.f3
                  total size 7431 > 1191
  [path-segment(simple)(11)] 2464 (33.16%) > 44 (3.69%)
              [item(use)(3)] 984 (13.24%) > 24 (2.02%)
               [item(fn)(2)] 656 (8.83%) > 16 (1.34%)
              [expr(lit)(7)] 560 (7.54%) > 56 (4.70%)
              [stmt(ret)(1)] 328 (4.41%) > 8 (0.67%)
      [stmt(simple-expr)(1)] 328 (4.41%) > 8 (0.67%)
             [expr(path)(4)] 320 (4.31%) > 32 (2.69%)
                  [path(14)] 224 (3.01%) > 128 (10.75%)
              [lit-expr(14)] 224 (3.01%) > 224 (18.81%)
    [type-ref(primitive)(2)] 208 (2.80%) > 16 (1.34%)
            [expr(array)(2)] 160 (2.15%) > 16 (1.34%)
             [expr(call)(2)] 160 (2.15%) > 16 (1.34%)
   [path-segment-simple(11)] 132 (1.78%) > 132 (11.08%)
                [fn-def(14)] 128 (1.72%) > 76 (6.38%)
           [generic-name(8)] 104 (1.40%) > 64 (5.37%)
              [expr-list(4)] 96 (1.29%) > 56 (4.70%)
           [expr(binary)(1)] 80 (1.08%) > 8 (0.67%)
                  [block(4)] 64 (0.86%) > 32 (2.69%)
               [use-stmt(9)] 60 (0.81%) > 72 (6.05%)
              [call-expr(8)] 48 (0.65%) > 48 (4.03%)
            [binary-expr(5)] 33 (0.44%) > 25 (2.10%)
       [fn-def-parameter(3)] 20 (0.27%) > 24 (2.02%)
         [primitive-type(4)] 18 (0.24%) > 18 (1.51%)
             [array-expr(4)] 16 (0.22%) > 24 (2.02%)
               [ret-stmt(2)] 8 (0.11%) > 12 (1.01%)
       [simple-expr-stmt(2)] 8 (0.11%) > 12 (1.01%)
tests/ast/prime.f3
                  total size 36672 > 6320
  [path-segment(simple)(43)] 9632 (26.27%) > 172 (2.72%)
     [stmt(simple-expr)(12)] 3936 (10.73%) > 96 (1.52%)
            [expr(path)(43)] 3440 (9.38%) > 344 (5.44%)
             [expr(lit)(24)] 1920 (5.24%) > 192 (3.04%)
            [expr(call)(23)] 1840 (5.02%) > 184 (2.91%)
              [stmt(for)(5)] 1640 (4.47%) > 40 (0.63%)
                  [path(86)] 1376 (3.75%) > 696 (11.01%)
      [stmt(assign-expr)(4)] 1312 (3.58%) > 32 (0.51%)
               [item(fn)(3)] 984 (2.68%) > 24 (0.38%)
               [stmt(if)(3)] 984 (2.68%) > 24 (0.38%)
              [lit-expr(48)] 768 (2.09%) > 768 (12.15%)
             [expr-list(31)] 744 (2.03%) > 212 (3.35%)
           [expr(binary)(9)] 720 (1.96%) > 72 (1.14%)
           [expr(member)(9)] 720 (1.96%) > 72 (1.14%)
         [stmt(var-decl)(2)] 656 (1.79%) > 16 (0.25%)
      [expr(array-index)(8)] 640 (1.75%) > 64 (1.01%)
             [call-expr(92)] 552 (1.51%) > 552 (8.73%)
    [type-ref(primitive)(5)] 520 (1.42%) > 40 (0.63%)
   [path-segment-simple(43)] 516 (1.41%) > 516 (8.16%)
  [path-segment(generic)(2)] 448 (1.22%) > 8 (0.13%)
       [expr(range-both)(5)] 400 (1.09%) > 40 (0.63%)
                 [block(22)] 352 (0.96%) > 240 (3.80%)
              [stmt(ret)(1)] 328 (0.89%) > 8 (0.13%)
           [member-expr(45)] 324 (0.88%) > 324 (5.13%)
           [binary-expr(45)] 297 (0.81%) > 225 (3.56%)
          [type-ref(ref)(2)] 208 (0.57%) > 16 (0.25%)
      [array-index-expr(32)] 192 (0.52%) > 192 (3.04%)
                [fn-def(21)] 192 (0.52%) > 116 (1.84%)
              [for-stmt(25)] 160 (0.44%) > 200 (3.16%)
       [range-both-expr(20)] 160 (0.44%) > 120 (1.90%)
          [generic-name(12)] 156 (0.43%) > 96 (1.52%)
      [simple-expr-stmt(24)] 96 (0.26%) > 144 (2.28%)
               [if-stmt(12)] 96 (0.26%) > 60 (0.95%)
      [assign-expr-stmt(20)] 68 (0.19%) > 100 (1.58%)
              [type-list(4)] 64 (0.17%) > 32 (0.51%)
        [primitive-type(10)] 45 (0.12%) > 45 (0.71%)
              [var-decl(10)] 42 (0.11%) > 58 (0.92%)
   [path-segment-generic(6)] 40 (0.11%) > 48 (0.76%)
       [fn-def-parameter(6)] 40 (0.11%) > 48 (0.76%)
               [ref-type(4)] 32 (0.09%) > 24 (0.38%)
              [if-clause(9)] 24 (0.07%) > 48 (0.76%)
               [ret-stmt(2)] 8 (0.02%) > 12 (0.19%)
tests/ast/string.f3
                  total size 17929 > 2869
  [path-segment(simple)(24)] 5376 (29.98%) > 96 (3.35%)
     [stmt(simple-expr)(10)] 3280 (18.29%) > 80 (2.79%)
            [expr(path)(23)] 1840 (10.26%) > 184 (6.41%)
         [stmt(var-decl)(4)] 1312 (7.32%) > 32 (1.12%)
            [expr(call)(16)] 1280 (7.14%) > 128 (4.46%)
                  [path(48)] 768 (4.28%) > 384 (13.38%)
              [expr(lit)(8)] 640 (3.57%) > 64 (2.23%)
           [expr(member)(7)] 560 (3.12%) > 56 (1.95%)
           [expr(binary)(5)] 400 (2.23%) > 40 (1.39%)
             [expr-list(16)] 384 (2.14%) > 112 (3.90%)
             [call-expr(64)] 384 (2.14%) > 384 (13.38%)
               [item(fn)(1)] 328 (1.83%) > 8 (0.28%)
   [path-segment-simple(24)] 288 (1.61%) > 288 (10.04%)
              [lit-expr(16)] 256 (1.43%) > 256 (8.92%)
           [member-expr(35)] 252 (1.41%) > 252 (8.78%)
           [binary-expr(25)] 165 (0.92%) > 125 (4.36%)
         [type-ref(path)(1)] 104 (0.58%) > 8 (0.28%)
              [var-decl(20)] 84 (0.47%) > 116 (4.04%)
      [simple-expr-stmt(20)] 80 (0.45%) > 120 (4.18%)
                 [fn-def(7)] 64 (0.36%) > 36 (1.25%)
           [generic-name(4)] 52 (0.29%) > 32 (1.12%)
                  [block(2)] 32 (0.18%) > 68 (2.37%)
tests/ast/sum.f3
                  total size 4335 > 759
   [path-segment(simple)(4)] 896 (20.67%) > 16 (2.11%)
      [stmt(assign-expr)(1)] 328 (7.57%) > 8 (1.05%)
      [stmt(simple-expr)(1)] 328 (7.57%) > 8 (1.05%)
               [item(fn)(1)] 328 (7.57%) > 8 (1.05%)
         [stmt(var-decl)(1)] 328 (7.57%) > 8 (1.05%)
              [stmt(for)(1)] 328 (7.57%) > 8 (1.05%)
             [expr(path)(4)] 320 (7.38%) > 32 (4.22%)
              [expr(lit)(4)] 320 (7.38%) > 32 (4.22%)
             [expr(call)(2)] 160 (3.69%) > 16 (2.11%)
               [lit-expr(8)] 128 (2.95%) > 128 (16.86%)
                   [path(8)] 128 (2.95%) > 64 (8.43%)
           [expr(member)(1)] 80 (1.85%) > 8 (1.05%)
           [expr(binary)(1)] 80 (1.85%) > 8 (1.05%)
       [expr(range-both)(1)] 80 (1.85%) > 8 (1.05%)
                  [block(4)] 64 (1.48%) > 40 (5.27%)
                 [fn-def(7)] 64 (1.48%) > 36 (4.74%)
           [generic-name(4)] 52 (1.20%) > 32 (4.22%)
    [path-segment-simple(4)] 48 (1.11%) > 48 (6.32%)
              [expr-list(2)] 48 (1.11%) > 12 (1.58%)
              [call-expr(8)] 48 (1.11%) > 48 (6.32%)
            [member-expr(5)] 36 (0.83%) > 36 (4.74%)
            [binary-expr(5)] 33 (0.76%) > 25 (3.29%)
        [range-both-expr(4)] 32 (0.74%) > 24 (3.16%)
               [for-stmt(5)] 32 (0.74%) > 40 (5.27%)
               [var-decl(5)] 21 (0.48%) > 29 (3.82%)
       [assign-expr-stmt(5)] 17 (0.39%) > 25 (3.29%)
       [simple-expr-stmt(2)] 8 (0.18%) > 12 (1.58%)
