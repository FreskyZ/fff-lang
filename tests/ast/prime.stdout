total size 36672 > 6380
  [path-segment(simple)(43)] 9632 (26.27%) > 344 (5.39%)
     [stmt(simple-expr)(12)] 3936 (10.73%) > 96 (1.50%)
            [expr(path)(43)] 3440 (9.38%) > 344 (5.39%)
             [expr(lit)(24)] 1920 (5.24%) > 192 (3.01%)
            [expr(call)(23)] 1840 (5.02%) > 184 (2.88%)
              [stmt(for)(5)] 1640 (4.47%) > 40 (0.63%)
                  [path(43)] 1376 (3.75%) > 688 (10.78%)
      [stmt(assign-expr)(4)] 1312 (3.58%) > 32 (0.50%)
             [call-expr(23)] 1104 (3.01%) > 644 (10.09%)
               [stmt(if)(3)] 984 (2.68%) > 24 (0.38%)
               [item(fn)(3)] 984 (2.68%) > 24 (0.38%)
              [lit-expr(24)] 768 (2.09%) > 768 (12.04%)
           [expr(member)(9)] 720 (1.96%) > 72 (1.13%)
           [expr(binary)(9)] 720 (1.96%) > 72 (1.13%)
         [stmt(var-decl)(2)] 656 (1.79%) > 16 (0.25%)
      [expr(array-index)(8)] 640 (1.75%) > 64 (1.00%)
    [type-ref(primitive)(5)] 520 (1.42%) > 40 (0.63%)
        [simple-segment(43)] 516 (1.41%) > 516 (8.09%)
  [path-segment(generic)(2)] 448 (1.22%) > 16 (0.25%)
       [expr(range-both)(5)] 400 (1.09%) > 40 (0.63%)
       [array-index-expr(8)] 384 (1.05%) > 224 (3.51%)
                 [block(11)] 352 (0.96%) > 176 (2.76%)
              [stmt(ret)(1)] 328 (0.89%) > 8 (0.13%)
            [member-expr(9)] 324 (0.88%) > 324 (5.08%)
            [binary-expr(9)] 297 (0.81%) > 225 (3.53%)
          [type-ref(ref)(2)] 208 (0.57%) > 16 (0.25%)
                 [fn-def(3)] 192 (0.52%) > 132 (2.07%)
        [range-both-expr(5)] 160 (0.44%) > 120 (1.88%)
               [for-stmt(5)] 160 (0.44%) > 200 (3.13%)
           [generic-name(3)] 156 (0.43%) > 108 (1.69%)
      [simple-expr-stmt(12)] 96 (0.26%) > 144 (2.26%)
                [if-stmt(3)] 96 (0.26%) > 72 (1.13%)
       [assign-expr-stmt(4)] 68 (0.19%) > 100 (1.57%)
              [type-list(2)] 64 (0.17%) > 32 (0.50%)
         [primitive-type(5)] 45 (0.12%) > 45 (0.71%)
               [var-decl(2)] 42 (0.11%) > 58 (0.91%)
        [generic-segment(2)] 40 (0.11%) > 48 (0.75%)
       [fn-def-parameter(2)] 40 (0.11%) > 48 (0.75%)
               [ref-type(2)] 32 (0.09%) > 24 (0.38%)
              [if-clause(3)] 24 (0.07%) > 48 (0.75%)
               [ret-stmt(1)] 8 (0.02%) > 12 (0.19%)
module tests/ast/prime.f3
  fn-def <4:1-6:1> () <4:8-4:9>
    generic-name <4:4-4:7> main <4:4-4:7>
    block <4:11-6:1>
      simple-expr-stmt <5:5-5:38>
        call-expr <5:5-5:37> () <5:18-5:37>
          path <5:5-5:17>
            segment <5:5-5:17> write_array_8
          call-expr <5:19-5:36> () <5:29-5:36>
            path <5:19-5:28>
              segment <5:19-5:28> get_primes
            literal u64 100 <5:30-5:35>
  fn-def <8:1-36:1> () <8:14-8:30>
    generic-name <8:4-8:13> get_primes <8:4-8:13>
    fn-def-parameter <8:15-8:29> high_bound <8:15-8:24>
      primitive-type u64 <8:27-8:29>
    ref-type <8:35-8:38>
      primitive-type u64 <8:36-8:38>
    block <8:40-36:1>
      simple-expr-stmt <10:5-10:81>
        call-expr <10:5-10:80> () <10:12-10:80>
          path <10:5-10:11>
            segment <10:5-10:11> writeln
          binary-expr <10:13-10:79> + <10:56-10:56>
            literal str "[DEBUG] get primes calle" <10:13-10:54>
            call-expr <10:58-10:79> () <10:78-10:79>
              member-expr <10:58-10:77> . <10:68-10:68> to_string <10:69-10:77>
                path <10:58-10:67>
                  segment <10:58-10:67> high_bound
      var-def <11:5-11:58> mutable is_prime <11:9-11:16>
        call-expr <11:20-11:57> () <11:46-11:57>
          path <11:20-11:45>
            generic-segment <11:20-11:31> list <11:20-11:23>
              primitive-type bool <11:27-11:30>
            segment <11:34-11:45> with_capcity
          path <11:47-11:56>
            segment <11:47-11:56> high_bound
      for-stmt <12:5-14:5> iter-var i <12:9-12:9>
        range-both-expr <12:14-12:26> dotdot <12:15-12:16>
          literal i32 0 <12:14-12:14>
          path <12:17-12:26>
            segment <12:17-12:26> high_bound
        block <12:28-14:5>
          assign-expr-stmt <13:9-13:27> = <13:21-13:21>
            array-index-expr <13:9-13:19> [] <13:17-13:19>
              path <13:9-13:16>
                segment <13:9-13:16> is_prime
              path <13:18-13:18>
                segment <13:18-13:18> i
            literal bool true <13:23-13:26>
      assign-expr-stmt <15:5-15:24> = <15:17-15:17>
        array-index-expr <15:5-15:15> [] <15:13-15:15>
          path <15:5-15:12>
            segment <15:5-15:12> is_prime
          literal i32 0 <15:14-15:14>
        literal bool false <15:19-15:23>
      assign-expr-stmt <16:5-16:24> = <16:17-16:17>
        array-index-expr <16:5-16:15> [] <16:13-16:15>
          path <16:5-16:12>
            segment <16:5-16:12> is_prime
          literal i32 1 <16:14-16:14>
        literal bool false <16:19-16:23>
      for-stmt <17:5-26:5> iter-var i <17:9-17:9>
        range-both-expr <17:14-17:29> dotdot <17:18-17:19>
          literal u64 2 <17:14-17:17>
          path <17:20-17:29>
            segment <17:20-17:29> high_bound
        block <17:31-26:5>
          simple-expr-stmt <18:9-18:66>
            call-expr <18:9-18:65> () <18:16-18:65>
              path <18:9-18:15>
                segment <18:9-18:15> writeln
              binary-expr <18:17-18:64> + <18:50-18:50>
                literal str "[DEBUG] Outter iteration" <18:17-18:48>
                call-expr <18:52-18:64> () <18:63-18:64>
                  member-expr <18:52-18:62> . <18:53-18:53> to_string <18:54-18:62>
                    path <18:52-18:52>
                      segment <18:52-18:52> i
          if-stmt <19:9-25:9>
            if-clause <19:9-25:9>
              array-index-expr <19:12-19:22> [] <19:20-19:22>
                path <19:12-19:19>
                  segment <19:12-19:19> is_prime
                path <19:21-19:21>
                  segment <19:21-19:21> i
              block <19:24-25:9>
                simple-expr-stmt <20:13-20:47>
                  call-expr <20:13-20:46> () <20:20-20:46>
                    path <20:13-20:19>
                      segment <20:13-20:19> writeln
                    literal str "[DEBUG] this i is prime" <20:21-20:45>
                for-stmt <21:13-24:13> iter-var j <21:17-21:17>
                  range-both-expr <21:22-21:41> dotdot <21:26-21:27>
                    literal u64 2 <21:22-21:25>
                    binary-expr <21:28-21:41> / <21:39-21:39>
                      path <21:28-21:37>
                        segment <21:28-21:37> high_bound
                      path <21:41-21:41>
                        segment <21:41-21:41> i
                  block <21:43-24:13>
                    simple-expr-stmt <22:17-22:88>
                      call-expr <22:17-22:87> () <22:24-22:87>
                        path <22:17-22:23>
                          segment <22:17-22:23> writeln
                        binary-expr <22:25-22:86> + <22:73-22:73>
                          binary-expr <22:25-22:71> + <22:57-22:57>
                            literal str "[DEBUG] inner iteration," <22:25-22:55>
                            call-expr <22:59-22:71> () <22:70-22:71>
                              member-expr <22:59-22:69> . <22:60-22:60> to_string <22:61-22:69>
                                path <22:59-22:59>
                                  segment <22:59-22:59> j
                          literal str ", unset it" <22:75-22:86>
                    assign-expr-stmt <23:17-23:40> = <23:33-23:33>
                      array-index-expr <23:17-23:31> [] <23:25-23:31>
                        path <23:17-23:24>
                          segment <23:17-23:24> is_prime
                        binary-expr <23:26-23:30> * <23:28-23:28>
                          path <23:26-23:26>
                            segment <23:26-23:26> j
                          path <23:30-23:30>
                            segment <23:30-23:30> i
                      literal bool false <23:35-23:39>
      simple-expr-stmt <28:5-28:42>
        call-expr <28:5-28:41> () <28:12-28:41>
          path <28:5-28:11>
            segment <28:5-28:11> writeln
          literal str "[DEBUG] main process end" <28:13-28:40>
      var-def <29:5-29:37> mutable ret_val <29:9-29:15>
        call-expr <29:19-29:36> () <29:35-29:36>
          path <29:19-29:34>
            generic-segment <29:19-29:29> list <29:19-29:22>
              primitive-type u64 <29:26-29:28>
            segment <29:32-29:34> new
      for-stmt <30:5-34:5> iter-var i <30:9-30:9>
        range-both-expr <30:14-30:29> dotdot <30:18-30:19>
          literal u64 1 <30:14-30:17>
          path <30:20-30:29>
            segment <30:20-30:29> high_bound
        block <30:31-34:5>
          if-stmt <31:9-33:9>
            if-clause <31:9-33:9>
              array-index-expr <31:12-31:22> [] <31:20-31:22>
                path <31:12-31:19>
                  segment <31:12-31:19> is_prime
                path <31:21-31:21>
                  segment <31:21-31:21> i
              block <31:24-33:9>
                simple-expr-stmt <32:13-32:28>
                  call-expr <32:13-32:27> () <32:25-32:27>
                    member-expr <32:13-32:24> . <32:20-32:20> push <32:21-32:24>
                      path <32:13-32:19>
                        segment <32:13-32:19> ret_val
                    path <32:26-32:26>
                      segment <32:26-32:26> i
      ret-stmt <35:5-35:19>
        path <35:12-35:18>
          segment <35:12-35:18> ret_val
  fn-def <38:1-48:1> () <38:17-38:32>
    generic-name <38:4-38:16> write_array_8 <38:4-38:16>
    fn-def-parameter <38:18-38:31> thearray <38:18-38:25>
      ref-type <38:28-38:31>
        primitive-type u64 <38:29-38:31>
    block <38:34-48:1>
      simple-expr-stmt <39:5-39:15>
        call-expr <39:5-39:14> () <39:10-39:14>
          path <39:5-39:9>
            segment <39:5-39:9> write
          literal str "[" <39:11-39:13>
      for-stmt <40:5-43:5> iter-var i <40:9-40:9>
        range-both-expr <40:14-40:43> dotdot <40:18-40:19>
          literal u64 0 <40:14-40:17>
          binary-expr <40:20-40:43> - <40:38-40:38>
            call-expr <40:20-40:36> () <40:35-40:36>
              member-expr <40:20-40:34> . <40:28-40:28> length <40:29-40:34>
                path <40:20-40:27>
                  segment <40:20-40:27> thearray
            literal u64 1 <40:40-40:43>
        block <40:45-43:5>
          simple-expr-stmt <41:9-41:39>
            call-expr <41:9-41:38> () <41:14-41:38>
              path <41:9-41:13>
                segment <41:9-41:13> write
              call-expr <41:15-41:37> () <41:36-41:37>
                member-expr <41:15-41:35> . <41:26-41:26> to_string <41:27-41:35>
                  array-index-expr <41:15-41:25> [] <41:23-41:25>
                    path <41:15-41:22>
                      segment <41:15-41:22> thearray
                    path <41:24-41:24>
                      segment <41:24-41:24> i
          simple-expr-stmt <42:9-42:20>
            call-expr <42:9-42:19> () <42:14-42:19>
              path <42:9-42:13>
                segment <42:9-42:13> write
              literal str ", " <42:15-42:18>
      if-stmt <44:5-46:5>
        if-clause <44:5-46:5>
          binary-expr <44:8-44:31> > <44:26-44:26>
            call-expr <44:8-44:24> () <44:23-44:24>
              member-expr <44:8-44:22> . <44:16-44:16> length <44:17-44:22>
                path <44:8-44:15>
                  segment <44:8-44:15> thearray
            literal u64 1 <44:28-44:31>
          block <44:33-46:5>
            simple-expr-stmt <45:9-45:62>
              call-expr <45:9-45:61> () <45:14-45:61>
                path <45:9-45:13>
                  segment <45:9-45:13> write
                call-expr <45:15-45:60> () <45:59-45:60>
                  member-expr <45:15-45:58> . <45:49-45:49> to_string <45:50-45:58>
                    array-index-expr <45:15-45:48> [] <45:23-45:48>
                      path <45:15-45:22>
                        segment <45:15-45:22> thearray
                      binary-expr <45:24-45:47> - <45:42-45:42>
                        call-expr <45:24-45:40> () <45:39-45:40>
                          member-expr <45:24-45:38> . <45:32-45:32> length <45:33-45:38>
                            path <45:24-45:31>
                              segment <45:24-45:31> thearray
                        literal u64 1 <45:44-45:47>
      simple-expr-stmt <47:5-47:15>
        call-expr <47:5-47:14> () <47:10-47:14>
          path <47:5-47:9>
            segment <47:5-47:9> write
          literal str "]" <47:11-47:13>
