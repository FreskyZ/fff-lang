
// Get primes

fn main() {
    write_array_8(get_primes(100u64));
}

fn get_primes(high_bound: u64) -> &u64 {
    
    writeln("[DEBUG] get primes called, high bound = " + high_bound.to_string());
    var is_prime = list::<bool>::with_capcity(high_bound);
    for i in 0..high_bound {
        is_prime[i] = true;
    }
    is_prime[0] = false;
    is_prime[1] = false;
    for i in 2u64..high_bound {
        writeln("[DEBUG] Outter iteration, i = " + i.to_string());
        if is_prime[i] {
            writeln("[DEBUG] this i is prime");
            for j in 2u64..high_bound / i {
                writeln("[DEBUG] inner iteration, j = " + j.to_string() + ", unset it");
                is_prime[j * i] = false;
            }
        }
    }

    writeln("[DEBUG] main process ended");
    var ret_val = list::<u64>::new(); // because no type infer, should provide type for list::new
    for i in 1u64..high_bound {
        if is_prime[i] {
            ret_val.push(i);
        }
    }
    return ret_val;
}

fn write_array_8(thearray: &u64) {
    write("[");
    for i in 0u64..thearray.length() - 1u64 {
        write(thearray[i].to_string());
        write(", ");
    }
    if thearray.length() > 1u64 {
        write(thearray[thearray.length() - 1u64].to_string());
    }
    write("]");
}