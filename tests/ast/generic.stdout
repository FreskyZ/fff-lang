[all(764)] 16288
[path(180)] 2880 (17.68%)
[simple-segment(170)] 2040 (12.52%)
[lit-expr(32)] 1024 (6.29%)
[binary-expr(28)] 1008 (6.19%)
[generic-name(24)] 864 (5.30%)
[call-expr(24)] 768 (4.72%)
[fn-def-parameter(27)] 756 (4.64%)
[fn-def(15)] 720 (4.42%)
[array-index-expr(16)] 512 (3.14%)
[block(30)] 480 (2.95%)
[var-decl-stmt(11)] 440 (2.70%)
[member-expr(11)] 440 (2.70%)
[assign-expr-stmt(11)] 396 (2.43%)
[generic-segment(15)] 360 (2.21%)
[field-def(8)] 288 (1.77%)
[generic-parameter(14)] 280 (1.72%)
[ref-type(16)] 256 (1.57%)
[type-list(15)] 240 (1.47%)
[primitive-type(18)] 216 (1.33%)
[simple-expr-stmt(11)] 176 (1.08%)
[for-stmt(4)] 176 (1.08%)
[if-stmt(7)] 168 (1.03%)
[ret-stmt(9)] 144 (0.88%)
[if-clause(7)] 140 (0.86%)
[fn-type-parameter(5)] 140 (0.86%)
[fn-type(4)] 128 (0.79%)
[where-clause(4)] 112 (0.69%)
[enum-def-variant(3)] 84 (0.52%)
[class-def(3)] 84 (0.52%)
[struct-def(4)] 80 (0.49%)
[tuple-index-expr(2)] 72 (0.44%)
[while-stmt(2)] 64 (0.39%)
[range-both-expr(2)] 64 (0.39%)
[paren-expr(4)] 64 (0.39%)
[object-expr-field(2)] 56 (0.34%)
[impl-block(1)] 56 (0.34%)
[loop-stmt(2)] 48 (0.29%)
[type-def(2)] 40 (0.25%)
[enum-def(1)] 40 (0.25%)
[break-stmt(2)] 40 (0.25%)
[object-expr(1)] 32 (0.20%)
[module-stmt(1)] 32 (0.20%)
[unary-expr(1)] 28 (0.17%)
[use-stmt(1)] 24 (0.15%)
[module(2)] 24 (0.15%)
[else-clause(2)] 24 (0.15%)
[cast-segment(1)] 24 (0.15%)
[block-stmt(1)] 24 (0.15%)
[array-type(1)] 24 (0.15%)
[continue-stmt(1)] 20 (0.12%)
[tuple-type(1)] 16 (0.10%)
[tuple-expr(1)] 16 (0.10%)
[range-right-expr(1)] 16 (0.10%)
[range-left-expr(1)] 16 (0.10%)
[array-expr(1)] 16 (0.10%)
[range-full-expr(1)] 8 (0.05%)
module tests/ast/generic.f3
  class-def <4:1-10:1> {} <4:23-10:1>
    generic-name <4:7-4:21> PartialEqual <4:7-4:18> <> <4:19-4:21>
      generic-parameter <4:20-4:20> R
    fn-def <6:5-6:40> () <6:10-6:31>
      generic-name <6:8-6:9> eq <6:8-6:9>
      fn-def-parameter <6:11-6:21> self <6:11-6:14>
        ref-type <6:17-6:21>
          path <6:18-6:21>
            segment <6:18-6:21> Self
      fn-def-parameter <6:24-6:30> rhs <6:24-6:26>
        ref-type <6:29-6:30>
          path <6:30-6:30>
            segment <6:30-6:30> R
      primitive-type bool <6:36-6:39>
    fn-def <7:5-9:5> () <7:10-7:31>
      generic-name <7:8-7:9> ne <7:8-7:9>
      fn-def-parameter <7:11-7:21> self <7:11-7:14>
        ref-type <7:17-7:21>
          path <7:18-7:21>
            segment <7:18-7:21> Self
      fn-def-parameter <7:24-7:30> rhs <7:24-7:26>
        ref-type <7:29-7:30>
          path <7:30-7:30>
            segment <7:30-7:30> R
      primitive-type bool <7:36-7:39>
      block <7:41-9:5>
        ret-stmt <8:9-8:29>
          unary-expr <8:16-8:28> ! <8:16-8:16>
            call-expr <8:17-8:28> () <8:24-8:28>
              member-expr <8:17-8:23> . <8:21-8:21> eq <8:22-8:23>
                path <8:17-8:20>
                  segment <8:17-8:20> self
              path <8:25-8:27>
                segment <8:25-8:27> rhs
  enum-def <12:1-16:1> Ordering <12:6-12:13> {} <12:15-16:1>
    enum-def-variant <13:5-13:8> Less <13:5-13:8>
    enum-def-variant <14:5-14:9> Equal <14:5-14:9>
    enum-def-variant <15:5-15:11> Greater <15:5-15:11>
  class-def <18:1-20:1> {} <18:21-20:1>
    generic-name <18:7-18:19> Comparable <18:7-18:16> <> <18:17-18:19>
      generic-parameter <18:18-18:18> R
    fn-def <19:5-19:45> () <19:11-19:32>
      generic-name <19:8-19:10> cmp <19:8-19:10>
      fn-def-parameter <19:12-19:22> self <19:12-19:15>
        ref-type <19:18-19:22>
          path <19:19-19:22>
            segment <19:19-19:22> Self
      fn-def-parameter <19:25-19:31> rhs <19:25-19:27>
        ref-type <19:30-19:31>
          path <19:31-19:31>
            segment <19:31-19:31> R
      path <19:37-19:44>
        segment <19:37-19:44> Ordering
  struct-def <22:1-26:1>
    generic-name <22:8-22:14> list <22:8-22:11> <> <22:12-22:14>
      generic-parameter <22:13-22:13> T
    field-def <23:5-23:11> ptr <23:5-23:7> : <23:8-23:8>
      ref-type <23:10-23:11>
        path <23:11-23:11>
          segment <23:11-23:11> T
    field-def <24:5-24:12> cap <24:5-24:7> : <24:8-24:8>
      primitive-type u64 <24:10-24:12>
    field-def <25:5-25:12> len <25:5-25:7> : <25:8-25:8>
      primitive-type u64 <25:10-25:12>
  struct-def <28:1-31:1>
    generic-name <28:8-28:15> slice <28:8-28:12> <> <28:13-28:15>
      generic-parameter <28:14-28:14> T
    field-def <29:5-29:11> ptr <29:5-29:7> : <29:8-29:8>
      ref-type <29:10-29:11>
        path <29:11-29:11>
          segment <29:11-29:11> T
    field-def <30:5-30:12> len <30:5-30:7> : <30:8-30:8>
      primitive-type u64 <30:10-30:12>
  struct-def <33:1-35:1>
    generic-name <33:8-33:13> string <33:8-33:13>
    field-def <34:5-34:18> list <34:5-34:8> : <34:9-34:9>
      path <34:11-34:18>
        generic-segment <34:11-34:18> list <34:11-34:14>
          primitive-type u8 <34:16-34:17>
  fn-def <37:1-94:1> () <37:11-37:25>
    generic-name <37:4-37:10> sort <37:4-37:7> <> <37:8-37:10>
      generic-parameter <37:9-37:9> T
    fn-def-parameter <37:12-37:24> list <37:12-37:15>
      path <37:18-37:24>
        generic-segment <37:18-37:24> list <37:18-37:21>
          path <37:23-37:23>
            segment <37:23-37:23> T
    where-clause <37:33-37:48> T <37:33-37:33>
      path <37:36-37:48>
        generic-segment <37:36-37:48> Comparable <37:36-37:45>
          path <37:47-37:47>
            segment <37:47-37:47> T
    block <37:50-94:1>
      use-stmt <38:5-38:25>
        path <38:9-38:24>
          segment <38:9-38:11> std
          segment <38:14-38:16> mem
          segment <38:19-38:24> forget
      simple-expr-stmt <40:5-40:41>
        call-expr <40:5-40:40> () <40:14-40:40>
          path <40:5-40:13>
            segment <40:5-40:13> quicksort
          member-expr <40:15-40:22> . <40:19-40:19> ptr <40:20-40:22>
            path <40:15-40:18>
              segment <40:15-40:18> list
          lit-expr i32 0 <40:25-40:25>
          binary-expr <40:28-40:39> - <40:37-40:37>
            member-expr <40:28-40:35> . <40:32-40:32> len <40:33-40:35>
              path <40:28-40:31>
                segment <40:28-40:31> list
            lit-expr i32 1 <40:39-40:39>
      fn-def <42:5-50:5> () <42:20-42:52>
        generic-name <42:8-42:19> quicksort <42:8-42:16> <> <42:17-42:19>
          generic-parameter <42:18-42:18> T
        fn-def-parameter <42:21-42:29> slice <42:21-42:25>
          ref-type <42:28-42:29>
            path <42:29-42:29>
              segment <42:29-42:29> T
        fn-def-parameter <42:32-42:41> start <42:32-42:36>
          primitive-type u64 <42:39-42:41>
        fn-def-parameter <42:44-42:51> end <42:44-42:46>
          primitive-type u64 <42:49-42:51>
        where-clause <42:60-42:75> T <42:60-42:60>
          path <42:63-42:75>
            generic-segment <42:63-42:75> Comparable <42:63-42:72>
              path <42:74-42:74>
                segment <42:74-42:74> T
        block <42:77-50:5>
          if-stmt <43:9-49:9>
            if-clause <43:9-45:9>
              binary-expr <43:12-43:26> < <43:24-43:24>
                binary-expr <43:12-43:22> - <43:16-43:16>
                  path <43:12-43:14>
                    segment <43:12-43:14> end
                  path <43:18-43:22>
                    segment <43:18-43:22> start
                lit-expr i32 6 <43:26-43:26>
              block <43:28-45:9>
                simple-expr-stmt <44:13-44:46>
                  call-expr <44:13-44:45> () <44:27-44:45>
                    path <44:13-44:26>
                      segment <44:13-44:26> insertion_sort
                    path <44:28-44:32>
                      segment <44:28-44:32> slice
                    path <44:35-44:39>
                      segment <44:35-44:39> start
                    path <44:42-44:44>
                      segment <44:42-44:44> end
            else-clause <45:11-49:9>
              block <45:16-49:9>
                var-decl-stmt <46:13-46:53> mutable pivot <46:17-46:21>
                  call-expr <46:25-46:52> () <46:34-46:52>
                    path <46:25-46:33>
                      segment <46:25-46:33> partition
                    path <46:35-46:39>
                      segment <46:35-46:39> slice
                    path <46:42-46:46>
                      segment <46:42-46:46> start
                    path <46:49-46:51>
                      segment <46:49-46:51> end
                simple-expr-stmt <47:13-47:43>
                  call-expr <47:13-47:42> () <47:22-47:42>
                    path <47:13-47:21>
                      segment <47:13-47:21> quicksort
                    path <47:23-47:27>
                      segment <47:23-47:27> slice
                    path <47:30-47:34>
                      segment <47:30-47:34> start
                    path <47:37-47:41>
                      segment <47:37-47:41> pivot
                simple-expr-stmt <48:13-48:45>
                  call-expr <48:13-48:44> () <48:22-48:44>
                    path <48:13-48:21>
                      segment <48:13-48:21> quicksort
                    path <48:23-48:27>
                      segment <48:23-48:27> slice
                    binary-expr <48:30-48:38> + <48:36-48:36>
                      path <48:30-48:34>
                        segment <48:30-48:34> pivot
                      lit-expr i32 1 <48:38-48:38>
                    path <48:41-48:43>
                      segment <48:41-48:43> end
      fn-def <53:5-77:5> () <53:20-53:52>
        generic-name <53:8-53:19> partition <53:8-53:16> <> <53:17-53:19>
          generic-parameter <53:18-53:18> T
        fn-def-parameter <53:21-53:29> slice <53:21-53:25>
          ref-type <53:28-53:29>
            path <53:29-53:29>
              segment <53:29-53:29> T
        fn-def-parameter <53:32-53:41> start <53:32-53:36>
          primitive-type u64 <53:39-53:41>
        fn-def-parameter <53:44-53:51> end <53:44-53:46>
          primitive-type u64 <53:49-53:51>
        where-clause <53:60-53:75> T <53:60-53:60>
          path <53:63-53:75>
            generic-segment <53:63-53:75> Comparable <53:63-53:72>
              path <53:74-53:74>
                segment <53:74-53:74> T
        block <53:77-77:5>
          var-decl-stmt <54:9-54:39> mutable pivot <54:13-54:17>
            array-index-expr <54:21-54:38> [] <54:26-54:38>
              path <54:21-54:25>
                segment <54:21-54:25> slice
              path <54:27-54:37>
                segment <54:27-54:37> pivot_index
          loop-stmt <55:9-76:9>
            block <55:14-76:9>
              assign-expr-stmt <56:13-56:23> += <56:19-56:20>
                path <56:13-56:17>
                  segment <56:13-56:17> start
                lit-expr i32 1 <56:22-56:22>
              while-stmt <57:13-59:13>
                binary-expr <57:19-57:38> < <57:32-57:32>
                  array-index-expr <57:19-57:30> [] <57:24-57:30>
                    path <57:19-57:23>
                      segment <57:19-57:23> slice
                    path <57:25-57:29>
                      segment <57:25-57:29> start
                  path <57:34-57:38>
                    segment <57:34-57:38> pivot
                block <57:40-59:13>
                  assign-expr-stmt <58:17-58:27> += <58:23-58:24>
                    path <58:17-58:21>
                      segment <58:17-58:21> start
                    lit-expr i32 1 <58:26-58:26>
              assign-expr-stmt <60:13-60:23> -= <60:19-60:20>
                path <60:13-60:17>
                  segment <60:13-60:17> start
                lit-expr i32 1 <60:22-60:22>
              assign-expr-stmt <62:13-62:21> -= <62:17-62:18>
                path <62:13-62:15>
                  segment <62:13-62:15> end
                lit-expr i32 1 <62:20-62:20>
              while-stmt <63:13-65:13>
                binary-expr <63:19-63:36> > <63:30-63:30>
                  array-index-expr <63:19-63:28> [] <63:24-63:28>
                    path <63:19-63:23>
                      segment <63:19-63:23> slice
                    path <63:25-63:27>
                      segment <63:25-63:27> end
                  path <63:32-63:36>
                    segment <63:32-63:36> pivot
                block <63:38-65:13>
                  assign-expr-stmt <64:17-64:25> -= <64:21-64:22>
                    path <64:17-64:19>
                      segment <64:17-64:19> end
                    lit-expr i32 1 <64:24-64:24>
              assign-expr-stmt <66:13-66:21> += <66:17-66:18>
                path <66:13-66:15>
                  segment <66:13-66:15> end
                lit-expr i32 1 <66:20-66:20>
              if-stmt <68:13-70:13>
                if-clause <68:13-70:13>
                  binary-expr <68:16-68:27> >= <68:22-68:23>
                    path <68:16-68:20>
                      segment <68:16-68:20> start
                    path <68:25-68:27>
                      segment <68:25-68:27> end
                  block <68:29-70:13>
                    ret-stmt <69:17-69:27>
                      path <69:24-69:26>
                        segment <69:24-69:26> end
              var-decl-stmt <72:13-72:33> mutable x <72:17-72:17>
                array-index-expr <72:21-72:32> [] <72:26-72:32>
                  path <72:21-72:25>
                    segment <72:21-72:25> slice
                  path <72:27-72:31>
                    segment <72:27-72:31> start
              assign-expr-stmt <73:13-73:38> = <73:26-73:26>
                array-index-expr <73:13-73:24> [] <73:18-73:24>
                  path <73:13-73:17>
                    segment <73:13-73:17> slice
                  path <73:19-73:23>
                    segment <73:19-73:23> start
                array-index-expr <73:28-73:37> [] <73:33-73:37>
                  path <73:28-73:32>
                    segment <73:28-73:32> slice
                  path <73:34-73:36>
                    segment <73:34-73:36> end
              assign-expr-stmt <74:13-74:27> = <74:24-74:24>
                array-index-expr <74:13-74:22> [] <74:18-74:22>
                  path <74:13-74:17>
                    segment <74:13-74:17> slice
                  path <74:19-74:21>
                    segment <74:19-74:21> end
                path <74:26-74:26>
                  segment <74:26-74:26> x
              simple-expr-stmt <75:13-75:22>
                call-expr <75:13-75:21> () <75:19-75:21>
                  path <75:13-75:18>
                    segment <75:13-75:18> forget
                  path <75:20-75:20>
                    segment <75:20-75:20> x
      fn-def <79:5-93:5> () <79:25-79:57>
        generic-name <79:8-79:24> insertion_sort <79:8-79:21> <> <79:22-79:24>
          generic-parameter <79:23-79:23> T
        fn-def-parameter <79:26-79:34> slice <79:26-79:30>
          ref-type <79:33-79:34>
            path <79:34-79:34>
              segment <79:34-79:34> T
        fn-def-parameter <79:37-79:46> start <79:37-79:41>
          primitive-type u64 <79:44-79:46>
        fn-def-parameter <79:49-79:56> end <79:49-79:51>
          primitive-type u64 <79:54-79:56>
        where-clause <79:65-79:80> T <79:65-79:65>
          path <79:68-79:80>
            generic-segment <79:68-79:80> Comparable <79:68-79:77>
              path <79:79-79:79>
                segment <79:79-79:79> T
        block <79:82-93:5>
          for-stmt <80:9-92:9> iter-var i <80:13-80:13>
            range-both-expr <80:18-80:35> dotdot <80:27-80:28>
              binary-expr <80:18-80:26> + <80:24-80:24>
                path <80:18-80:22>
                  segment <80:18-80:22> start
                lit-expr i32 1 <80:26-80:26>
              binary-expr <80:29-80:35> + <80:33-80:33>
                path <80:29-80:31>
                  segment <80:29-80:31> end
                lit-expr i32 1 <80:35-80:35>
            block <80:37-92:9>
              if-stmt <81:13-91:13>
                if-clause <81:13-91:13>
                  binary-expr <81:16-81:38> < <81:25-81:25>
                    array-index-expr <81:16-81:23> [] <81:21-81:23>
                      path <81:16-81:20>
                        segment <81:16-81:20> slice
                      path <81:22-81:22>
                        segment <81:22-81:22> i
                    array-index-expr <81:27-81:38> [] <81:32-81:38>
                      path <81:27-81:31>
                        segment <81:27-81:31> slice
                      binary-expr <81:33-81:37> - <81:35-81:35>
                        path <81:33-81:33>
                          segment <81:33-81:33> i
                        lit-expr i32 1 <81:37-81:37>
                  block <81:40-91:13>
                    for-stmt <82:17-90:17> iter-var j <82:21-82:21>
                      range-both-expr <82:26-82:33> dotdot <82:31-82:32>
                        path <82:26-82:30>
                          segment <82:26-82:30> start
                        path <82:33-82:33>
                          segment <82:33-82:33> i
                      block <82:35-90:17>
                        if-stmt <83:21-89:21>
                          if-clause <83:21-89:21>
                            binary-expr <83:24-83:42> > <83:33-83:33>
                              array-index-expr <83:24-83:31> [] <83:29-83:31>
                                path <83:24-83:28>
                                  segment <83:24-83:28> slice
                                path <83:30-83:30>
                                  segment <83:30-83:30> j
                              array-index-expr <83:35-83:42> [] <83:40-83:42>
                                path <83:35-83:39>
                                  segment <83:35-83:39> slice
                                path <83:41-83:41>
                                  segment <83:41-83:41> i
                            block <83:44-89:21>
                              var-decl-stmt <84:25-84:45> mutable x <84:29-84:29>
                                array-index-expr <84:33-84:44> [] <84:38-84:44>
                                  path <84:33-84:37>
                                    segment <84:33-84:37> slice
                                  binary-expr <84:39-84:43> - <84:41-84:41>
                                    path <84:39-84:39>
                                      segment <84:39-84:39> j
                                    lit-expr i32 1 <84:43-84:43>
                              assign-expr-stmt <85:25-85:48> = <85:38-85:38>
                                array-index-expr <85:25-85:36> [] <85:30-85:36>
                                  path <85:25-85:29>
                                    segment <85:25-85:29> slice
                                  binary-expr <85:31-85:35> - <85:33-85:33>
                                    path <85:31-85:31>
                                      segment <85:31-85:31> j
                                    lit-expr i32 1 <85:35-85:35>
                                array-index-expr <85:40-85:47> [] <85:45-85:47>
                                  path <85:40-85:44>
                                    segment <85:40-85:44> slice
                                  path <85:46-85:46>
                                    segment <85:46-85:46> i
                              assign-expr-stmt <86:25-86:37> = <86:34-86:34>
                                array-index-expr <86:25-86:32> [] <86:30-86:32>
                                  path <86:25-86:29>
                                    segment <86:25-86:29> slice
                                  path <86:31-86:31>
                                    segment <86:31-86:31> i
                                path <86:36-86:36>
                                  segment <86:36-86:36> x
                              simple-expr-stmt <87:25-87:34>
                                call-expr <87:25-87:33> () <87:31-87:33>
                                  path <87:25-87:30>
                                    segment <87:25-87:30> forget
                                  path <87:32-87:32>
                                    segment <87:32-87:32> x
                              break-stmt <88:25-88:30>
  fn-def <96:1-102:1> () <96:13-96:42>
    generic-name <96:4-96:12> map <96:4-96:6> <> <96:7-96:12>
      generic-parameter <96:8-96:8> T
      generic-parameter <96:11-96:11> U
    fn-def-parameter <96:14-96:26> list <96:14-96:17>
      path <96:20-96:26>
        generic-segment <96:20-96:26> list <96:20-96:23>
          path <96:25-96:25>
            segment <96:25-96:25> T
    fn-def-parameter <96:29-96:41> f <96:29-96:29>
      fn-type <96:32-96:41> () <96:34-96:36>
        fn-type-parameter <96:35-96:35>
          path <96:35-96:35>
            segment <96:35-96:35> T
        path <96:41-96:41>
          segment <96:41-96:41> U
    path <96:47-96:53>
      generic-segment <96:47-96:53> list <96:47-96:50>
        path <96:52-96:52>
          segment <96:52-96:52> U
    block <96:55-102:1>
      var-decl-stmt <97:5-97:51> mutable result <97:9-97:14>
        call-expr <97:18-97:50> () <97:41-97:50>
          path <97:18-97:40>
            generic-segment <97:18-97:26> list <97:18-97:21>
              path <97:25-97:25>
                segment <97:25-97:25> T
            segment <97:29-97:40> with_capcity
          member-expr <97:42-97:49> . <97:46-97:46> len <97:47-97:49>
            path <97:42-97:45>
              segment <97:42-97:45> list
      for-stmt <98:5-100:5> iter-var item <98:9-98:12>
        path <98:17-98:20>
          segment <98:17-98:20> list
        block <98:22-100:5>
          simple-expr-stmt <99:9-99:28>
            call-expr <99:9-99:27> () <99:19-99:27>
              member-expr <99:9-99:18> . <99:15-99:15> add <99:16-99:18>
                path <99:9-99:14>
                  segment <99:9-99:14> result
              call-expr <99:20-99:26> () <99:21-99:26>
                path <99:20-99:20>
                  segment <99:20-99:20> f
                path <99:22-99:25>
                  segment <99:22-99:25> item
      ret-stmt <101:5-101:18>
        path <101:12-101:17>
          segment <101:12-101:17> result
  fn-def <104:1-109:1> () <104:16-104:57>
    generic-name <104:4-104:15> reduce <104:4-104:9> <> <104:10-104:15>
      generic-parameter <104:11-104:11> T
      generic-parameter <104:14-104:14> A
    fn-def-parameter <104:17-104:29> list <104:17-104:20>
      path <104:23-104:29>
        generic-segment <104:23-104:29> list <104:23-104:26>
          path <104:28-104:28>
            segment <104:28-104:28> T
    fn-def-parameter <104:32-104:38> init <104:32-104:35>
      path <104:38-104:38>
        segment <104:38-104:38> A
    fn-def-parameter <104:41-104:56> f <104:41-104:41>
      fn-type <104:44-104:56> () <104:46-104:51>
        fn-type-parameter <104:47-104:47>
          path <104:47-104:47>
            segment <104:47-104:47> A
        fn-type-parameter <104:50-104:50>
          path <104:50-104:50>
            segment <104:50-104:50> T
        path <104:56-104:56>
          segment <104:56-104:56> A
    path <104:62-104:62>
      segment <104:62-104:62> A
    block <104:64-109:1>
      for-stmt <105:5-107:5> iter-var item <105:9-105:12>
        path <105:17-105:20>
          segment <105:17-105:20> list
        block <105:22-107:5>
          assign-expr-stmt <106:9-106:29> = <106:14-106:14>
            path <106:9-106:12>
              segment <106:9-106:12> init
            call-expr <106:16-106:28> () <106:17-106:28>
              path <106:16-106:16>
                segment <106:16-106:16> f
              path <106:18-106:21>
                segment <106:18-106:21> init
              path <106:24-106:27>
                segment <106:24-106:27> item
      ret-stmt <108:5-108:16>
        path <108:12-108:15>
          segment <108:12-108:15> init
  struct-def <116:1-119:1>
    generic-name <116:8-116:13> Map <116:8-116:10> <> <116:11-116:13>
      generic-parameter <116:12-116:12> I
    field-def <117:5-117:12> iter <117:5-117:8> : <117:9-117:9>
      ref-type <117:11-117:12>
        path <117:12-117:12>
          segment <117:12-117:12> I
    field-def <118:5-118:17> f <118:5-118:5> : <118:6-118:6>
      fn-type <118:8-118:17> () <118:10-118:12>
        fn-type-parameter <118:11-118:11>
          path <118:11-118:11>
            segment <118:11-118:11> T
        path <118:17-118:17>
          segment <118:17-118:17> U
  class-def <121:1-129:1> {} <121:16-129:1>
    generic-name <121:7-121:14> Iterable <121:7-121:14>
    type-def <122:5-122:14>
      generic-name <122:10-122:13> Item <122:10-122:13>
    fn-def <124:5-124:47> () <124:12-124:24>
      generic-name <124:8-124:11> next <124:8-124:11>
      fn-def-parameter <124:13-124:23> self <124:13-124:16>
        ref-type <124:19-124:23>
          path <124:20-124:23>
            segment <124:20-124:23> Self
      path <124:29-124:46>
        generic-segment <124:29-124:46> Option <124:29-124:34>
          path <124:36-124:45>
            segment <124:36-124:39> Self
            segment <124:42-124:45> Item
    fn-def <126:5-128:5> () <126:14-126:41>
      generic-name <126:8-126:13> map <126:8-126:10> <> <126:11-126:13>
        generic-parameter <126:12-126:12> U
      fn-def-parameter <126:15-126:25> self <126:15-126:18>
        ref-type <126:21-126:25>
          path <126:22-126:25>
            segment <126:22-126:25> Self
      fn-def-parameter <126:28-126:40> f <126:28-126:28>
        fn-type <126:31-126:40> () <126:33-126:35>
          fn-type-parameter <126:34-126:34>
            path <126:34-126:34>
              segment <126:34-126:34> T
          path <126:40-126:40>
            segment <126:40-126:40> U
      path <126:46-126:54>
        generic-segment <126:46-126:54> Map <126:46-126:48>
          path <126:50-126:53>
            segment <126:50-126:53> This
      block <126:56-128:5>
        ret-stmt <127:9-127:39>
          object-expr <127:16-127:38> {} <127:19-127:38>
            path <127:16-127:18>
              segment <127:16-127:18> Map
            object-expr-field <127:21-127:30> iter <127:21-127:24>
              path <127:27-127:30>
                segment <127:27-127:30> self
            object-expr-field <127:33-127:36> f <127:33-127:33>
              path <127:36-127:36>
                segment <127:36-127:36> f
  impl-block <131:1-139:1> {} <131:30-139:1>
    path <131:6-131:13>
      segment <131:6-131:13> Iterable
    path <131:19-131:28>
      generic-segment <131:19-131:28> VecIter <131:19-131:25>
        path <131:27-131:27>
          segment <131:27-131:27> T
    type-def <132:5-132:19>
      generic-name <132:10-132:13> Item <132:10-132:13>
      ref-type <132:17-132:18>
        path <132:18-132:18>
          segment <132:18-132:18> T
    fn-def <134:5-138:5> () <134:12-134:24>
      generic-name <134:8-134:11> next <134:8-134:11>
      fn-def-parameter <134:13-134:23> self <134:13-134:16>
        ref-type <134:19-134:23>
          path <134:20-134:23>
            segment <134:20-134:23> Self
      path <134:29-134:46>
        generic-segment <134:29-134:46> Option <134:29-134:34>
          path <134:36-134:45>
            segment <134:36-134:39> Self
            segment <134:42-134:45> Item
      block <134:48-138:5>
        var-decl-stmt <135:9-135:30> mutable result <135:13-135:18>
          member-expr <135:22-135:29> . <135:26-135:26> ptr <135:27-135:29>
            path <135:22-135:25>
              segment <135:22-135:25> self
        simple-expr-stmt <136:9-136:27>
          call-expr <136:9-136:26> () <136:24-136:26>
            member-expr <136:9-136:23> . <136:17-136:17> offset <136:18-136:23>
              member-expr <136:9-136:16> . <136:13-136:13> ptr <136:14-136:16>
                path <136:9-136:12>
                  segment <136:9-136:12> self
            lit-expr i32 1 <136:25-136:25>
        ret-stmt <137:9-137:22>
          path <137:16-137:21>
            segment <137:16-137:21> result
  module-stmt <142:1-142:11> gcd <142:8-142:10>
  fn-def <143:1-152:1> () <143:14-143:15>
    generic-name <143:4-143:13> additional <143:4-143:13>
    block <143:17-152:1>
      var-decl-stmt <144:5-144:34> mutable a <144:9-144:9>
        array-type <144:12-144:18>
          primitive-type u8 <144:13-144:14>
          lit-expr i32 4 <144:17-144:17>
        array-expr <144:22-144:33>
          lit-expr i32 1 <144:23-144:23>
          lit-expr i32 2 <144:26-144:26>
          lit-expr i32 3 <144:29-144:29>
          lit-expr i32 4 <144:32-144:32>
      var-decl-stmt <145:5-145:30> mutable b <145:9-145:9>
        tuple-type <145:12-145:20>
          primitive-type u8 <145:13-145:14>
          primitive-type u32 <145:17-145:19>
        tuple-expr <145:24-145:29>
          lit-expr i32 5 <145:25-145:25>
          lit-expr i32 6 <145:28-145:28>
      var-decl-stmt <146:5-146:43> mutable c <146:9-146:9>
        binary-expr <146:13-146:42> + <146:36-146:36>
          binary-expr <146:13-146:34> + <146:28-146:28>
            binary-expr <146:13-146:26> + <146:21-146:21>
              tuple-index-expr <146:13-146:19> . <146:18-146:18> 1 <146:19-146:19>
                paren-expr <146:13-146:17>
                  tuple-index-expr <146:14-146:16> . <146:15-146:15> 0 <146:16-146:16>
                    path <146:14-146:14>
                      segment <146:14-146:14> b
              paren-expr <146:23-146:26>
                range-full-expr <146:24-146:25>
            paren-expr <146:30-146:34>
              range-left-expr <146:31-146:33>
                lit-expr i32 1 <146:31-146:31>
          paren-expr <146:38-146:42>
            range-right-expr <146:39-146:41>
              lit-expr i32 1 <146:41-146:41>
      block-stmt <147:5-149:5>
        block <147:5-149:5>
      continue-stmt <150:5-150:13>
      simple-expr-stmt <151:5-151:54>
        call-expr <151:5-151:53> () <151:40-151:53>
          path <151:5-151:39>
            cast-segment <151:5-151:28>
              path <151:6-151:11>
                generic-segment <151:6-151:11> Vec <151:6-151:8>
                  path <151:10-151:10>
                    segment <151:10-151:10> T
              path <151:16-151:27>
                segment <151:16-151:27> IntoIterator
            segment <151:31-151:39> into_iter
          array-index-expr <151:41-151:52> [] <151:44-151:52>
            path <151:41-151:43>
              segment <151:41-151:43> vec
            path <151:45-151:45>
              segment <151:45-151:45> a
            path <151:48-151:48>
              segment <151:48-151:48> b
            path <151:51-151:51>
              segment <151:51-151:51> c
module tests/ast/gcd.f3
  fn-def <4:1-17:1> () <4:8-4:9>
    generic-name <4:4-4:7> main <4:4-4:7>
    block <4:11-17:1>
      loop-stmt <6:5-16:5> @main <6:5-6:9>
        block <6:17-16:5>
          simple-expr-stmt <7:9-7:35>
            call-expr <7:9-7:34> () <7:16-7:34>
              path <7:9-7:15>
                segment <7:9-7:15> writeln
              lit-expr str "Input 2 numbers" <7:17-7:33>
          var-decl-stmt <8:9-8:27> mutable a <8:13-8:13>
            call-expr <8:17-8:26> () <8:25-8:26>
              path <8:17-8:24>
                segment <8:17-8:24> read_i32
          var-decl-stmt <9:9-9:27> mutable b <9:13-9:13>
            call-expr <9:17-9:26> () <9:25-9:26>
              path <9:17-9:24>
                segment <9:17-9:24> read_i32
          if-stmt <11:9-13:9>
            if-clause <11:9-13:9>
              binary-expr <11:12-11:27> && <11:19-11:20>
                binary-expr <11:12-11:17> == <11:14-11:15>
                  path <11:12-11:12>
                    segment <11:12-11:12> a
                  lit-expr i32 0 <11:17-11:17>
                binary-expr <11:22-11:27> == <11:24-11:25>
                  path <11:22-11:22>
                    segment <11:22-11:22> b
                  lit-expr i32 0 <11:27-11:27>
              block <11:29-13:9>
                break-stmt <12:13-12:24> @main <12:19-12:23>
          simple-expr-stmt <15:9-15:101>
            call-expr <15:9-15:100> () <15:16-15:100>
              path <15:9-15:15>
                segment <15:9-15:15> writeln
              binary-expr <15:17-15:99> + <15:75-15:75>
                binary-expr <15:17-15:73> + <15:65-15:65>
                  binary-expr <15:17-15:63> + <15:49-15:49>
                    binary-expr <15:17-15:47> + <15:42-15:42>
                      binary-expr <15:17-15:40> + <15:26-15:26>
                        lit-expr str "最大公约数(" <15:17-15:24>
                        call-expr <15:28-15:40> () <15:39-15:40>
                          member-expr <15:28-15:38> . <15:29-15:29> to_string <15:30-15:38>
                            path <15:28-15:28>
                              segment <15:28-15:28> a
                      lit-expr str ", " <15:44-15:47>
                    call-expr <15:51-15:63> () <15:62-15:63>
                      member-expr <15:51-15:61> . <15:52-15:52> to_string <15:53-15:61>
                        path <15:51-15:51>
                          segment <15:51-15:51> b
                  lit-expr str ") is " <15:67-15:73>
                call-expr <15:77-15:99> () <15:98-15:99>
                  member-expr <15:77-15:97> . <15:88-15:88> to_string <15:89-15:97>
                    call-expr <15:77-15:87> () <15:82-15:87>
                      path <15:77-15:81>
                        segment <15:77-15:81> 最大公约数
                      path <15:83-15:83>
                        segment <15:83-15:83> a
                      path <15:86-15:86>
                        segment <15:86-15:86> b
  fn-def <19:1-28:1> () <19:9-19:24>
    generic-name <19:4-19:8> 最大公约数 <19:4-19:8>
    fn-def-parameter <19:10-19:15> a <19:10-19:10>
      primitive-type i32 <19:13-19:15>
    fn-def-parameter <19:18-19:23> b <19:18-19:18>
      primitive-type i32 <19:21-19:23>
    primitive-type i32 <19:29-19:31>
    block <19:33-28:1>
      if-stmt <20:5-22:5>
        if-clause <20:5-22:5>
          binary-expr <20:8-20:13> == <20:10-20:11>
            path <20:8-20:8>
              segment <20:8-20:8> b
            lit-expr i32 0 <20:13-20:13>
          block <20:15-22:5>
            ret-stmt <21:9-21:17>
              path <21:16-21:16>
                segment <21:16-21:16> a
      if-stmt <23:5-27:5>
        if-clause <23:5-25:5>
          binary-expr <23:8-23:12> < <23:10-23:10>
            path <23:8-23:8>
              segment <23:8-23:8> a
            path <23:12-23:12>
              segment <23:12-23:12> b
          block <23:14-25:5>
            ret-stmt <24:9-24:27>
              call-expr <24:16-24:26> () <24:21-24:26>
                path <24:16-24:20>
                  segment <24:16-24:20> 最大公约数
                path <24:22-24:22>
                  segment <24:22-24:22> b
                path <24:25-24:25>
                  segment <24:25-24:25> a
        else-clause <25:7-27:5>
          block <25:12-27:5>
            ret-stmt <26:9-26:31>
              call-expr <26:16-26:30> () <26:21-26:30>
                path <26:16-26:20>
                  segment <26:16-26:20> 最大公约数
                path <26:22-26:22>
                  segment <26:22-26:22> b
                binary-expr <26:25-26:29> % <26:27-26:27>
                  path <26:25-26:25>
                    segment <26:25-26:25> a
                  path <26:29-26:29>
                    segment <26:29-26:29> b
