module tests/ast/generic.f3
  struct-def <2:1-6:1>
    generic-name <2:8-2:14> list <2:8-2:11> <> <2:12-2:14>
      generic-parameter <2:13-2:13> T <2:13-2:13>
    field-def <3:5-3:11> ptr <3:5-3:7> : <3:8-3:8>
      ref-type <3:10-3:11>
        path <3:11-3:11>
          segment <3:11-3:11> T
    field-def <4:5-4:12> cap <4:5-4:7> : <4:8-4:8>
      primitive-type u64 <4:10-4:12>
    field-def <5:5-5:12> len <5:5-5:7> : <5:8-5:8>
      primitive-type u64 <5:10-5:12>
  struct-def <8:1-11:1>
    generic-name <8:8-8:15> slice <8:8-8:12> <> <8:13-8:15>
      generic-parameter <8:14-8:14> T <8:14-8:14>
    field-def <9:5-9:11> ptr <9:5-9:7> : <9:8-9:8>
      ref-type <9:10-9:11>
        path <9:11-9:11>
          segment <9:11-9:11> T
    field-def <10:5-10:12> len <10:5-10:7> : <10:8-10:8>
      primitive-type u64 <10:10-10:12>
  struct-def <13:1-15:1>
    generic-name <13:8-13:13> string <13:8-13:13>
    field-def <14:5-14:18> list <14:5-14:8> : <14:9-14:9>
      path <14:11-14:18>
        segment <14:11-14:18> list <14:11-14:14>
          primitive-type u8 <14:16-14:17>
  fn-def <17:1-74:1> () <17:11-17:25>
    generic-name <17:4-17:10> sort <17:4-17:7> <> <17:8-17:10>
      generic-parameter <17:9-17:9> T <17:9-17:9>
    fn-def-parameter <17:12-17:24> list <17:12-17:15>
      path <17:18-17:24>
        segment <17:18-17:24> list <17:18-17:21>
          path <17:23-17:23>
            segment <17:23-17:23> T
    block <17:27-74:1>
      use-stmt <18:5-18:25>
        path <18:9-18:24>
          segment <18:9-18:11> std
          segment <18:14-18:16> mem
          segment <18:19-18:24> forget
      simple-expr-stmt <20:5-20:41>
        call-expr <20:5-20:40> () <20:14-20:40>
          path <20:5-20:13>
            segment <20:5-20:13> quicksort
          member-expr <20:15-20:22> . <20:19-20:19> ptr <20:20-20:22>
            path <20:15-20:18>
              segment <20:15-20:18> list
          literal i32 0 <20:25-20:25>
          binary-expr <20:28-20:39> - <20:37-20:37>
            member-expr <20:28-20:35> . <20:32-20:32> len <20:33-20:35>
              path <20:28-20:31>
                segment <20:28-20:31> list
            literal i32 1 <20:39-20:39>
      fn-def <22:5-30:5> () <22:20-22:52>
        generic-name <22:8-22:19> quicksort <22:8-22:16> <> <22:17-22:19>
          generic-parameter <22:18-22:18> T <22:18-22:18>
        fn-def-parameter <22:21-22:29> slice <22:21-22:25>
          ref-type <22:28-22:29>
            path <22:29-22:29>
              segment <22:29-22:29> T
        fn-def-parameter <22:32-22:41> start <22:32-22:36>
          primitive-type u64 <22:39-22:41>
        fn-def-parameter <22:44-22:51> end <22:44-22:46>
          primitive-type u64 <22:49-22:51>
        block <22:54-30:5>
          if-stmt <23:9-29:9>
            if-clause <23:9-25:9>
              binary-expr <23:12-23:26> < <23:24-23:24>
                binary-expr <23:12-23:22> - <23:16-23:16>
                  path <23:12-23:14>
                    segment <23:12-23:14> end
                  path <23:18-23:22>
                    segment <23:18-23:22> start
                literal i32 6 <23:26-23:26>
              block <23:28-25:9>
                simple-expr-stmt <24:13-24:46>
                  call-expr <24:13-24:45> () <24:27-24:45>
                    path <24:13-24:26>
                      segment <24:13-24:26> insertion_sort
                    path <24:28-24:32>
                      segment <24:28-24:32> slice
                    path <24:35-24:39>
                      segment <24:35-24:39> start
                    path <24:42-24:44>
                      segment <24:42-24:44> end
            else-clause <25:11-29:9>
              block <25:16-29:9>
                var-def <26:13-26:53> mutable pivot <26:17-26:21>
                  call-expr <26:25-26:52> () <26:34-26:52>
                    path <26:25-26:33>
                      segment <26:25-26:33> partition
                    path <26:35-26:39>
                      segment <26:35-26:39> slice
                    path <26:42-26:46>
                      segment <26:42-26:46> start
                    path <26:49-26:51>
                      segment <26:49-26:51> end
                simple-expr-stmt <27:13-27:43>
                  call-expr <27:13-27:42> () <27:22-27:42>
                    path <27:13-27:21>
                      segment <27:13-27:21> quicksort
                    path <27:23-27:27>
                      segment <27:23-27:27> slice
                    path <27:30-27:34>
                      segment <27:30-27:34> start
                    path <27:37-27:41>
                      segment <27:37-27:41> pivot
                simple-expr-stmt <28:13-28:45>
                  call-expr <28:13-28:44> () <28:22-28:44>
                    path <28:13-28:21>
                      segment <28:13-28:21> quicksort
                    path <28:23-28:27>
                      segment <28:23-28:27> slice
                    binary-expr <28:30-28:38> + <28:36-28:36>
                      path <28:30-28:34>
                        segment <28:30-28:34> pivot
                      literal i32 1 <28:38-28:38>
                    path <28:41-28:43>
                      segment <28:41-28:43> end
      fn-def <33:5-57:5> () <33:20-33:52>
        generic-name <33:8-33:19> partition <33:8-33:16> <> <33:17-33:19>
          generic-parameter <33:18-33:18> T <33:18-33:18>
        fn-def-parameter <33:21-33:29> slice <33:21-33:25>
          ref-type <33:28-33:29>
            path <33:29-33:29>
              segment <33:29-33:29> T
        fn-def-parameter <33:32-33:41> start <33:32-33:36>
          primitive-type u64 <33:39-33:41>
        fn-def-parameter <33:44-33:51> end <33:44-33:46>
          primitive-type u64 <33:49-33:51>
        block <33:54-57:5>
          var-def <34:9-34:39> mutable pivot <34:13-34:17>
            array-index-expr <34:21-34:38> [] <34:26-34:38>
              path <34:21-34:25>
                segment <34:21-34:25> slice
              path <34:27-34:37>
                segment <34:27-34:37> pivot_index
          loop-stmt <35:9-56:9>
            block <35:14-56:9>
              assign-expr-stmt <36:13-36:23> += <36:19-36:20>
                path <36:13-36:17>
                  segment <36:13-36:17> start
                literal i32 1 <36:22-36:22>
              while-stmt <37:13-39:13>
                binary-expr <37:19-37:38> < <37:32-37:32>
                  array-index-expr <37:19-37:30> [] <37:24-37:30>
                    path <37:19-37:23>
                      segment <37:19-37:23> slice
                    path <37:25-37:29>
                      segment <37:25-37:29> start
                  path <37:34-37:38>
                    segment <37:34-37:38> pivot
                block <37:40-39:13>
                  assign-expr-stmt <38:17-38:27> += <38:23-38:24>
                    path <38:17-38:21>
                      segment <38:17-38:21> start
                    literal i32 1 <38:26-38:26>
              assign-expr-stmt <40:13-40:23> -= <40:19-40:20>
                path <40:13-40:17>
                  segment <40:13-40:17> start
                literal i32 1 <40:22-40:22>
              assign-expr-stmt <42:13-42:21> -= <42:17-42:18>
                path <42:13-42:15>
                  segment <42:13-42:15> end
                literal i32 1 <42:20-42:20>
              while-stmt <43:13-45:13>
                binary-expr <43:19-43:36> > <43:30-43:30>
                  array-index-expr <43:19-43:28> [] <43:24-43:28>
                    path <43:19-43:23>
                      segment <43:19-43:23> slice
                    path <43:25-43:27>
                      segment <43:25-43:27> end
                  path <43:32-43:36>
                    segment <43:32-43:36> pivot
                block <43:38-45:13>
                  assign-expr-stmt <44:17-44:25> -= <44:21-44:22>
                    path <44:17-44:19>
                      segment <44:17-44:19> end
                    literal i32 1 <44:24-44:24>
              assign-expr-stmt <46:13-46:21> += <46:17-46:18>
                path <46:13-46:15>
                  segment <46:13-46:15> end
                literal i32 1 <46:20-46:20>
              if-stmt <48:13-50:13>
                if-clause <48:13-50:13>
                  binary-expr <48:16-48:27> >= <48:22-48:23>
                    path <48:16-48:20>
                      segment <48:16-48:20> start
                    path <48:25-48:27>
                      segment <48:25-48:27> end
                  block <48:29-50:13>
                    ret-stmt <49:17-49:27>
                      path <49:24-49:26>
                        segment <49:24-49:26> end
              var-def <52:13-52:33> mutable x <52:17-52:17>
                array-index-expr <52:21-52:32> [] <52:26-52:32>
                  path <52:21-52:25>
                    segment <52:21-52:25> slice
                  path <52:27-52:31>
                    segment <52:27-52:31> start
              assign-expr-stmt <53:13-53:38> = <53:26-53:26>
                array-index-expr <53:13-53:24> [] <53:18-53:24>
                  path <53:13-53:17>
                    segment <53:13-53:17> slice
                  path <53:19-53:23>
                    segment <53:19-53:23> start
                array-index-expr <53:28-53:37> [] <53:33-53:37>
                  path <53:28-53:32>
                    segment <53:28-53:32> slice
                  path <53:34-53:36>
                    segment <53:34-53:36> end
              assign-expr-stmt <54:13-54:27> = <54:24-54:24>
                array-index-expr <54:13-54:22> [] <54:18-54:22>
                  path <54:13-54:17>
                    segment <54:13-54:17> slice
                  path <54:19-54:21>
                    segment <54:19-54:21> end
                path <54:26-54:26>
                  segment <54:26-54:26> x
              simple-expr-stmt <55:13-55:22>
                call-expr <55:13-55:21> () <55:19-55:21>
                  path <55:13-55:18>
                    segment <55:13-55:18> forget
                  path <55:20-55:20>
                    segment <55:20-55:20> x
      fn-def <59:5-73:5> () <59:25-59:57>
        generic-name <59:8-59:24> insertion_sort <59:8-59:21> <> <59:22-59:24>
          generic-parameter <59:23-59:23> T <59:23-59:23>
        fn-def-parameter <59:26-59:34> slice <59:26-59:30>
          ref-type <59:33-59:34>
            path <59:34-59:34>
              segment <59:34-59:34> T
        fn-def-parameter <59:37-59:46> start <59:37-59:41>
          primitive-type u64 <59:44-59:46>
        fn-def-parameter <59:49-59:56> end <59:49-59:51>
          primitive-type u64 <59:54-59:56>
        block <59:59-73:5>
          for-stmt <60:9-72:9> iter-var i <60:13-60:13>
            range-both-expr <60:18-60:35> dotdot <60:27-60:28>
              binary-expr <60:18-60:26> + <60:24-60:24>
                path <60:18-60:22>
                  segment <60:18-60:22> start
                literal i32 1 <60:26-60:26>
              binary-expr <60:29-60:35> + <60:33-60:33>
                path <60:29-60:31>
                  segment <60:29-60:31> end
                literal i32 1 <60:35-60:35>
            block <60:37-72:9>
              if-stmt <61:13-71:13>
                if-clause <61:13-71:13>
                  binary-expr <61:16-61:38> < <61:25-61:25>
                    array-index-expr <61:16-61:23> [] <61:21-61:23>
                      path <61:16-61:20>
                        segment <61:16-61:20> slice
                      path <61:22-61:22>
                        segment <61:22-61:22> i
                    array-index-expr <61:27-61:38> [] <61:32-61:38>
                      path <61:27-61:31>
                        segment <61:27-61:31> slice
                      binary-expr <61:33-61:37> - <61:35-61:35>
                        path <61:33-61:33>
                          segment <61:33-61:33> i
                        literal i32 1 <61:37-61:37>
                  block <61:40-71:13>
                    for-stmt <62:17-70:17> iter-var j <62:21-62:21>
                      range-both-expr <62:26-62:33> dotdot <62:31-62:32>
                        path <62:26-62:30>
                          segment <62:26-62:30> start
                        path <62:33-62:33>
                          segment <62:33-62:33> i
                      block <62:35-70:17>
                        if-stmt <63:21-69:21>
                          if-clause <63:21-69:21>
                            binary-expr <63:24-63:42> > <63:33-63:33>
                              array-index-expr <63:24-63:31> [] <63:29-63:31>
                                path <63:24-63:28>
                                  segment <63:24-63:28> slice
                                path <63:30-63:30>
                                  segment <63:30-63:30> j
                              array-index-expr <63:35-63:42> [] <63:40-63:42>
                                path <63:35-63:39>
                                  segment <63:35-63:39> slice
                                path <63:41-63:41>
                                  segment <63:41-63:41> i
                            block <63:44-69:21>
                              var-def <64:25-64:45> mutable x <64:29-64:29>
                                array-index-expr <64:33-64:44> [] <64:38-64:44>
                                  path <64:33-64:37>
                                    segment <64:33-64:37> slice
                                  binary-expr <64:39-64:43> - <64:41-64:41>
                                    path <64:39-64:39>
                                      segment <64:39-64:39> j
                                    literal i32 1 <64:43-64:43>
                              assign-expr-stmt <65:25-65:48> = <65:38-65:38>
                                array-index-expr <65:25-65:36> [] <65:30-65:36>
                                  path <65:25-65:29>
                                    segment <65:25-65:29> slice
                                  binary-expr <65:31-65:35> - <65:33-65:33>
                                    path <65:31-65:31>
                                      segment <65:31-65:31> j
                                    literal i32 1 <65:35-65:35>
                                array-index-expr <65:40-65:47> [] <65:45-65:47>
                                  path <65:40-65:44>
                                    segment <65:40-65:44> slice
                                  path <65:46-65:46>
                                    segment <65:46-65:46> i
                              assign-expr-stmt <66:25-66:37> = <66:34-66:34>
                                array-index-expr <66:25-66:32> [] <66:30-66:32>
                                  path <66:25-66:29>
                                    segment <66:25-66:29> slice
                                  path <66:31-66:31>
                                    segment <66:31-66:31> i
                                path <66:36-66:36>
                                  segment <66:36-66:36> x
                              simple-expr-stmt <67:25-67:34>
                                call-expr <67:25-67:33> () <67:31-67:33>
                                  path <67:25-67:30>
                                    segment <67:25-67:30> forget
                                  path <67:32-67:32>
                                    segment <67:32-67:32> x
                              break-stmt <68:25-68:30>
  fn-def <76:1-82:1> () <76:13-76:42>
    generic-name <76:4-76:12> map <76:4-76:6> <> <76:7-76:12>
      generic-parameter <76:8-76:8> T <76:8-76:8>
      generic-parameter <76:11-76:11> U <76:11-76:11>
    fn-def-parameter <76:14-76:26> list <76:14-76:17>
      path <76:20-76:26>
        segment <76:20-76:26> list <76:20-76:23>
          path <76:25-76:25>
            segment <76:25-76:25> T
    fn-def-parameter <76:29-76:41> f <76:29-76:29>
      fn-type <76:32-76:41> () <76:34-76:36>
        fn-type-parameter <76:35-76:35>
          path <76:35-76:35>
            segment <76:35-76:35> T
        path <76:41-76:41>
          segment <76:41-76:41> U
    path <76:47-76:53>
      segment <76:47-76:53> list <76:47-76:50>
        path <76:52-76:52>
          segment <76:52-76:52> U
    block <76:55-82:1>
      var-def <77:5-77:51> mutable result <77:9-77:14>
        call-expr <77:18-77:50> () <77:41-77:50>
          path <77:18-77:40>
            segment <77:18-77:26> list <77:18-77:21>
              path <77:25-77:25>
                segment <77:25-77:25> T
            segment <77:29-77:40> with_capcity
          member-expr <77:42-77:49> . <77:46-77:46> len <77:47-77:49>
            path <77:42-77:45>
              segment <77:42-77:45> list
      for-stmt <78:5-80:5> iter-var item <78:9-78:12>
        path <78:17-78:20>
          segment <78:17-78:20> list
        block <78:22-80:5>
          simple-expr-stmt <79:9-79:28>
            call-expr <79:9-79:27> () <79:19-79:27>
              member-expr <79:9-79:18> . <79:15-79:15> add <79:16-79:18>
                path <79:9-79:14>
                  segment <79:9-79:14> result
              call-expr <79:20-79:26> () <79:21-79:26>
                path <79:20-79:20>
                  segment <79:20-79:20> f
                path <79:22-79:25>
                  segment <79:22-79:25> item
      ret-stmt <81:5-81:18>
        path <81:12-81:17>
          segment <81:12-81:17> result
  fn-def <84:1-89:1> () <84:16-84:57>
    generic-name <84:4-84:15> reduce <84:4-84:9> <> <84:10-84:15>
      generic-parameter <84:11-84:11> T <84:11-84:11>
      generic-parameter <84:14-84:14> A <84:14-84:14>
    fn-def-parameter <84:17-84:29> list <84:17-84:20>
      path <84:23-84:29>
        segment <84:23-84:29> list <84:23-84:26>
          path <84:28-84:28>
            segment <84:28-84:28> T
    fn-def-parameter <84:32-84:38> init <84:32-84:35>
      path <84:38-84:38>
        segment <84:38-84:38> A
    fn-def-parameter <84:41-84:56> f <84:41-84:41>
      fn-type <84:44-84:56> () <84:46-84:51>
        fn-type-parameter <84:47-84:47>
          path <84:47-84:47>
            segment <84:47-84:47> A
        fn-type-parameter <84:50-84:50>
          path <84:50-84:50>
            segment <84:50-84:50> T
        path <84:56-84:56>
          segment <84:56-84:56> A
    path <84:62-84:62>
      segment <84:62-84:62> A
    block <84:64-89:1>
      for-stmt <85:5-87:5> iter-var item <85:9-85:12>
        path <85:17-85:20>
          segment <85:17-85:20> list
        block <85:22-87:5>
          assign-expr-stmt <86:9-86:29> = <86:14-86:14>
            path <86:9-86:12>
              segment <86:9-86:12> init
            call-expr <86:16-86:28> () <86:17-86:28>
              path <86:16-86:16>
                segment <86:16-86:16> f
              path <86:18-86:21>
                segment <86:18-86:21> init
              path <86:24-86:27>
                segment <86:24-86:27> item
      ret-stmt <88:5-88:16>
        path <88:12-88:15>
          segment <88:12-88:15> init
