
Program = [FunctionDef]* fEOF
FunctionDef = fFn fIdentifier fLeftParen [Type fIdentifier [fComma Type fIdentifier]*] fRightParen [fNarrowRightArrow Type] Block
Type = fPrimitiveType | fLeftBracket fPrimitiveType fRightBracket
Block = fLeftBrace [Statement]* fRightBrace

// Statement
Statement = 
    ConstDecl | VarDecl 
    | IfStatement | WhileStatement | ForStatement 
    | AssignStatement | OpAssignStatement
    | ContinueStatement | BreakStatement | ReturnStatement

ConstDecl = fConst Type Identifier fAssign Expression fSemiColon                                                                // const ...;
VarDecl = fVar Type Identifier fAssign Expression fSemiColon                                                                    // var ...;
IfStatement = fIf fLeftParen Expression fRightParen Block [fElse fIf fLeftParen Expression fRightParen Block]* [ fElse Block ]  // if ...}   
WhileStatement = fWhile fLeftParen Expression fRightParen Block                                                                 // while ...}
ContinueStatement = fContinue fSemiColon                                                                                        // continue;
BreakStatement = fBreak fSemiColon                                                                                              // break;
ForStatement = fFor fLeftParen Identifier fIn Identifier fRange Identifier fRightParen Block  // for i in 1..5                  // for ...}
AssignStatement = fIdentifier AssignOperator Expression fSemiColon                                                               // ... = ...;
ReturnStatement = fReturn [Expression] fSemiColon                                                                               // return ...;

// Expression
PrimaryExpression = 
    fLeftParen Expression fRightParen 
    | fIdentifier | fLiteral 
    | fLeftBracket ExpressionList fRightBracket     // var array = [1, 2, 3, a, b, c]
    | fLeftBracket Expression fSemiColon Expression fRightBracket // var array = [false; 100] 
PostfixExpression = 
    PrimaryExpression 
    | PostfixExpression fLeftBracket Expression fRightBracket
    | PostfixExpression fLeftParen ExpressionList fRightParen
    | PostfixExpression fDot fIdentifier
    | PostfixExpression fAs Type
UnaryExpression = PostfixExpression | UnaryOperator UnaryExpression
MultiplicativeExpression = UnaryExpression | MultiplicativeExpression MultiplicativeOperator UnaryExpression
AdditiveExpression = MultiplicativeExpression | AdditiveExpression AdditiveOperator MultiplicativeExpression
ShiftExpression = AdditiveExpression | ShiftExpression ShiftOperator AdditiveExpression
RelationalExpression = ShiftExpression | RelationalExpression RelationalOperator ShiftExpression
BitAndExpression = RelationalExpression | BitAndExpression BitAndOperator RelationalExpression
BitXorExpression = BitAndExpression | BitXorExpression BitXorOperator BitAndExpression
BitOrExpression = BitXorExpression | BitOrExpression BitOrOperator BitXorExpression
EqualityExpression = BitOrExpression | EqualityExpression EqualityOperator BitOrExpression  // `==` and `!=` lower than `|` for `if (enum_var & enum_mem1 == enum_mem1)` 
LogicalAndExpression = EqualityExpression | LogicalAndExpression LogicalAndOperator EqualityExpression 
LogicalOrExpression = LogicalAndExpression | LogicalOrExpression LogicalOrOperator LogicalAndExpression
Expression = LogicalOrExpression
ExpressionList = Expression [fComma Expression]*

// Operator
AssignOperator = fAssign | fAddAssign | fSubAssign | fMulAssign | fDivAssign | fRemAssign | fBitAndAssign | fBitOrAssign | fBitXorAssign 
UnaryOperator = fIncrease | fDecrease | fSub | fLogicalNot | fBitNot  // `+` is not unary because it's meaningless
MultiplicativeOperator = fMul | fDiv | fRem
AdditiveOperator = fAdd | fSub
ShiftOperator = fShiftLeft | fShiftRight
RelationalOperator = fGreate | fLess | fGreatEqual | fLessEqual
BitAndOperator = fBitAnd
BitXorOperator = fBitXor
BitOrOperator = fBitOr
EuqalityOperator = fEqual | fNotEqual
LogicalAndOperator = fLogicalAnd
LogicalOrOperator = fLogicalOr

// Summary
// Keyword: const, var, if, else, break, continue, return, while, for, as
// Primitive type keyword: u8, i32, u32, u64, f32, f64, char, string
// Reserved keyword: type, i8, u16, i16, i64, struct, await, async, yield, 
//     public, private, module, mod, use, using, namespace, extern, default, 
//     new, delete, let, mut, def, impl, tuple, trait, concept, interface, class, 
//     template, mutable, function, lambda, closure, array
// Seperator: `=`, `+=`, `-=`, `*=`, `/=`, `%=`, `&=`, `^=`, `|=`, `++`, `--`,
//     `-`, `!`, `~`, `*`, `\`, `%`, `+`, `-`, `<<`, `>>`, `<`, `>`, `<=`, `>=`, 
//     `&`, `|`, `^`, `!=`, `==`, `&&`, `||`, `->`, `.`


// Temp Road map here
// fix bug on while and if in the test cases and slightly refactor code generation and virtual machine
// add type size back to codegen and make array and string std type, make tuple and reference(pointer) primitive type
// record video
// huge refactor syntax and codegen, merge their syntax trees, maybe use visitor mode 
// native codegen
// bootstrap

// Road map concern2
// 0.1.0, handin, current at 17/1/3
// 0.2.0, private release 1, educational release, for video recording
// 0.3.0, private deployment, some usable scripts are deployed
// 0.4.0 ~ 0.5.0, native build, exe generated
// 1.0.0, bootstrap, no rust dependency